
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007680  08007680  00017680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007930  08007930  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007938  08007938  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08007940  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000110  08007a4c  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007a4c  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aacd  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186d  00000000  00000000  0002ac09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002303f  00000000  00000000  0002d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a048  00000000  00000000  0005044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da4a5  00000000  00000000  0005a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013493c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  00134990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000110 	.word	0x20000110
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007664 	.word	0x08007664

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000114 	.word	0x20000114
 80001ec:	08007664 	.word	0x08007664

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b96e 	b.w	8000e0c <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9d08      	ldr	r5, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	468c      	mov	ip, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 8083 	bne.w	8000c5e <__udivmoddi4+0x116>
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	d947      	bls.n	8000bee <__udivmoddi4+0xa6>
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	b142      	cbz	r2, 8000b76 <__udivmoddi4+0x2e>
 8000b64:	f1c2 0020 	rsb	r0, r2, #32
 8000b68:	fa24 f000 	lsr.w	r0, r4, r0
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	4097      	lsls	r7, r2
 8000b70:	ea40 0c01 	orr.w	ip, r0, r1
 8000b74:	4094      	lsls	r4, r2
 8000b76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b7a:	0c23      	lsrs	r3, r4, #16
 8000b7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000b80:	fa1f fe87 	uxth.w	lr, r7
 8000b84:	fb08 c116 	mls	r1, r8, r6, ip
 8000b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x60>
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9a:	f080 8119 	bcs.w	8000dd0 <__udivmoddi4+0x288>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 8116 	bls.w	8000dd0 <__udivmoddi4+0x288>
 8000ba4:	3e02      	subs	r6, #2
 8000ba6:	443b      	add	r3, r7
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x8c>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	f080 8105 	bcs.w	8000dd4 <__udivmoddi4+0x28c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8102 	bls.w	8000dd4 <__udivmoddi4+0x28c>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd8:	eba4 040e 	sub.w	r4, r4, lr
 8000bdc:	2600      	movs	r6, #0
 8000bde:	b11d      	cbz	r5, 8000be8 <__udivmoddi4+0xa0>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c5 4300 	strd	r4, r3, [r5]
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xaa>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d150      	bne.n	8000c9c <__udivmoddi4+0x154>
 8000bfa:	1bcb      	subs	r3, r1, r7
 8000bfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c00:	fa1f f887 	uxth.w	r8, r7
 8000c04:	2601      	movs	r6, #1
 8000c06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c14:	fb08 f30c 	mul.w	r3, r8, ip
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0xe4>
 8000c1c:	1879      	adds	r1, r7, r1
 8000c1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0xe2>
 8000c24:	428b      	cmp	r3, r1
 8000c26:	f200 80e9 	bhi.w	8000dfc <__udivmoddi4+0x2b4>
 8000c2a:	4684      	mov	ip, r0
 8000c2c:	1ac9      	subs	r1, r1, r3
 8000c2e:	b2a3      	uxth	r3, r4
 8000c30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c3c:	fb08 f800 	mul.w	r8, r8, r0
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x10c>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x10a>
 8000c4c:	45a0      	cmp	r8, r4
 8000c4e:	f200 80d9 	bhi.w	8000e04 <__udivmoddi4+0x2bc>
 8000c52:	4618      	mov	r0, r3
 8000c54:	eba4 0408 	sub.w	r4, r4, r8
 8000c58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c5c:	e7bf      	b.n	8000bde <__udivmoddi4+0x96>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x12e>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	f000 80b1 	beq.w	8000dca <__udivmoddi4+0x282>
 8000c68:	2600      	movs	r6, #0
 8000c6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6e:	4630      	mov	r0, r6
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	fab3 f683 	clz	r6, r3
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d14a      	bne.n	8000d14 <__udivmoddi4+0x1cc>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0x140>
 8000c82:	4282      	cmp	r2, r0
 8000c84:	f200 80b8 	bhi.w	8000df8 <__udivmoddi4+0x2b0>
 8000c88:	1a84      	subs	r4, r0, r2
 8000c8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	468c      	mov	ip, r1
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d0a8      	beq.n	8000be8 <__udivmoddi4+0xa0>
 8000c96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ca4:	4097      	lsls	r7, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cae:	40d9      	lsrs	r1, r3
 8000cb0:	4330      	orrs	r0, r6
 8000cb2:	0c03      	lsrs	r3, r0, #16
 8000cb4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc4:	fb06 f108 	mul.w	r1, r6, r8
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	fa04 f402 	lsl.w	r4, r4, r2
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x19c>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cd6:	f080 808d 	bcs.w	8000df4 <__udivmoddi4+0x2ac>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 808a 	bls.w	8000df4 <__udivmoddi4+0x2ac>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	443b      	add	r3, r7
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b281      	uxth	r1, r0
 8000ce8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb00 f308 	mul.w	r3, r0, r8
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x1c4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d02:	d273      	bcs.n	8000dec <__udivmoddi4+0x2a4>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d971      	bls.n	8000dec <__udivmoddi4+0x2a4>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4439      	add	r1, r7
 8000d0c:	1acb      	subs	r3, r1, r3
 8000d0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d12:	e778      	b.n	8000c06 <__udivmoddi4+0xbe>
 8000d14:	f1c6 0c20 	rsb	ip, r6, #32
 8000d18:	fa03 f406 	lsl.w	r4, r3, r6
 8000d1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d20:	431c      	orrs	r4, r3
 8000d22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d26:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d32:	431f      	orrs	r7, r3
 8000d34:	0c3b      	lsrs	r3, r7, #16
 8000d36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3a:	fa1f f884 	uxth.w	r8, r4
 8000d3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d46:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d50:	fa00 f306 	lsl.w	r3, r0, r6
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x220>
 8000d56:	1861      	adds	r1, r4, r1
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	d248      	bcs.n	8000df0 <__udivmoddi4+0x2a8>
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	d946      	bls.n	8000df0 <__udivmoddi4+0x2a8>
 8000d62:	f1a9 0902 	sub.w	r9, r9, #2
 8000d66:	4421      	add	r1, r4
 8000d68:	eba1 010a 	sub.w	r1, r1, sl
 8000d6c:	b2bf      	uxth	r7, r7
 8000d6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d7a:	fb00 f808 	mul.w	r8, r0, r8
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x24a>
 8000d82:	19e7      	adds	r7, r4, r7
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d88:	d22e      	bcs.n	8000de8 <__udivmoddi4+0x2a0>
 8000d8a:	45b8      	cmp	r8, r7
 8000d8c:	d92c      	bls.n	8000de8 <__udivmoddi4+0x2a0>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4427      	add	r7, r4
 8000d92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d96:	eba7 0708 	sub.w	r7, r7, r8
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	454f      	cmp	r7, r9
 8000da0:	46c6      	mov	lr, r8
 8000da2:	4649      	mov	r1, r9
 8000da4:	d31a      	bcc.n	8000ddc <__udivmoddi4+0x294>
 8000da6:	d017      	beq.n	8000dd8 <__udivmoddi4+0x290>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x27a>
 8000daa:	ebb3 020e 	subs.w	r2, r3, lr
 8000dae:	eb67 0701 	sbc.w	r7, r7, r1
 8000db2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000db6:	40f2      	lsrs	r2, r6
 8000db8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dbc:	40f7      	lsrs	r7, r6
 8000dbe:	e9c5 2700 	strd	r2, r7, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	462e      	mov	r6, r5
 8000dcc:	4628      	mov	r0, r5
 8000dce:	e70b      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	e6e9      	b.n	8000ba8 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fd      	b.n	8000bd4 <__udivmoddi4+0x8c>
 8000dd8:	4543      	cmp	r3, r8
 8000dda:	d2e5      	bcs.n	8000da8 <__udivmoddi4+0x260>
 8000ddc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000de0:	eb69 0104 	sbc.w	r1, r9, r4
 8000de4:	3801      	subs	r0, #1
 8000de6:	e7df      	b.n	8000da8 <__udivmoddi4+0x260>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e7d2      	b.n	8000d92 <__udivmoddi4+0x24a>
 8000dec:	4660      	mov	r0, ip
 8000dee:	e78d      	b.n	8000d0c <__udivmoddi4+0x1c4>
 8000df0:	4681      	mov	r9, r0
 8000df2:	e7b9      	b.n	8000d68 <__udivmoddi4+0x220>
 8000df4:	4666      	mov	r6, ip
 8000df6:	e775      	b.n	8000ce4 <__udivmoddi4+0x19c>
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e74a      	b.n	8000c92 <__udivmoddi4+0x14a>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	4439      	add	r1, r7
 8000e02:	e713      	b.n	8000c2c <__udivmoddi4+0xe4>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	e724      	b.n	8000c54 <__udivmoddi4+0x10c>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <move_to_110xy>:
int C1;
int C2;
int C3;

void move_to_110xy(double id1_theta ,double id2_theta,int id3_theta)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0b04 	vstr	d0, [r7, #16]
 8000e1a:	ed87 1b02 	vstr	d1, [r7, #8]
 8000e1e:	6078      	str	r0, [r7, #4]
	int id1_position,id2_position;
	unsigned char id1_low_position,id1_high_position;
	unsigned char id2_low_position,id2_high_position;
	unsigned char id3_low_position,id3_high_position;

	id1_fffff=47;
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b89      	ldr	r3, [pc, #548]	; (800104c <move_to_110xy+0x23c>)
 8000e26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	id1_position = (id1_theta+id1_fffff)*4096/360*11/2;
 8000e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e32:	f7ff f9e3 	bl	80001fc <__adddf3>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	4b83      	ldr	r3, [pc, #524]	; (8001050 <move_to_110xy+0x240>)
 8000e44:	f7ff fb90 	bl	8000568 <__aeabi_dmul>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	4b7f      	ldr	r3, [pc, #508]	; (8001054 <move_to_110xy+0x244>)
 8000e56:	f7ff fcb1 	bl	80007bc <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b7c      	ldr	r3, [pc, #496]	; (8001058 <move_to_110xy+0x248>)
 8000e68:	f7ff fb7e 	bl	8000568 <__aeabi_dmul>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	f7ff fc9e 	bl	80007bc <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fe1e 	bl	8000ac8 <__aeabi_d2iz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
	id2_position = id2_theta*4096/360*9/2;
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <move_to_110xy+0x240>)
 8000e96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e9a:	f7ff fb65 	bl	8000568 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <move_to_110xy+0x244>)
 8000eac:	f7ff fc86 	bl	80007bc <__aeabi_ddiv>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b67      	ldr	r3, [pc, #412]	; (800105c <move_to_110xy+0x24c>)
 8000ebe:	f7ff fb53 	bl	8000568 <__aeabi_dmul>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed2:	f7ff fc73 	bl	80007bc <__aeabi_ddiv>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fdf3 	bl	8000ac8 <__aeabi_d2iz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	623b      	str	r3, [r7, #32]

	id1_low_position=id1_position%256;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	425a      	negs	r2, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	bf58      	it	pl
 8000ef0:	4253      	negpl	r3, r2
 8000ef2:	77fb      	strb	r3, [r7, #31]
	id1_high_position=id1_position/256%256;
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da00      	bge.n	8000efc <move_to_110xy+0xec>
 8000efa:	33ff      	adds	r3, #255	; 0xff
 8000efc:	121b      	asrs	r3, r3, #8
 8000efe:	425a      	negs	r2, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	bf58      	it	pl
 8000f06:	4253      	negpl	r3, r2
 8000f08:	77bb      	strb	r3, [r7, #30]

	id2_low_position=id2_position%256;
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	425a      	negs	r2, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	bf58      	it	pl
 8000f14:	4253      	negpl	r3, r2
 8000f16:	777b      	strb	r3, [r7, #29]
	id2_high_position=id2_position/256%256;
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da00      	bge.n	8000f20 <move_to_110xy+0x110>
 8000f1e:	33ff      	adds	r3, #255	; 0xff
 8000f20:	121b      	asrs	r3, r3, #8
 8000f22:	425a      	negs	r2, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	bf58      	it	pl
 8000f2a:	4253      	negpl	r3, r2
 8000f2c:	773b      	strb	r3, [r7, #28]

	id3_low_position=id3_theta%256;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	425a      	negs	r2, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	bf58      	it	pl
 8000f38:	4253      	negpl	r3, r2
 8000f3a:	76fb      	strb	r3, [r7, #27]
	id3_high_position=id3_theta/256%256;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <move_to_110xy+0x134>
 8000f42:	33ff      	adds	r3, #255	; 0xff
 8000f44:	121b      	asrs	r3, r3, #8
 8000f46:	425a      	negs	r2, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	bf58      	it	pl
 8000f4e:	4253      	negpl	r3, r2
 8000f50:	76bb      	strb	r3, [r7, #26]

	id1_move[6]=id1_low_position;
 8000f52:	4a43      	ldr	r2, [pc, #268]	; (8001060 <move_to_110xy+0x250>)
 8000f54:	7ffb      	ldrb	r3, [r7, #31]
 8000f56:	7193      	strb	r3, [r2, #6]
	id1_move[7]=id1_high_position;
 8000f58:	4a41      	ldr	r2, [pc, #260]	; (8001060 <move_to_110xy+0x250>)
 8000f5a:	7fbb      	ldrb	r3, [r7, #30]
 8000f5c:	71d3      	strb	r3, [r2, #7]
	id1_move[8]=~(id1_move[2]+id1_move[3]+id1_move[4]+id1_move[5]+id1_move[6]+id1_move[7]);
 8000f5e:	4b40      	ldr	r3, [pc, #256]	; (8001060 <move_to_110xy+0x250>)
 8000f60:	789a      	ldrb	r2, [r3, #2]
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <move_to_110xy+0x250>)
 8000f64:	78db      	ldrb	r3, [r3, #3]
 8000f66:	4413      	add	r3, r2
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <move_to_110xy+0x250>)
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <move_to_110xy+0x250>)
 8000f74:	795b      	ldrb	r3, [r3, #5]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <move_to_110xy+0x250>)
 8000f7c:	799b      	ldrb	r3, [r3, #6]
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <move_to_110xy+0x250>)
 8000f84:	79db      	ldrb	r3, [r3, #7]
 8000f86:	4413      	add	r3, r2
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <move_to_110xy+0x250>)
 8000f90:	721a      	strb	r2, [r3, #8]

	id2_move[6]=id2_low_position;
 8000f92:	4a34      	ldr	r2, [pc, #208]	; (8001064 <move_to_110xy+0x254>)
 8000f94:	7f7b      	ldrb	r3, [r7, #29]
 8000f96:	7193      	strb	r3, [r2, #6]
	id2_move[7]=id2_high_position;
 8000f98:	4a32      	ldr	r2, [pc, #200]	; (8001064 <move_to_110xy+0x254>)
 8000f9a:	7f3b      	ldrb	r3, [r7, #28]
 8000f9c:	71d3      	strb	r3, [r2, #7]
	id2_move[8]=~(id2_move[2]+id2_move[3]+id2_move[4]+id2_move[5]+id2_move[6]+id2_move[7]);
 8000f9e:	4b31      	ldr	r3, [pc, #196]	; (8001064 <move_to_110xy+0x254>)
 8000fa0:	789a      	ldrb	r2, [r3, #2]
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <move_to_110xy+0x254>)
 8000fa4:	78db      	ldrb	r3, [r3, #3]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <move_to_110xy+0x254>)
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <move_to_110xy+0x254>)
 8000fb4:	795b      	ldrb	r3, [r3, #5]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <move_to_110xy+0x254>)
 8000fbc:	799b      	ldrb	r3, [r3, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <move_to_110xy+0x254>)
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <move_to_110xy+0x254>)
 8000fd0:	721a      	strb	r2, [r3, #8]

	id3_move[6]=id3_low_position;
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <move_to_110xy+0x258>)
 8000fd4:	7efb      	ldrb	r3, [r7, #27]
 8000fd6:	7193      	strb	r3, [r2, #6]
	id3_move[7]=id3_high_position;
 8000fd8:	4a23      	ldr	r2, [pc, #140]	; (8001068 <move_to_110xy+0x258>)
 8000fda:	7ebb      	ldrb	r3, [r7, #26]
 8000fdc:	71d3      	strb	r3, [r2, #7]
	id3_move[8]=~(id3_move[2]+id3_move[3]+id3_move[4]+id3_move[5]+id3_move[6]+id3_move[7]);
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <move_to_110xy+0x258>)
 8000fe0:	789a      	ldrb	r2, [r3, #2]
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <move_to_110xy+0x258>)
 8000fe4:	78db      	ldrb	r3, [r3, #3]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <move_to_110xy+0x258>)
 8000fec:	791b      	ldrb	r3, [r3, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <move_to_110xy+0x258>)
 8000ff4:	795b      	ldrb	r3, [r3, #5]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <move_to_110xy+0x258>)
 8000ffc:	799b      	ldrb	r3, [r3, #6]
 8000ffe:	4413      	add	r3, r2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <move_to_110xy+0x258>)
 8001004:	79db      	ldrb	r3, [r3, #7]
 8001006:	4413      	add	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <move_to_110xy+0x258>)
 8001010:	721a      	strb	r2, [r3, #8]

	HAL_UART_Transmit_DMA(&huart2, id1_move, 9);
 8001012:	2209      	movs	r2, #9
 8001014:	4912      	ldr	r1, [pc, #72]	; (8001060 <move_to_110xy+0x250>)
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <move_to_110xy+0x25c>)
 8001018:	f003 f8c4 	bl	80041a4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 800101c:	2064      	movs	r0, #100	; 0x64
 800101e:	f001 fa19 	bl	8002454 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart2, id2_move, 9);
 8001022:	2209      	movs	r2, #9
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <move_to_110xy+0x254>)
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <move_to_110xy+0x25c>)
 8001028:	f003 f8bc 	bl	80041a4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 800102c:	2064      	movs	r0, #100	; 0x64
 800102e:	f001 fa11 	bl	8002454 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart2, id3_move, 9);
 8001032:	2209      	movs	r2, #9
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <move_to_110xy+0x258>)
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <move_to_110xy+0x25c>)
 8001038:	f003 f8b4 	bl	80041a4 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	; 0x64
 800103e:	f001 fa09 	bl	8002454 <HAL_Delay>
}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	; 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40478000 	.word	0x40478000
 8001050:	40b00000 	.word	0x40b00000
 8001054:	40768000 	.word	0x40768000
 8001058:	40260000 	.word	0x40260000
 800105c:	40220000 	.word	0x40220000
 8001060:	20000024 	.word	0x20000024
 8001064:	20000030 	.word	0x20000030
 8001068:	2000003c 	.word	0x2000003c
 800106c:	200003c4 	.word	0x200003c4

08001070 <caculate>:

	HAL_UART_Transmit_DMA(&huart2, id3_move, 9);
	HAL_Delay(100);
}
void caculate(void)
{
 8001070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001074:	ed2d 8b02 	vpush	{d8}
 8001078:	af00      	add	r7, sp, #0
	if(sqrt(pow(des_P2_0[0],2)+pow(des_P2_0[1],2))<=0.24958){
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <caculate+0xf0>)
 800107c:	ed93 7b00 	vldr	d7, [r3]
 8001080:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8001148 <caculate+0xd8>
 8001084:	eeb0 0a47 	vmov.f32	s0, s14
 8001088:	eef0 0a67 	vmov.f32	s1, s15
 800108c:	f004 f942 	bl	8005314 <pow>
 8001090:	ec55 4b10 	vmov	r4, r5, d0
 8001094:	4b32      	ldr	r3, [pc, #200]	; (8001160 <caculate+0xf0>)
 8001096:	ed93 7b02 	vldr	d7, [r3, #8]
 800109a:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001148 <caculate+0xd8>
 800109e:	eeb0 0a47 	vmov.f32	s0, s14
 80010a2:	eef0 0a67 	vmov.f32	s1, s15
 80010a6:	f004 f935 	bl	8005314 <pow>
 80010aa:	ec53 2b10 	vmov	r2, r3, d0
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff f8a3 	bl	80001fc <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	ec43 2b17 	vmov	d7, r2, r3
 80010be:	eeb0 0a47 	vmov.f32	s0, s14
 80010c2:	eef0 0a67 	vmov.f32	s1, s15
 80010c6:	f004 f9d3 	bl	8005470 <sqrt>
 80010ca:	ec51 0b10 	vmov	r0, r1, d0
 80010ce:	a320      	add	r3, pc, #128	; (adr r3, 8001150 <caculate+0xe0>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fcc4 	bl	8000a60 <__aeabi_dcmple>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <caculate+0x70>
		  move_to_110xy(-theta_1, change_theta_2, theta_3);
		  HAL_Delay(100);
		  //HAL_Delay(clock);
	  }
  }
}
 80010de:	e19d      	b.n	800141c <caculate+0x3ac>
	  if(sqrt(pow(des_P2_0[0],2)+pow(des_P2_0[1],2))>=0.07958){
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <caculate+0xf0>)
 80010e2:	ed93 7b00 	vldr	d7, [r3]
 80010e6:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8001148 <caculate+0xd8>
 80010ea:	eeb0 0a47 	vmov.f32	s0, s14
 80010ee:	eef0 0a67 	vmov.f32	s1, s15
 80010f2:	f004 f90f 	bl	8005314 <pow>
 80010f6:	ec55 4b10 	vmov	r4, r5, d0
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <caculate+0xf0>)
 80010fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8001100:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001148 <caculate+0xd8>
 8001104:	eeb0 0a47 	vmov.f32	s0, s14
 8001108:	eef0 0a67 	vmov.f32	s1, s15
 800110c:	f004 f902 	bl	8005314 <pow>
 8001110:	ec53 2b10 	vmov	r2, r3, d0
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff f870 	bl	80001fc <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	ec43 2b17 	vmov	d7, r2, r3
 8001124:	eeb0 0a47 	vmov.f32	s0, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	f004 f9a0 	bl	8005470 <sqrt>
 8001130:	ec51 0b10 	vmov	r0, r1, d0
 8001134:	a308      	add	r3, pc, #32	; (adr r3, 8001158 <caculate+0xe8>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fc9b 	bl	8000a74 <__aeabi_dcmpge>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10f      	bne.n	8001164 <caculate+0xf4>
}
 8001144:	e16a      	b.n	800141c <caculate+0x3ac>
 8001146:	bf00      	nop
 8001148:	00000000 	.word	0x00000000
 800114c:	40000000 	.word	0x40000000
 8001150:	c8de2ac3 	.word	0xc8de2ac3
 8001154:	3fcff23c 	.word	0x3fcff23c
 8001158:	d96a6a01 	.word	0xd96a6a01
 800115c:	3fb45f5a 	.word	0x3fb45f5a
 8001160:	20000078 	.word	0x20000078
			A = (pow(des_P2_0[0], 2) + pow(des_P2_0[1], 2) - pow(l_1, 2) - pow(l_2, 2)) / (2 * l_1 * l_2);
 8001164:	4bb6      	ldr	r3, [pc, #728]	; (8001440 <caculate+0x3d0>)
 8001166:	ed93 7b00 	vldr	d7, [r3]
 800116a:	ed9f 1baf 	vldr	d1, [pc, #700]	; 8001428 <caculate+0x3b8>
 800116e:	eeb0 0a47 	vmov.f32	s0, s14
 8001172:	eef0 0a67 	vmov.f32	s1, s15
 8001176:	f004 f8cd 	bl	8005314 <pow>
 800117a:	ec55 4b10 	vmov	r4, r5, d0
 800117e:	4bb0      	ldr	r3, [pc, #704]	; (8001440 <caculate+0x3d0>)
 8001180:	ed93 7b02 	vldr	d7, [r3, #8]
 8001184:	ed9f 1ba8 	vldr	d1, [pc, #672]	; 8001428 <caculate+0x3b8>
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	f004 f8c0 	bl	8005314 <pow>
 8001194:	ec53 2b10 	vmov	r2, r3, d0
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	f7ff f82e 	bl	80001fc <__adddf3>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
 80011a8:	4ba6      	ldr	r3, [pc, #664]	; (8001444 <caculate+0x3d4>)
 80011aa:	ed93 7b00 	vldr	d7, [r3]
 80011ae:	ed9f 1b9e 	vldr	d1, [pc, #632]	; 8001428 <caculate+0x3b8>
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	f004 f8ab 	bl	8005314 <pow>
 80011be:	ec53 2b10 	vmov	r2, r3, d0
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f817 	bl	80001f8 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4614      	mov	r4, r2
 80011d0:	461d      	mov	r5, r3
 80011d2:	4b9d      	ldr	r3, [pc, #628]	; (8001448 <caculate+0x3d8>)
 80011d4:	ed93 7b00 	vldr	d7, [r3]
 80011d8:	ed9f 1b93 	vldr	d1, [pc, #588]	; 8001428 <caculate+0x3b8>
 80011dc:	eeb0 0a47 	vmov.f32	s0, s14
 80011e0:	eef0 0a67 	vmov.f32	s1, s15
 80011e4:	f004 f896 	bl	8005314 <pow>
 80011e8:	ec53 2b10 	vmov	r2, r3, d0
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff f802 	bl	80001f8 <__aeabi_dsub>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4614      	mov	r4, r2
 80011fa:	461d      	mov	r5, r3
 80011fc:	4b91      	ldr	r3, [pc, #580]	; (8001444 <caculate+0x3d4>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	f7fe fff9 	bl	80001fc <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	4b8d      	ldr	r3, [pc, #564]	; (8001448 <caculate+0x3d8>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f9a6 	bl	8000568 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff faca 	bl	80007bc <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4987      	ldr	r1, [pc, #540]	; (800144c <caculate+0x3dc>)
 800122e:	e9c1 2300 	strd	r2, r3, [r1]
		  theta_2 = atan2(sqrt(1 - pow(A, 2)), A);
 8001232:	4b86      	ldr	r3, [pc, #536]	; (800144c <caculate+0x3dc>)
 8001234:	ed93 7b00 	vldr	d7, [r3]
 8001238:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001428 <caculate+0x3b8>
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	f004 f866 	bl	8005314 <pow>
 8001248:	ec53 2b10 	vmov	r2, r3, d0
 800124c:	f04f 0000 	mov.w	r0, #0
 8001250:	497f      	ldr	r1, [pc, #508]	; (8001450 <caculate+0x3e0>)
 8001252:	f7fe ffd1 	bl	80001f8 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	ec43 2b17 	vmov	d7, r2, r3
 800125e:	eeb0 0a47 	vmov.f32	s0, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	f004 f903 	bl	8005470 <sqrt>
 800126a:	eeb0 6a40 	vmov.f32	s12, s0
 800126e:	eef0 6a60 	vmov.f32	s13, s1
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <caculate+0x3dc>)
 8001274:	ed93 7b00 	vldr	d7, [r3]
 8001278:	eeb0 1a47 	vmov.f32	s2, s14
 800127c:	eef0 1a67 	vmov.f32	s3, s15
 8001280:	eeb0 0a46 	vmov.f32	s0, s12
 8001284:	eef0 0a66 	vmov.f32	s1, s13
 8001288:	f004 f842 	bl	8005310 <atan2>
 800128c:	eeb0 7a40 	vmov.f32	s14, s0
 8001290:	eef0 7a60 	vmov.f32	s15, s1
 8001294:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <caculate+0x3e4>)
 8001296:	ed83 7b00 	vstr	d7, [r3]
		  change_theta_2 = theta_2*180/3.14;
 800129a:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <caculate+0x3e4>)
 800129c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <caculate+0x3e8>)
 80012a6:	f7ff f95f 	bl	8000568 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	a35f      	add	r3, pc, #380	; (adr r3, 8001430 <caculate+0x3c0>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff fa80 	bl	80007bc <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4966      	ldr	r1, [pc, #408]	; (800145c <caculate+0x3ec>)
 80012c2:	e9c1 2300 	strd	r2, r3, [r1]
		  k1 = l_1 + l_2 * cos(theta_2);
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <caculate+0x3e4>)
 80012c8:	ed93 7b00 	vldr	d7, [r3]
 80012cc:	eeb0 0a47 	vmov.f32	s0, s14
 80012d0:	eef0 0a67 	vmov.f32	s1, s15
 80012d4:	f003 ff78 	bl	80051c8 <cos>
 80012d8:	ec51 0b10 	vmov	r0, r1, d0
 80012dc:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <caculate+0x3d8>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f941 	bl	8000568 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	4b55      	ldr	r3, [pc, #340]	; (8001444 <caculate+0x3d4>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7fe ff82 	bl	80001fc <__adddf3>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4958      	ldr	r1, [pc, #352]	; (8001460 <caculate+0x3f0>)
 80012fe:	e9c1 2300 	strd	r2, r3, [r1]
		  k2 = l_2 * sin(theta_2);
 8001302:	4b54      	ldr	r3, [pc, #336]	; (8001454 <caculate+0x3e4>)
 8001304:	ed93 7b00 	vldr	d7, [r3]
 8001308:	eeb0 0a47 	vmov.f32	s0, s14
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	f003 ffaa 	bl	8005268 <sin>
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <caculate+0x3d8>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f923 	bl	8000568 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	494f      	ldr	r1, [pc, #316]	; (8001464 <caculate+0x3f4>)
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
		  theta_1 = (atan2(des_P2_0[1] ,des_P2_0[0]) - atan2(k2 ,k1))*180/3.14;
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <caculate+0x3d0>)
 800132e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001332:	4b43      	ldr	r3, [pc, #268]	; (8001440 <caculate+0x3d0>)
 8001334:	ed93 6b00 	vldr	d6, [r3]
 8001338:	eeb0 1a46 	vmov.f32	s2, s12
 800133c:	eef0 1a66 	vmov.f32	s3, s13
 8001340:	eeb0 0a47 	vmov.f32	s0, s14
 8001344:	eef0 0a67 	vmov.f32	s1, s15
 8001348:	f003 ffe2 	bl	8005310 <atan2>
 800134c:	ec55 4b10 	vmov	r4, r5, d0
 8001350:	4b44      	ldr	r3, [pc, #272]	; (8001464 <caculate+0x3f4>)
 8001352:	ed93 7b00 	vldr	d7, [r3]
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <caculate+0x3f0>)
 8001358:	ed93 6b00 	vldr	d6, [r3]
 800135c:	eeb0 1a46 	vmov.f32	s2, s12
 8001360:	eef0 1a66 	vmov.f32	s3, s13
 8001364:	eeb0 0a47 	vmov.f32	s0, s14
 8001368:	eef0 0a67 	vmov.f32	s1, s15
 800136c:	f003 ffd0 	bl	8005310 <atan2>
 8001370:	ec53 2b10 	vmov	r2, r3, d0
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7fe ff3e 	bl	80001f8 <__aeabi_dsub>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <caculate+0x3e8>)
 800138a:	f7ff f8ed 	bl	8000568 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	a326      	add	r3, pc, #152	; (adr r3, 8001430 <caculate+0x3c0>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff fa0e 	bl	80007bc <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <caculate+0x3f8>)
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]
		  theta_3 = des_P2_0[2]*4096/0.0085;
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <caculate+0x3d0>)
 80013ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <caculate+0x3fc>)
 80013b6:	f7ff f8d7 	bl	8000568 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	a31d      	add	r3, pc, #116	; (adr r3, 8001438 <caculate+0x3c8>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f9f8 	bl	80007bc <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4927      	ldr	r1, [pc, #156]	; (8001470 <caculate+0x400>)
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
		  theta_1=theta_1;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <caculate+0x3f8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	4922      	ldr	r1, [pc, #136]	; (8001468 <caculate+0x3f8>)
 80013de:	e9c1 2300 	strd	r2, r3, [r1]
		  move_to_110xy(-theta_1, change_theta_2, theta_3);
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <caculate+0x3f8>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	4690      	mov	r8, r2
 80013ea:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <caculate+0x3ec>)
 80013f0:	ed93 8b00 	vldr	d8, [r3]
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <caculate+0x400>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fb63 	bl	8000ac8 <__aeabi_d2iz>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	eeb0 1a48 	vmov.f32	s2, s16
 800140a:	eef0 1a68 	vmov.f32	s3, s17
 800140e:	ec49 8b10 	vmov	d0, r8, r9
 8001412:	f7ff fcfd 	bl	8000e10 <move_to_110xy>
		  HAL_Delay(100);
 8001416:	2064      	movs	r0, #100	; 0x64
 8001418:	f001 f81c 	bl	8002454 <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	ecbd 8b02 	vpop	{d8}
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	00000000 	.word	0x00000000
 800142c:	40000000 	.word	0x40000000
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	40091eb8 	.word	0x40091eb8
 8001438:	b020c49c 	.word	0xb020c49c
 800143c:	3f816872 	.word	0x3f816872
 8001440:	20000078 	.word	0x20000078
 8001444:	20000068 	.word	0x20000068
 8001448:	20000070 	.word	0x20000070
 800144c:	200001b0 	.word	0x200001b0
 8001450:	3ff00000 	.word	0x3ff00000
 8001454:	20000300 	.word	0x20000300
 8001458:	40668000 	.word	0x40668000
 800145c:	20000378 	.word	0x20000378
 8001460:	20000408 	.word	0x20000408
 8001464:	20000308 	.word	0x20000308
 8001468:	20000138 	.word	0x20000138
 800146c:	40b00000 	.word	0x40b00000
 8001470:	200001c0 	.word	0x200001c0
 8001474:	00000000 	.word	0x00000000

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 800147c:	f000 ff78 	bl	8002370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 faac 	bl	80019dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f000 fc44 	bl	8001d10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001488:	f000 fc04 	bl	8001c94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800148c:	f000 fbd6 	bl	8001c3c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001490:	f000 fbaa 	bl	8001be8 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001494:	f000 fb54 	bl	8001b40 <MX_UART4_Init>
  MX_ADC1_Init();
 8001498:	f000 fb00 	bl	8001a9c <MX_ADC1_Init>
  MX_UART5_Init();
 800149c:	f000 fb7a 	bl	8001b94 <MX_UART5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	48cc      	ldr	r0, [pc, #816]	; (80017d8 <main+0x360>)
 80014a6:	f002 f92b 	bl	8003700 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      /*初始馬達設定*/
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	48ca      	ldr	r0, [pc, #808]	; (80017d8 <main+0x360>)
 80014b0:	f002 f926 	bl	8003700 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b8:	f000 ffcc 	bl	8002454 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, id1_speed, 9);
 80014bc:	2209      	movs	r2, #9
 80014be:	49c7      	ldr	r1, [pc, #796]	; (80017dc <main+0x364>)
 80014c0:	48c7      	ldr	r0, [pc, #796]	; (80017e0 <main+0x368>)
 80014c2:	f002 fe6f 	bl	80041a4 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 80014c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ca:	f000 ffc3 	bl	8002454 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, id2_speed, 9);
 80014ce:	2209      	movs	r2, #9
 80014d0:	49c4      	ldr	r1, [pc, #784]	; (80017e4 <main+0x36c>)
 80014d2:	48c3      	ldr	r0, [pc, #780]	; (80017e0 <main+0x368>)
 80014d4:	f002 fe66 	bl	80041a4 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 80014d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014dc:	f000 ffba 	bl	8002454 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, id3_speed, 9);
 80014e0:	2209      	movs	r2, #9
 80014e2:	49c1      	ldr	r1, [pc, #772]	; (80017e8 <main+0x370>)
 80014e4:	48be      	ldr	r0, [pc, #760]	; (80017e0 <main+0x368>)
 80014e6:	f002 fe5d 	bl	80041a4 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 80014ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ee:	f000 ffb1 	bl	8002454 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, id1_speed, 9);
 80014f2:	2209      	movs	r2, #9
 80014f4:	49b9      	ldr	r1, [pc, #740]	; (80017dc <main+0x364>)
 80014f6:	48ba      	ldr	r0, [pc, #744]	; (80017e0 <main+0x368>)
 80014f8:	f002 fe54 	bl	80041a4 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 80014fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001500:	f000 ffa8 	bl	8002454 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, change_to_node_model, 11);
 8001504:	220b      	movs	r2, #11
 8001506:	49b9      	ldr	r1, [pc, #740]	; (80017ec <main+0x374>)
 8001508:	48b5      	ldr	r0, [pc, #724]	; (80017e0 <main+0x368>)
 800150a:	f002 fe4b 	bl	80041a4 <HAL_UART_Transmit_DMA>
	  HAL_Delay(500);
 800150e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001512:	f000 ff9f 	bl	8002454 <HAL_Delay>
	  move_to_110xy(3,0,0.5);
 8001516:	2000      	movs	r0, #0
 8001518:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 80017b0 <main+0x338>
 800151c:	ed9f 0ba6 	vldr	d0, [pc, #664]	; 80017b8 <main+0x340>
 8001520:	f7ff fc76 	bl	8000e10 <move_to_110xy>
	  HAL_Delay(2000);
 8001524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001528:	f000 ff94 	bl	8002454 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart2, led_on, 8);
 800152c:	2208      	movs	r2, #8
 800152e:	49b0      	ldr	r1, [pc, #704]	; (80017f0 <main+0x378>)
 8001530:	48ab      	ldr	r0, [pc, #684]	; (80017e0 <main+0x368>)
 8001532:	f002 fe37 	bl	80041a4 <HAL_UART_Transmit_DMA>

	  /*LED閃爍3次*/
		  HAL_Delay(1000);
 8001536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153a:	f000 ff8b 	bl	8002454 <HAL_Delay>
		  HAL_UART_Transmit_DMA(&huart2, led_off, 8);
 800153e:	2208      	movs	r2, #8
 8001540:	49ac      	ldr	r1, [pc, #688]	; (80017f4 <main+0x37c>)
 8001542:	48a7      	ldr	r0, [pc, #668]	; (80017e0 <main+0x368>)
 8001544:	f002 fe2e 	bl	80041a4 <HAL_UART_Transmit_DMA>
		  HAL_Delay(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f000 ff82 	bl	8002454 <HAL_Delay>
		  HAL_UART_Transmit_DMA(&huart2, led_on, 8);
 8001550:	2208      	movs	r2, #8
 8001552:	49a7      	ldr	r1, [pc, #668]	; (80017f0 <main+0x378>)
 8001554:	48a2      	ldr	r0, [pc, #648]	; (80017e0 <main+0x368>)
 8001556:	f002 fe25 	bl	80041a4 <HAL_UART_Transmit_DMA>
		  HAL_Delay(1000);
 800155a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155e:	f000 ff79 	bl	8002454 <HAL_Delay>
		  HAL_UART_Transmit_DMA(&huart2, led_off, 8);
 8001562:	2208      	movs	r2, #8
 8001564:	49a3      	ldr	r1, [pc, #652]	; (80017f4 <main+0x37c>)
 8001566:	489e      	ldr	r0, [pc, #632]	; (80017e0 <main+0x368>)
 8001568:	f002 fe1c 	bl	80041a4 <HAL_UART_Transmit_DMA>
		  HAL_Delay(1000);
 800156c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001570:	f000 ff70 	bl	8002454 <HAL_Delay>
		  HAL_UART_Transmit_DMA(&huart2, led_on, 8);
 8001574:	2208      	movs	r2, #8
 8001576:	499e      	ldr	r1, [pc, #632]	; (80017f0 <main+0x378>)
 8001578:	4899      	ldr	r0, [pc, #612]	; (80017e0 <main+0x368>)
 800157a:	f002 fe13 	bl	80041a4 <HAL_UART_Transmit_DMA>
		  HAL_Delay(1000);
 800157e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001582:	f000 ff67 	bl	8002454 <HAL_Delay>
		  move_to_110xy(3,0,10);
		  HAL_Delay(10000);
		  */
	  /*接收資訊*/

	  HAL_UART_Receive(&huart5, test, 1, HAL_MAX_DELAY);
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	2201      	movs	r2, #1
 800158c:	499a      	ldr	r1, [pc, #616]	; (80017f8 <main+0x380>)
 800158e:	489b      	ldr	r0, [pc, #620]	; (80017fc <main+0x384>)
 8001590:	f002 fd65 	bl	800405e <HAL_UART_Receive>
	  HAL_Delay(100);
 8001594:	2064      	movs	r0, #100	; 0x64
 8001596:	f000 ff5d 	bl	8002454 <HAL_Delay>
	  switch(test[0]){
 800159a:	4b97      	ldr	r3, [pc, #604]	; (80017f8 <main+0x380>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	3b31      	subs	r3, #49	; 0x31
 80015a0:	2b49      	cmp	r3, #73	; 0x49
 80015a2:	f200 81e7 	bhi.w	8001974 <main+0x4fc>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <main+0x134>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080016d5 	.word	0x080016d5
 80015b0:	080016f7 	.word	0x080016f7
 80015b4:	0800171b 	.word	0x0800171b
 80015b8:	0800173d 	.word	0x0800173d
 80015bc:	08001761 	.word	0x08001761
 80015c0:	08001787 	.word	0x08001787
 80015c4:	08001805 	.word	0x08001805
 80015c8:	08001827 	.word	0x08001827
 80015cc:	0800184b 	.word	0x0800184b
 80015d0:	08001975 	.word	0x08001975
 80015d4:	08001975 	.word	0x08001975
 80015d8:	08001975 	.word	0x08001975
 80015dc:	08001975 	.word	0x08001975
 80015e0:	08001975 	.word	0x08001975
 80015e4:	08001975 	.word	0x08001975
 80015e8:	08001975 	.word	0x08001975
 80015ec:	08001975 	.word	0x08001975
 80015f0:	08001975 	.word	0x08001975
 80015f4:	08001975 	.word	0x08001975
 80015f8:	08001975 	.word	0x08001975
 80015fc:	08001975 	.word	0x08001975
 8001600:	08001975 	.word	0x08001975
 8001604:	08001975 	.word	0x08001975
 8001608:	08001975 	.word	0x08001975
 800160c:	08001975 	.word	0x08001975
 8001610:	08001975 	.word	0x08001975
 8001614:	08001975 	.word	0x08001975
 8001618:	08001975 	.word	0x08001975
 800161c:	08001975 	.word	0x08001975
 8001620:	08001975 	.word	0x08001975
 8001624:	08001975 	.word	0x08001975
 8001628:	08001975 	.word	0x08001975
 800162c:	08001975 	.word	0x08001975
 8001630:	08001975 	.word	0x08001975
 8001634:	08001975 	.word	0x08001975
 8001638:	08001975 	.word	0x08001975
 800163c:	08001975 	.word	0x08001975
 8001640:	08001975 	.word	0x08001975
 8001644:	08001975 	.word	0x08001975
 8001648:	08001975 	.word	0x08001975
 800164c:	08001975 	.word	0x08001975
 8001650:	08001975 	.word	0x08001975
 8001654:	08001975 	.word	0x08001975
 8001658:	08001975 	.word	0x08001975
 800165c:	08001975 	.word	0x08001975
 8001660:	08001975 	.word	0x08001975
 8001664:	08001975 	.word	0x08001975
 8001668:	08001975 	.word	0x08001975
 800166c:	08001975 	.word	0x08001975
 8001670:	080018d9 	.word	0x080018d9
 8001674:	08001975 	.word	0x08001975
 8001678:	08001891 	.word	0x08001891
 800167c:	08001975 	.word	0x08001975
 8001680:	080018b5 	.word	0x080018b5
 8001684:	08001975 	.word	0x08001975
 8001688:	08001975 	.word	0x08001975
 800168c:	08001975 	.word	0x08001975
 8001690:	08001975 	.word	0x08001975
 8001694:	08001975 	.word	0x08001975
 8001698:	080018fd 	.word	0x080018fd
 800169c:	08001975 	.word	0x08001975
 80016a0:	08001975 	.word	0x08001975
 80016a4:	08001975 	.word	0x08001975
 80016a8:	08001975 	.word	0x08001975
 80016ac:	08001975 	.word	0x08001975
 80016b0:	08001921 	.word	0x08001921
 80016b4:	08001975 	.word	0x08001975
 80016b8:	08001975 	.word	0x08001975
 80016bc:	0800186d 	.word	0x0800186d
 80016c0:	08001975 	.word	0x08001975
 80016c4:	08001975 	.word	0x08001975
 80016c8:	08001975 	.word	0x08001975
 80016cc:	08001975 	.word	0x08001975
 80016d0:	08001945 	.word	0x08001945
	  case '1':
		  des_P2_0[0] = -0.17647971;
 80016d4:	494a      	ldr	r1, [pc, #296]	; (8001800 <main+0x388>)
 80016d6:	a33a      	add	r3, pc, #232	; (adr r3, 80017c0 <main+0x348>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0.17647971;
 80016e0:	4947      	ldr	r1, [pc, #284]	; (8001800 <main+0x388>)
 80016e2:	a339      	add	r3, pc, #228	; (adr r3, 80017c8 <main+0x350>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 80016ec:	f7ff fcc0 	bl	8001070 <caculate>
		  caculate();//130.6 10.8
 80016f0:	f7ff fcbe 	bl	8001070 <caculate>
		  //move_to_110xy(-135,0,0.5);

		  break;
 80016f4:	e151      	b.n	800199a <main+0x522>
	  case '2':
		  des_P2_0[0] = 0;
 80016f6:	4942      	ldr	r1, [pc, #264]	; (8001800 <main+0x388>)
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0.18647971;
 8001704:	493e      	ldr	r1, [pc, #248]	; (8001800 <main+0x388>)
 8001706:	a332      	add	r3, pc, #200	; (adr r3, 80017d0 <main+0x358>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 8001710:	f7ff fcae 	bl	8001070 <caculate>
		  caculate();//54.6 92.5
 8001714:	f7ff fcac 	bl	8001070 <caculate>
		  //move_to_110xy(-54.6,92.5,0.5);

		  break;
 8001718:	e13f      	b.n	800199a <main+0x522>
	  case '3':
		  des_P2_0[0] = 0.17647971;
 800171a:	4939      	ldr	r1, [pc, #228]	; (8001800 <main+0x388>)
 800171c:	a32a      	add	r3, pc, #168	; (adr r3, 80017c8 <main+0x350>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0.17647971;
 8001726:	4936      	ldr	r1, [pc, #216]	; (8001800 <main+0x388>)
 8001728:	a327      	add	r3, pc, #156	; (adr r3, 80017c8 <main+0x350>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 8001732:	f7ff fc9d 	bl	8001070 <caculate>
		  caculate();//40.6 10.8
 8001736:	f7ff fc9b 	bl	8001070 <caculate>
		  //move_to_110xy(-45,0,0.5);

		  break;
 800173a:	e12e      	b.n	800199a <main+0x522>
	  case '4':
		  des_P2_0[0] = -0.17647971;
 800173c:	4930      	ldr	r1, [pc, #192]	; (8001800 <main+0x388>)
 800173e:	a320      	add	r3, pc, #128	; (adr r3, 80017c0 <main+0x348>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0;
 8001748:	492d      	ldr	r1, [pc, #180]	; (8001800 <main+0x388>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 8001756:	f7ff fc8b 	bl	8001070 <caculate>
		  caculate();//131 88.4
 800175a:	f7ff fc89 	bl	8001070 <caculate>
		  //move_to_110xy(-131,88.4,0.5);

		  break;
 800175e:	e11c      	b.n	800199a <main+0x522>
	  case '5':
		  des_P2_0[0] = 0;
 8001760:	4927      	ldr	r1, [pc, #156]	; (8001800 <main+0x388>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0;
 800176e:	4924      	ldr	r1, [pc, #144]	; (8001800 <main+0x388>)
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 800177c:	f7ff fc78 	bl	8001070 <caculate>
		  caculate();//80.9 175.9
 8001780:	f7ff fc76 	bl	8001070 <caculate>
		  //move_to_110xy(-90,180,0.5);

		  break;
 8001784:	e109      	b.n	800199a <main+0x522>
	  case '6':
		  des_P2_0[0] = 0.17647971;
 8001786:	491e      	ldr	r1, [pc, #120]	; (8001800 <main+0x388>)
 8001788:	a30f      	add	r3, pc, #60	; (adr r3, 80017c8 <main+0x350>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0;
 8001792:	491b      	ldr	r1, [pc, #108]	; (8001800 <main+0x388>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 80017a0:	f7ff fc66 	bl	8001070 <caculate>
		  caculate();//-19.2 88.4
 80017a4:	f7ff fc64 	bl	8001070 <caculate>
		  //move_to_110xy(19.2,88.4,0.5);

		  break;
 80017a8:	e0f7      	b.n	800199a <main+0x522>
 80017aa:	bf00      	nop
 80017ac:	f3af 8000 	nop.w
	...
 80017bc:	40080000 	.word	0x40080000
 80017c0:	1b6dc4aa 	.word	0x1b6dc4aa
 80017c4:	bfc696e3 	.word	0xbfc696e3
 80017c8:	1b6dc4aa 	.word	0x1b6dc4aa
 80017cc:	3fc696e3 	.word	0x3fc696e3
 80017d0:	2fe8a5f1 	.word	0x2fe8a5f1
 80017d4:	3fc7de91 	.word	0x3fc7de91
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	20000000 	.word	0x20000000
 80017e0:	200003c4 	.word	0x200003c4
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	20000018 	.word	0x20000018
 80017ec:	20000058 	.word	0x20000058
 80017f0:	20000048 	.word	0x20000048
 80017f4:	20000050 	.word	0x20000050
 80017f8:	2000012c 	.word	0x2000012c
 80017fc:	200001d0 	.word	0x200001d0
 8001800:	20000078 	.word	0x20000078
	  case '7':
		  des_P2_0[0] = -0.17647971;
 8001804:	4972      	ldr	r1, [pc, #456]	; (80019d0 <main+0x558>)
 8001806:	a368      	add	r3, pc, #416	; (adr r3, 80019a8 <main+0x530>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = -0.17647971;
 8001810:	496f      	ldr	r1, [pc, #444]	; (80019d0 <main+0x558>)
 8001812:	a365      	add	r3, pc, #404	; (adr r3, 80019a8 <main+0x530>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 800181c:	f7ff fc28 	bl	8001070 <caculate>
		  caculate();//-139.4 10.8
 8001820:	f7ff fc26 	bl	8001070 <caculate>
		  //move_to_110xy(135,0,0.5);

		  break;
 8001824:	e0b9      	b.n	800199a <main+0x522>
	  case '8':
		  des_P2_0[0] = 0;
 8001826:	496a      	ldr	r1, [pc, #424]	; (80019d0 <main+0x558>)
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = -0.19647971;
 8001834:	4966      	ldr	r1, [pc, #408]	; (80019d0 <main+0x558>)
 8001836:	a35e      	add	r3, pc, #376	; (adr r3, 80019b0 <main+0x538>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 8001840:	f7ff fc16 	bl	8001070 <caculate>
		  caculate();//-125.4 92.5
 8001844:	f7ff fc14 	bl	8001070 <caculate>
		  //move_to_110xy(125.4,92.5,0.5);

		  break;
 8001848:	e0a7      	b.n	800199a <main+0x522>
	  case '9':
		  des_P2_0[0] = 0.17647971;
 800184a:	4961      	ldr	r1, [pc, #388]	; (80019d0 <main+0x558>)
 800184c:	a35a      	add	r3, pc, #360	; (adr r3, 80019b8 <main+0x540>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = -0.17647971;
 8001856:	495e      	ldr	r1, [pc, #376]	; (80019d0 <main+0x558>)
 8001858:	a353      	add	r3, pc, #332	; (adr r3, 80019a8 <main+0x530>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 8001862:	f7ff fc05 	bl	8001070 <caculate>
		  caculate();//-49.4 10.8
 8001866:	f7ff fc03 	bl	8001070 <caculate>
		  //move_to_110xy(45,0,0.5);

		  break;
 800186a:	e096      	b.n	800199a <main+0x522>

	  case 'u':

		  des_P2_0[2] =des_P2_0[2]+0.01 ;
 800186c:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <main+0x558>)
 800186e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001872:	a353      	add	r3, pc, #332	; (adr r3, 80019c0 <main+0x548>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fcc0 	bl	80001fc <__adddf3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4953      	ldr	r1, [pc, #332]	; (80019d0 <main+0x558>)
 8001882:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  caculate();
 8001886:	f7ff fbf3 	bl	8001070 <caculate>
		  caculate();
 800188a:	f7ff fbf1 	bl	8001070 <caculate>

		  break;
 800188e:	e084      	b.n	800199a <main+0x522>
	  case 'd':
		  des_P2_0[2] =des_P2_0[2]-0.01;
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <main+0x558>)
 8001892:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001896:	a34a      	add	r3, pc, #296	; (adr r3, 80019c0 <main+0x548>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fcac 	bl	80001f8 <__aeabi_dsub>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	494a      	ldr	r1, [pc, #296]	; (80019d0 <main+0x558>)
 80018a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  caculate();
 80018aa:	f7ff fbe1 	bl	8001070 <caculate>
		  caculate();
 80018ae:	f7ff fbdf 	bl	8001070 <caculate>

		  break;
 80018b2:	e072      	b.n	800199a <main+0x522>
	  case 'f':
		  des_P2_0[1] =des_P2_0[1]+0.01;
 80018b4:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <main+0x558>)
 80018b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018ba:	a341      	add	r3, pc, #260	; (adr r3, 80019c0 <main+0x548>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fc9c 	bl	80001fc <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4941      	ldr	r1, [pc, #260]	; (80019d0 <main+0x558>)
 80018ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 80018ce:	f7ff fbcf 	bl	8001070 <caculate>
		  caculate();
 80018d2:	f7ff fbcd 	bl	8001070 <caculate>
		  break;
 80018d6:	e060      	b.n	800199a <main+0x522>
	  case 'b':
		  des_P2_0[1] = des_P2_0[1]-0.01;
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <main+0x558>)
 80018da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018de:	a338      	add	r3, pc, #224	; (adr r3, 80019c0 <main+0x548>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fc88 	bl	80001f8 <__aeabi_dsub>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4938      	ldr	r1, [pc, #224]	; (80019d0 <main+0x558>)
 80018ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  caculate();
 80018f2:	f7ff fbbd 	bl	8001070 <caculate>
		  caculate();
 80018f6:	f7ff fbbb 	bl	8001070 <caculate>
		  break;
 80018fa:	e04e      	b.n	800199a <main+0x522>
	  case 'l':
		  des_P2_0[0] = des_P2_0[0]-0.01;
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <main+0x558>)
 80018fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001902:	a32f      	add	r3, pc, #188	; (adr r3, 80019c0 <main+0x548>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fc76 	bl	80001f8 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	492f      	ldr	r1, [pc, #188]	; (80019d0 <main+0x558>)
 8001912:	e9c1 2300 	strd	r2, r3, [r1]
		  caculate();
 8001916:	f7ff fbab 	bl	8001070 <caculate>
		  caculate();
 800191a:	f7ff fba9 	bl	8001070 <caculate>

		  break;
 800191e:	e03c      	b.n	800199a <main+0x522>
	  case 'r':
		  des_P2_0[0] = des_P2_0[0]+0.01;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <main+0x558>)
 8001922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001926:	a326      	add	r3, pc, #152	; (adr r3, 80019c0 <main+0x548>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fc66 	bl	80001fc <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4926      	ldr	r1, [pc, #152]	; (80019d0 <main+0x558>)
 8001936:	e9c1 2300 	strd	r2, r3, [r1]
		  caculate();
 800193a:	f7ff fb99 	bl	8001070 <caculate>
		  caculate();
 800193e:	f7ff fb97 	bl	8001070 <caculate>

		  break;
 8001942:	e02a      	b.n	800199a <main+0x522>
	  case 'z':
		  des_P2_0[0] = 0.24958;
 8001944:	4922      	ldr	r1, [pc, #136]	; (80019d0 <main+0x558>)
 8001946:	a320      	add	r3, pc, #128	; (adr r3, 80019c8 <main+0x550>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = 0;
 8001950:	491f      	ldr	r1, [pc, #124]	; (80019d0 <main+0x558>)
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  des_P2_0[2] = 0.5;
 800195e:	491c      	ldr	r1, [pc, #112]	; (80019d0 <main+0x558>)
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <main+0x55c>)
 8001966:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  caculate();
 800196a:	f7ff fb81 	bl	8001070 <caculate>
		  caculate();
 800196e:	f7ff fb7f 	bl	8001070 <caculate>

		  break;
 8001972:	e012      	b.n	800199a <main+0x522>
	  default:
		  des_P2_0[0] = des_P2_0[0];
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <main+0x558>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	4915      	ldr	r1, [pc, #84]	; (80019d0 <main+0x558>)
 800197c:	e9c1 2300 	strd	r2, r3, [r1]
		  des_P2_0[1] = des_P2_0[1];
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <main+0x558>)
 8001982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001986:	4912      	ldr	r1, [pc, #72]	; (80019d0 <main+0x558>)
 8001988:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  des_P2_0[2] = des_P2_0[2];
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <main+0x558>)
 800198e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001992:	490f      	ldr	r1, [pc, #60]	; (80019d0 <main+0x558>)
 8001994:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  break;
 8001998:	bf00      	nop

	  }
	  test[0]='0';
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <main+0x560>)
 800199c:	2230      	movs	r2, #48	; 0x30
 800199e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart5, test, 1, HAL_MAX_DELAY);
 80019a0:	e5f1      	b.n	8001586 <main+0x10e>
 80019a2:	bf00      	nop
 80019a4:	f3af 8000 	nop.w
 80019a8:	1b6dc4aa 	.word	0x1b6dc4aa
 80019ac:	bfc696e3 	.word	0xbfc696e3
 80019b0:	44638739 	.word	0x44638739
 80019b4:	bfc9263f 	.word	0xbfc9263f
 80019b8:	1b6dc4aa 	.word	0x1b6dc4aa
 80019bc:	3fc696e3 	.word	0x3fc696e3
 80019c0:	47ae147b 	.word	0x47ae147b
 80019c4:	3f847ae1 	.word	0x3f847ae1
 80019c8:	c8de2ac3 	.word	0xc8de2ac3
 80019cc:	3fcff23c 	.word	0x3fcff23c
 80019d0:	20000078 	.word	0x20000078
 80019d4:	3fe00000 	.word	0x3fe00000
 80019d8:	2000012c 	.word	0x2000012c

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b094      	sub	sp, #80	; 0x50
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	2230      	movs	r2, #48	; 0x30
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fbe2 	bl	80051b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <SystemClock_Config+0xb8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <SystemClock_Config+0xb8>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <SystemClock_Config+0xb8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <SystemClock_Config+0xbc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <SystemClock_Config+0xbc>)
 8001a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <SystemClock_Config+0xbc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a44:	2310      	movs	r3, #16
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fe6f 	bl	8003734 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a5c:	f000 f9dc 	bl	8001e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 f8d2 	bl	8003c24 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a86:	f000 f9c7 	bl	8001e18 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3750      	adds	r7, #80	; 0x50
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <MX_ADC1_Init+0x9c>)
 8001ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <MX_ADC1_Init+0xa0>)
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001afc:	f000 fcce 	bl	800249c <HAL_ADC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f000 f987 	bl	8001e18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_ADC1_Init+0x98>)
 8001b1c:	f000 fd02 	bl	8002524 <HAL_ADC_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b26:	f000 f977 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000214 	.word	0x20000214
 8001b38:	40012000 	.word	0x40012000
 8001b3c:	0f000001 	.word	0x0f000001

08001b40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_UART4_Init+0x50>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b4c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_UART4_Init+0x4c>)
 8001b78:	f002 fa24 	bl	8003fc4 <HAL_UART_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b82:	f000 f949 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000380 	.word	0x20000380
 8001b90:	40004c00 	.word	0x40004c00

08001b94 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <MX_UART5_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001ba0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001ba4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_UART5_Init+0x4c>)
 8001bcc:	f002 f9fa 	bl	8003fc4 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f000 f91f 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200001d0 	.word	0x200001d0
 8001be4:	40005000 	.word	0x40005000

08001be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001bf4:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <MX_USART1_UART_Init+0x50>)
 8001bf6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_USART1_UART_Init+0x48>)
 8001c1e:	f002 f9d1 	bl	8003fc4 <HAL_UART_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001c28:	f000 f8f6 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200002bc 	.word	0x200002bc
 8001c34:	40011000 	.word	0x40011000
 8001c38:	000f4240 	.word	0x000f4240

08001c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <MX_USART2_UART_Init+0x50>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <MX_USART2_UART_Init+0x54>)
 8001c4a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c60:	220c      	movs	r2, #12
 8001c62:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c66:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_USART2_UART_Init+0x4c>)
 8001c74:	f002 f9a6 	bl	8003fc4 <HAL_UART_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c7e:	f000 f8cb 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003c4 	.word	0x200003c4
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	000f4240 	.word	0x000f4240

08001c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_DMA_Init+0x78>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <MX_DMA_Init+0x78>)
 8001ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_DMA_Init+0x78>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_DMA_Init+0x78>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <MX_DMA_Init+0x78>)
 8001cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_DMA_Init+0x78>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2010      	movs	r0, #16
 8001cd8:	f000 ff2d 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cdc:	2010      	movs	r0, #16
 8001cde:	f000 ff46 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2011      	movs	r0, #17
 8001ce8:	f000 ff25 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cec:	2011      	movs	r0, #17
 8001cee:	f000 ff3e 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2038      	movs	r0, #56	; 0x38
 8001cf8:	f000 ff1d 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cfc:	2038      	movs	r0, #56	; 0x38
 8001cfe:	f000 ff36 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_GPIO_Init+0xfc>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001db8:	4815      	ldr	r0, [pc, #84]	; (8001e10 <MX_GPIO_Init+0x100>)
 8001dba:	f001 fca1 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(data_control_GPIO_Port, data_control_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	4814      	ldr	r0, [pc, #80]	; (8001e14 <MX_GPIO_Init+0x104>)
 8001dc4:	f001 fc9c 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001dc8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <MX_GPIO_Init+0x100>)
 8001de2:	f001 fae1 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : data_control_Pin */
  GPIO_InitStruct.Pin = data_control_Pin;
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(data_control_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_GPIO_Init+0x104>)
 8001dfe:	f001 fad3 	bl	80033a8 <HAL_GPIO_Init>

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020c00 	.word	0x40020c00

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <Error_Handler+0x8>
	...

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_ADC_MspInit+0xd8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d156      	bne.n	8001f44 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_ADC_MspInit+0xdc>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <HAL_ADC_MspInit+0xdc>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_ADC_MspInit+0xdc>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_ADC_MspInit+0xdc>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_ADC_MspInit+0xdc>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_ADC_MspInit+0xdc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = hadc1_Pin;
 8001ece:	2340      	movs	r3, #64	; 0x40
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(hadc1_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	481c      	ldr	r0, [pc, #112]	; (8001f54 <HAL_ADC_MspInit+0xe0>)
 8001ee2:	f001 fa61 	bl	80033a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_ADC_MspInit+0xe8>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f2a:	f000 fe3b 	bl	8002ba4 <HAL_DMA_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001f34:	f7ff ff70 	bl	8001e18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f3e:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_ADC_MspInit+0xe4>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	20000310 	.word	0x20000310
 8001f5c:	40026410 	.word	0x40026410

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b090      	sub	sp, #64	; 0x40
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a59      	ldr	r2, [pc, #356]	; (80020e4 <HAL_UART_MspInit+0x184>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = uart4_tx_Pin|uart_rx_Pin;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4845      	ldr	r0, [pc, #276]	; (80020ec <HAL_UART_MspInit+0x18c>)
 8001fd6:	f001 f9e7 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fda:	e129      	b.n	8002230 <HAL_UART_MspInit+0x2d0>
  else if(huart->Instance==UART5)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_UART_MspInit+0x190>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d14b      	bne.n	800207e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a3e      	ldr	r2, [pc, #248]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <HAL_UART_MspInit+0x188>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002044:	2301      	movs	r3, #1
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800204c:	2308      	movs	r3, #8
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	4827      	ldr	r0, [pc, #156]	; (80020f4 <HAL_UART_MspInit+0x194>)
 8002058:	f001 f9a6 	bl	80033a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800205c:	2304      	movs	r3, #4
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002064:	2301      	movs	r3, #1
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800206c:	2308      	movs	r3, #8
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	4820      	ldr	r0, [pc, #128]	; (80020f8 <HAL_UART_MspInit+0x198>)
 8002078:	f001 f996 	bl	80033a8 <HAL_GPIO_Init>
}
 800207c:	e0d8      	b.n	8002230 <HAL_UART_MspInit+0x2d0>
  else if(huart->Instance==USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_UART_MspInit+0x19c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d13b      	bne.n	8002100 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_UART_MspInit+0x188>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <HAL_UART_MspInit+0x188>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6453      	str	r3, [r2, #68]	; 0x44
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_UART_MspInit+0x188>)
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_UART_MspInit+0x188>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_UART_MspInit+0x188>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_UART_MspInit+0x188>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020d2:	2307      	movs	r3, #7
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020da:	4619      	mov	r1, r3
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <HAL_UART_MspInit+0x18c>)
 80020de:	f001 f963 	bl	80033a8 <HAL_GPIO_Init>
}
 80020e2:	e0a5      	b.n	8002230 <HAL_UART_MspInit+0x2d0>
 80020e4:	40004c00 	.word	0x40004c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40005000 	.word	0x40005000
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40011000 	.word	0x40011000
  else if(huart->Instance==USART2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <HAL_UART_MspInit+0x2d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8092 	bne.w	8002230 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_UART_MspInit+0x2dc>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	4a49      	ldr	r2, [pc, #292]	; (800223c <HAL_UART_MspInit+0x2dc>)
 8002116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211a:	6413      	str	r3, [r2, #64]	; 0x40
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_UART_MspInit+0x2dc>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	4b43      	ldr	r3, [pc, #268]	; (800223c <HAL_UART_MspInit+0x2dc>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4a42      	ldr	r2, [pc, #264]	; (800223c <HAL_UART_MspInit+0x2dc>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	6313      	str	r3, [r2, #48]	; 0x30
 8002138:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_UART_MspInit+0x2dc>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002144:	2378      	movs	r3, #120	; 0x78
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002154:	2307      	movs	r3, #7
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215c:	4619      	mov	r1, r3
 800215e:	4838      	ldr	r0, [pc, #224]	; (8002240 <HAL_UART_MspInit+0x2e0>)
 8002160:	f001 f922 	bl	80033a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 8002166:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_UART_MspInit+0x2e8>)
 8002168:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800216a:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 800216c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002170:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002172:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002178:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 8002180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002184:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 8002194:	2200      	movs	r2, #0
 8002196:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 800219a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800219e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021a6:	4827      	ldr	r0, [pc, #156]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 80021a8:	f000 fcfc 	bl	8002ba4 <HAL_DMA_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_MspInit+0x256>
      Error_Handler();
 80021b2:	f7ff fe31 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <HAL_UART_MspInit+0x2e4>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_UART_MspInit+0x2f0>)
 80021c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x2ec>)
 80021f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_UART_MspInit+0x2ec>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002204:	4811      	ldr	r0, [pc, #68]	; (800224c <HAL_UART_MspInit+0x2ec>)
 8002206:	f000 fccd 	bl	8002ba4 <HAL_DMA_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002210:	f7ff fe02 	bl	8001e18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_UART_MspInit+0x2ec>)
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_UART_MspInit+0x2ec>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	2026      	movs	r0, #38	; 0x26
 8002226:	f000 fc86 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800222a:	2026      	movs	r0, #38	; 0x26
 800222c:	f000 fc9f 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8002230:	bf00      	nop
 8002232:	3740      	adds	r7, #64	; 0x40
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40004400 	.word	0x40004400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	20000148 	.word	0x20000148
 8002248:	40026088 	.word	0x40026088
 800224c:	2000025c 	.word	0x2000025c
 8002250:	400260a0 	.word	0x400260a0

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f8b8 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA1_Stream5_IRQHandler+0x10>)
 80022ae:	f000 fe11 	bl	8002ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000148 	.word	0x20000148

080022bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <DMA1_Stream6_IRQHandler+0x10>)
 80022c2:	f000 fe07 	bl	8002ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000025c 	.word	0x2000025c

080022d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <USART2_IRQHandler+0x10>)
 80022d6:	f001 ffe3 	bl	80042a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003c4 	.word	0x200003c4

080022e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA2_Stream0_IRQHandler+0x10>)
 80022ea:	f000 fdf3 	bl	8002ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000310 	.word	0x20000310

080022f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SystemInit+0x20>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <SystemInit+0x20>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <Reset_Handler>:
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002354 <LoopFillZerobss+0x12>
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopFillZerobss+0x16>)
 8002322:	490e      	ldr	r1, [pc, #56]	; (800235c <LoopFillZerobss+0x1a>)
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <LoopFillZerobss+0x1e>)
 8002326:	2300      	movs	r3, #0
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:
 800232a:	58d4      	ldr	r4, [r2, r3]
 800232c:	50c4      	str	r4, [r0, r3]
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:
 8002330:	18c4      	adds	r4, r0, r3
 8002332:	428c      	cmp	r4, r1
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <LoopFillZerobss+0x22>)
 8002338:	4c0b      	ldr	r4, [pc, #44]	; (8002368 <LoopFillZerobss+0x26>)
 800233a:	2300      	movs	r3, #0
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:
 8002342:	42a2      	cmp	r2, r4
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>
 8002346:	f7ff ffd7 	bl	80022f8 <SystemInit>
 800234a:	f002 ff0f 	bl	800516c <__libc_init_array>
 800234e:	f7ff f893 	bl	8001478 <main>
 8002352:	4770      	bx	lr
 8002354:	20030000 	.word	0x20030000
 8002358:	20000000 	.word	0x20000000
 800235c:	2000010c 	.word	0x2000010c
 8002360:	08007940 	.word	0x08007940
 8002364:	20000110 	.word	0x20000110
 8002368:	2000041c 	.word	0x2000041c

0800236c <ADC_IRQHandler>:
 800236c:	e7fe      	b.n	800236c <ADC_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <HAL_Init+0x40>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_Init+0x40>)
 8002386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_Init+0x40>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 fbc1 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f808 	bl	80023b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7ff fd3e 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_InitTick+0x54>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_InitTick+0x58>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fbd9 	bl	8002b8a <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f000 fba1 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <HAL_InitTick+0x5c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000098 	.word	0x20000098
 800240c:	200000a0 	.word	0x200000a0
 8002410:	2000009c 	.word	0x2000009c

08002414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200000a0 	.word	0x200000a0
 8002438:	20000418 	.word	0x20000418

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000418 	.word	0x20000418

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200000a0 	.word	0x200000a0

0800249c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e033      	b.n	800251a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fcda 	bl	8001e74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e2:	f023 0302 	bic.w	r3, r3, #2
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f94a 	bl	8002788 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
 800250a:	e001      	b.n	8002510 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1c>
 800253c:	2302      	movs	r3, #2
 800253e:	e113      	b.n	8002768 <HAL_ADC_ConfigChannel+0x244>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b09      	cmp	r3, #9
 800254e:	d925      	bls.n	800259c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68d9      	ldr	r1, [r3, #12]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	3b1e      	subs	r3, #30
 8002566:	2207      	movs	r2, #7
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43da      	mvns	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	400a      	ands	r2, r1
 8002574:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68d9      	ldr	r1, [r3, #12]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4618      	mov	r0, r3
 8002588:	4603      	mov	r3, r0
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4403      	add	r3, r0
 800258e:	3b1e      	subs	r3, #30
 8002590:	409a      	lsls	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	e022      	b.n	80025e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6919      	ldr	r1, [r3, #16]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	2207      	movs	r2, #7
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	400a      	ands	r2, r1
 80025be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6919      	ldr	r1, [r3, #16]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4403      	add	r3, r0
 80025d8:	409a      	lsls	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b06      	cmp	r3, #6
 80025e8:	d824      	bhi.n	8002634 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b05      	subs	r3, #5
 80025fc:	221f      	movs	r2, #31
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	400a      	ands	r2, r1
 800260a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	3b05      	subs	r3, #5
 8002626:	fa00 f203 	lsl.w	r2, r0, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
 8002632:	e04c      	b.n	80026ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d824      	bhi.n	8002686 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3b23      	subs	r3, #35	; 0x23
 800264e:	221f      	movs	r2, #31
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43da      	mvns	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	400a      	ands	r2, r1
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b23      	subs	r3, #35	; 0x23
 8002678:	fa00 f203 	lsl.w	r2, r0, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
 8002684:	e023      	b.n	80026ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b41      	subs	r3, #65	; 0x41
 8002698:	221f      	movs	r2, #31
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	400a      	ands	r2, r1
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	3b41      	subs	r3, #65	; 0x41
 80026c2:	fa00 f203 	lsl.w	r2, r0, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_ADC_ConfigChannel+0x250>)
 80026d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a28      	ldr	r2, [pc, #160]	; (8002778 <HAL_ADC_ConfigChannel+0x254>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10f      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1d8>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d10b      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_ADC_ConfigChannel+0x254>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d12b      	bne.n	800275e <HAL_ADC_ConfigChannel+0x23a>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_ADC_ConfigChannel+0x258>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <HAL_ADC_ConfigChannel+0x1f4>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b11      	cmp	r3, #17
 8002716:	d122      	bne.n	800275e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_ADC_ConfigChannel+0x258>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d111      	bne.n	800275e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_ADC_ConfigChannel+0x25c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_ADC_ConfigChannel+0x260>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0c9a      	lsrs	r2, r3, #18
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002750:	e002      	b.n	8002758 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3b01      	subs	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f9      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40012300 	.word	0x40012300
 8002778:	40012000 	.word	0x40012000
 800277c:	10000012 	.word	0x10000012
 8002780:	20000098 	.word	0x20000098
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002790:	4b79      	ldr	r3, [pc, #484]	; (8002978 <ADC_Init+0x1f0>)
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	021a      	lsls	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	4a58      	ldr	r2, [pc, #352]	; (800297c <ADC_Init+0x1f4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800282e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e00f      	b.n	8002886 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002884:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0202 	bic.w	r2, r2, #2
 8002894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	035a      	lsls	r2, r3, #13
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e007      	b.n	80028fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	3b01      	subs	r3, #1
 8002918:	051a      	lsls	r2, r3, #20
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800293e:	025a      	lsls	r2, r3, #9
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	029a      	lsls	r2, r3, #10
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012300 	.word	0x40012300
 800297c:	0f000001 	.word	0x0f000001

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff fc44 	bl	800243c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e099      	b.n	8002cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be0:	e00f      	b.n	8002c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be2:	f7ff fc2b 	bl	800243c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d908      	bls.n	8002c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e078      	b.n	8002cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e8      	bne.n	8002be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_DMA_Init+0x158>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d107      	bne.n	8002c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4313      	orrs	r3, r2
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f023 0307 	bic.w	r3, r3, #7
 8002c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d117      	bne.n	8002cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fb01 	bl	80032b0 <DMA_CheckFifoParam>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e016      	b.n	8002cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fab8 	bl	8003244 <DMA_CalcBaseAndBitshift>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	223f      	movs	r2, #63	; 0x3f
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	f010803f 	.word	0xf010803f

08002d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Start_IT+0x26>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e040      	b.n	8002da8 <HAL_DMA_Start_IT+0xa8>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d12f      	bne.n	8002d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fa4a 	bl	80031e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	223f      	movs	r2, #63	; 0x3f
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0216 	orr.w	r2, r2, #22
 8002d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0208 	orr.w	r2, r2, #8
 8002d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e005      	b.n	8002da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dbe:	f7ff fb3d 	bl	800243c <HAL_GetTick>
 8002dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d008      	beq.n	8002de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e052      	b.n	8002e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0216 	bic.w	r2, r2, #22
 8002df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_DMA_Abort+0x62>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0208 	bic.w	r2, r2, #8
 8002e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e32:	e013      	b.n	8002e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e34:	f7ff fb02 	bl	800243c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d90c      	bls.n	8002e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e015      	b.n	8002e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e4      	bne.n	8002e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	223f      	movs	r2, #63	; 0x3f
 8002e70:	409a      	lsls	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00c      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ee0:	4b92      	ldr	r3, [pc, #584]	; (800312c <HAL_DMA_IRQHandler+0x258>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a92      	ldr	r2, [pc, #584]	; (8003130 <HAL_DMA_IRQHandler+0x25c>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2208      	movs	r2, #8
 8002f00:	409a      	lsls	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01a      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	2201      	movs	r2, #1
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2201      	movs	r2, #1
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d012      	beq.n	8002fac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2204      	movs	r2, #4
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d043      	beq.n	8003044 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03c      	beq.n	8003044 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	2210      	movs	r2, #16
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d018      	beq.n	8003016 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d024      	beq.n	8003044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
 8003002:	e01f      	b.n	8003044 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
 8003014:	e016      	b.n	8003044 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0208 	bic.w	r2, r2, #8
 8003032:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	2220      	movs	r2, #32
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 808e 	beq.w	8003172 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8086 	beq.w	8003172 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	2220      	movs	r2, #32
 800306c:	409a      	lsls	r2, r3
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b05      	cmp	r3, #5
 800307c:	d136      	bne.n	80030ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0216 	bic.w	r2, r2, #22
 800308c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <HAL_DMA_IRQHandler+0x1da>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0208 	bic.w	r2, r2, #8
 80030bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	223f      	movs	r2, #63	; 0x3f
 80030c4:	409a      	lsls	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d07d      	beq.n	80031de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
        }
        return;
 80030ea:	e078      	b.n	80031de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01c      	beq.n	8003134 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d108      	bne.n	800311a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	2b00      	cmp	r3, #0
 800310e:	d030      	beq.n	8003172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
 8003118:	e02b      	b.n	8003172 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d027      	beq.n	8003172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e022      	b.n	8003172 <HAL_DMA_IRQHandler+0x29e>
 800312c:	20000098 	.word	0x20000098
 8003130:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10f      	bne.n	8003162 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0210 	bic.w	r2, r2, #16
 8003150:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	2b00      	cmp	r3, #0
 8003178:	d032      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d022      	beq.n	80031cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2205      	movs	r2, #5
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d307      	bcc.n	80031ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f2      	bne.n	800319e <HAL_DMA_IRQHandler+0x2ca>
 80031b8:	e000      	b.n	80031bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031de:	bf00      	nop
    }
  }
}
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d108      	bne.n	8003228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003226:	e007      	b.n	8003238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3b10      	subs	r3, #16
 8003254:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <DMA_CalcBaseAndBitshift+0x68>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d909      	bls.n	8003286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	659a      	str	r2, [r3, #88]	; 0x58
 8003284:	e007      	b.n	8003296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	aaaaaaab 	.word	0xaaaaaaab
 80032ac:	08007698 	.word	0x08007698

080032b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d11f      	bne.n	800330a <DMA_CheckFifoParam+0x5a>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d856      	bhi.n	800337e <DMA_CheckFifoParam+0xce>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <DMA_CheckFifoParam+0x28>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	080032e9 	.word	0x080032e9
 80032dc:	080032fb 	.word	0x080032fb
 80032e0:	080032e9 	.word	0x080032e9
 80032e4:	0800337f 	.word	0x0800337f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d046      	beq.n	8003382 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f8:	e043      	b.n	8003382 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003302:	d140      	bne.n	8003386 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e03d      	b.n	8003386 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003312:	d121      	bne.n	8003358 <DMA_CheckFifoParam+0xa8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d837      	bhi.n	800338a <DMA_CheckFifoParam+0xda>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <DMA_CheckFifoParam+0x70>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003331 	.word	0x08003331
 8003324:	08003337 	.word	0x08003337
 8003328:	08003331 	.word	0x08003331
 800332c:	08003349 	.word	0x08003349
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      break;
 8003334:	e030      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d025      	beq.n	800338e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003346:	e022      	b.n	800338e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003350:	d11f      	bne.n	8003392 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003356:	e01c      	b.n	8003392 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d903      	bls.n	8003366 <DMA_CheckFifoParam+0xb6>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d003      	beq.n	800336c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003364:	e018      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
      break;
 800336a:	e015      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      break;
 800337c:	e00b      	b.n	8003396 <DMA_CheckFifoParam+0xe6>
      break;
 800337e:	bf00      	nop
 8003380:	e00a      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e008      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      break;
 8003386:	bf00      	nop
 8003388:	e006      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e004      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      break;
 800338e:	bf00      	nop
 8003390:	e002      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      break;   
 8003392:	bf00      	nop
 8003394:	e000      	b.n	8003398 <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
    }
  } 
  
  return status; 
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e177      	b.n	80036b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	429a      	cmp	r2, r3
 80033de:	f040 8166 	bne.w	80036ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d005      	beq.n	80033fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d130      	bne.n	800345c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 0201 	and.w	r2, r3, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d017      	beq.n	8003498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d123      	bne.n	80034ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	08da      	lsrs	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3208      	adds	r2, #8
 80034ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0203 	and.w	r2, r3, #3
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80c0 	beq.w	80036ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b66      	ldr	r3, [pc, #408]	; (80036cc <HAL_GPIO_Init+0x324>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4a65      	ldr	r2, [pc, #404]	; (80036cc <HAL_GPIO_Init+0x324>)
 8003538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b63      	ldr	r3, [pc, #396]	; (80036cc <HAL_GPIO_Init+0x324>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354a:	4a61      	ldr	r2, [pc, #388]	; (80036d0 <HAL_GPIO_Init+0x328>)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_GPIO_Init+0x32c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d037      	beq.n	80035e6 <HAL_GPIO_Init+0x23e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_GPIO_Init+0x330>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d031      	beq.n	80035e2 <HAL_GPIO_Init+0x23a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a56      	ldr	r2, [pc, #344]	; (80036dc <HAL_GPIO_Init+0x334>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02b      	beq.n	80035de <HAL_GPIO_Init+0x236>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a55      	ldr	r2, [pc, #340]	; (80036e0 <HAL_GPIO_Init+0x338>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d025      	beq.n	80035da <HAL_GPIO_Init+0x232>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a54      	ldr	r2, [pc, #336]	; (80036e4 <HAL_GPIO_Init+0x33c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <HAL_GPIO_Init+0x22e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a53      	ldr	r2, [pc, #332]	; (80036e8 <HAL_GPIO_Init+0x340>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0x22a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_GPIO_Init+0x344>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0x226>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a51      	ldr	r2, [pc, #324]	; (80036f0 <HAL_GPIO_Init+0x348>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_GPIO_Init+0x222>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a50      	ldr	r2, [pc, #320]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x21e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <HAL_GPIO_Init+0x350>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_GPIO_Init+0x21a>
 80035be:	2309      	movs	r3, #9
 80035c0:	e012      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035c2:	230a      	movs	r3, #10
 80035c4:	e010      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035c6:	2308      	movs	r3, #8
 80035c8:	e00e      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035ca:	2307      	movs	r3, #7
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035ce:	2306      	movs	r3, #6
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x240>
 80035e6:	2300      	movs	r3, #0
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f8:	4935      	ldr	r1, [pc, #212]	; (80036d0 <HAL_GPIO_Init+0x328>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_GPIO_Init+0x354>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800362a:	4a34      	ldr	r2, [pc, #208]	; (80036fc <HAL_GPIO_Init+0x354>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_GPIO_Init+0x354>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003654:	4a29      	ldr	r2, [pc, #164]	; (80036fc <HAL_GPIO_Init+0x354>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365a:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_GPIO_Init+0x354>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_GPIO_Init+0x354>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_GPIO_Init+0x354>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_GPIO_Init+0x354>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f ae84 	bls.w	80033c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3724      	adds	r7, #36	; 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40020000 	.word	0x40020000
 80036d8:	40020400 	.word	0x40020400
 80036dc:	40020800 	.word	0x40020800
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40021400 	.word	0x40021400
 80036ec:	40021800 	.word	0x40021800
 80036f0:	40021c00 	.word	0x40021c00
 80036f4:	40022000 	.word	0x40022000
 80036f8:	40022400 	.word	0x40022400
 80036fc:	40013c00 	.word	0x40013c00

08003700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
 800370c:	4613      	mov	r3, r2
 800370e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800371c:	e003      	b.n	8003726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	041a      	lsls	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	619a      	str	r2, [r3, #24]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e264      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d075      	beq.n	800383e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	4ba3      	ldr	r3, [pc, #652]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b04      	cmp	r3, #4
 800375c:	d00c      	beq.n	8003778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4ba0      	ldr	r3, [pc, #640]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003766:	2b08      	cmp	r3, #8
 8003768:	d112      	bne.n	8003790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4b9d      	ldr	r3, [pc, #628]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003776:	d10b      	bne.n	8003790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	4b99      	ldr	r3, [pc, #612]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05b      	beq.n	800383c <HAL_RCC_OscConfig+0x108>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d157      	bne.n	800383c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e23f      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x74>
 800379a:	4b91      	ldr	r3, [pc, #580]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a90      	ldr	r2, [pc, #576]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xb0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x98>
 80037b2:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a8a      	ldr	r2, [pc, #552]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a87      	ldr	r2, [pc, #540]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xb0>
 80037cc:	4b84      	ldr	r3, [pc, #528]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a83      	ldr	r2, [pc, #524]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a80      	ldr	r2, [pc, #512]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fe26 	bl	800243c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fe22 	bl	800243c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e204      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b76      	ldr	r3, [pc, #472]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xc0>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fe12 	bl	800243c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fe0e 	bl	800243c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1f0      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0xe8>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b62      	ldr	r3, [pc, #392]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385e:	2b08      	cmp	r3, #8
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x152>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1c4      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b56      	ldr	r3, [pc, #344]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4952      	ldr	r1, [pc, #328]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e03a      	b.n	8003912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <HAL_RCC_OscConfig+0x2b0>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe fdc7 	bl	800243c <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe fdc3 	bl	800243c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e1a5      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4940      	ldr	r1, [pc, #256]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_OscConfig+0x2b0>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fda6 	bl	800243c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fda2 	bl	800243c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e184      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d030      	beq.n	8003980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCC_OscConfig+0x2b4>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fe fd86 	bl	800243c <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003934:	f7fe fd82 	bl	800243c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e164      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x200>
 8003952:	e015      	b.n	8003980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_OscConfig+0x2b4>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395a:	f7fe fd6f 	bl	800243c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003962:	f7fe fd6b 	bl	800243c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e14d      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80a0 	beq.w	8003ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x2b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d121      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_RCC_OscConfig+0x2b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a07      	ldr	r2, [pc, #28]	; (80039ec <HAL_RCC_OscConfig+0x2b8>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fd31 	bl	800243c <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e011      	b.n	8003a02 <HAL_RCC_OscConfig+0x2ce>
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	42470000 	.word	0x42470000
 80039e8:	42470e80 	.word	0x42470e80
 80039ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f0:	f7fe fd24 	bl	800243c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e106      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCC_OscConfig+0x4e4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
 8003a16:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a80      	ldr	r2, [pc, #512]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70
 8003a22:	e01c      	b.n	8003a5e <HAL_RCC_OscConfig+0x32a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x312>
 8003a2c:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a7a      	ldr	r2, [pc, #488]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a77      	ldr	r2, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x32a>
 8003a46:	4b75      	ldr	r3, [pc, #468]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a74      	ldr	r2, [pc, #464]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a71      	ldr	r2, [pc, #452]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fe fce9 	bl	800243c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fe fce5 	bl	800243c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e0c5      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b65      	ldr	r3, [pc, #404]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCC_OscConfig+0x33a>
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a92:	f7fe fcd3 	bl	800243c <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fe fccf 	bl	800243c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0af      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	4b5a      	ldr	r3, [pc, #360]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ee      	bne.n	8003a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac2:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a55      	ldr	r2, [pc, #340]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 809b 	beq.w	8003c0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d05c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d141      	bne.n	8003b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCC_OscConfig+0x4ec>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe fca3 	bl	800243c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fc9f 	bl	800243c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e081      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	019b      	lsls	r3, r3, #6
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	4937      	ldr	r1, [pc, #220]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b42:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_RCC_OscConfig+0x4ec>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fc78 	bl	800243c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fc74 	bl	800243c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e056      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x41c>
 8003b6e:	e04e      	b.n	8003c0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <HAL_RCC_OscConfig+0x4ec>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fc61 	bl	800243c <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe fc5d 	bl	800243c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e03f      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x44a>
 8003b9c:	e037      	b.n	8003c0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e032      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003baa:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <HAL_RCC_OscConfig+0x4e8>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d028      	beq.n	8003c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d121      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d11a      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bda:	4013      	ands	r3, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003be0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d111      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	42470060 	.word	0x42470060

08003c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0cc      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c38:	4b68      	ldr	r3, [pc, #416]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d90c      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b8      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c90:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a52      	ldr	r2, [pc, #328]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	494d      	ldr	r1, [pc, #308]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d044      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d119      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e07f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d107      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce2:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e06f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf2:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e067      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d02:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4934      	ldr	r1, [pc, #208]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fe fb92 	bl	800243c <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1c:	f7fe fb8e 	bl	800243c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e04f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 020c 	and.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d1eb      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d20c      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e032      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4916      	ldr	r1, [pc, #88]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	490e      	ldr	r1, [pc, #56]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003daa:	f000 f821 	bl	8003df0 <HAL_RCC_GetSysClockFreq>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	490a      	ldr	r1, [pc, #40]	; (8003de4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dbc:	5ccb      	ldrb	r3, [r1, r3]
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe faf2 	bl	80023b4 <HAL_InitTick>

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023c00 	.word	0x40023c00
 8003de0:	40023800 	.word	0x40023800
 8003de4:	08007680 	.word	0x08007680
 8003de8:	20000098 	.word	0x20000098
 8003dec:	2000009c 	.word	0x2000009c

08003df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003df6:	2100      	movs	r1, #0
 8003df8:	6079      	str	r1, [r7, #4]
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	60f9      	str	r1, [r7, #12]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e02:	2100      	movs	r1, #0
 8003e04:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e06:	4952      	ldr	r1, [pc, #328]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e08:	6889      	ldr	r1, [r1, #8]
 8003e0a:	f001 010c 	and.w	r1, r1, #12
 8003e0e:	2908      	cmp	r1, #8
 8003e10:	d00d      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x3e>
 8003e12:	2908      	cmp	r1, #8
 8003e14:	f200 8094 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x150>
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x32>
 8003e1c:	2904      	cmp	r1, #4
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x38>
 8003e20:	e08e      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e22:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e24:	60bb      	str	r3, [r7, #8]
       break;
 8003e26:	e08e      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e28:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e2a:	60bb      	str	r3, [r7, #8]
      break;
 8003e2c:	e08b      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e2e:	4948      	ldr	r1, [pc, #288]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e30:	6849      	ldr	r1, [r1, #4]
 8003e32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e36:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e38:	4945      	ldr	r1, [pc, #276]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e3a:	6849      	ldr	r1, [r1, #4]
 8003e3c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e40:	2900      	cmp	r1, #0
 8003e42:	d024      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e44:	4942      	ldr	r1, [pc, #264]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e46:	6849      	ldr	r1, [r1, #4]
 8003e48:	0989      	lsrs	r1, r1, #6
 8003e4a:	4608      	mov	r0, r1
 8003e4c:	f04f 0100 	mov.w	r1, #0
 8003e50:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e54:	f04f 0500 	mov.w	r5, #0
 8003e58:	ea00 0204 	and.w	r2, r0, r4
 8003e5c:	ea01 0305 	and.w	r3, r1, r5
 8003e60:	493d      	ldr	r1, [pc, #244]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e62:	fb01 f003 	mul.w	r0, r1, r3
 8003e66:	2100      	movs	r1, #0
 8003e68:	fb01 f102 	mul.w	r1, r1, r2
 8003e6c:	1844      	adds	r4, r0, r1
 8003e6e:	493a      	ldr	r1, [pc, #232]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e70:	fba2 0101 	umull	r0, r1, r2, r1
 8003e74:	1863      	adds	r3, r4, r1
 8003e76:	4619      	mov	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	f7fc fe4a 	bl	8000b18 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e04a      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	461a      	mov	r2, r3
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	ea02 0400 	and.w	r4, r2, r0
 8003ea6:	ea03 0501 	and.w	r5, r3, r1
 8003eaa:	4620      	mov	r0, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	014b      	lsls	r3, r1, #5
 8003eb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ebc:	0142      	lsls	r2, r0, #5
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	1b00      	subs	r0, r0, r4
 8003ec4:	eb61 0105 	sbc.w	r1, r1, r5
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	018b      	lsls	r3, r1, #6
 8003ed2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ed6:	0182      	lsls	r2, r0, #6
 8003ed8:	1a12      	subs	r2, r2, r0
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	00d9      	lsls	r1, r3, #3
 8003ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eec:	00d0      	lsls	r0, r2, #3
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	1912      	adds	r2, r2, r4
 8003ef4:	eb45 0303 	adc.w	r3, r5, r3
 8003ef8:	f04f 0000 	mov.w	r0, #0
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	0299      	lsls	r1, r3, #10
 8003f02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f06:	0290      	lsls	r0, r2, #10
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f7fc fdfe 	bl	8000b18 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	60bb      	str	r3, [r7, #8]
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f42:	60bb      	str	r3, [r7, #8]
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	68bb      	ldr	r3, [r7, #8]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	017d7840 	.word	0x017d7840

08003f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000098 	.word	0x20000098

08003f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f78:	f7ff fff0 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	0a9b      	lsrs	r3, r3, #10
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	4903      	ldr	r1, [pc, #12]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8a:	5ccb      	ldrb	r3, [r1, r3]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40023800 	.word	0x40023800
 8003f98:	08007690 	.word	0x08007690

08003f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa0:	f7ff ffdc 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0b5b      	lsrs	r3, r3, #13
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08007690 	.word	0x08007690

08003fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e03f      	b.n	8004056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd ffb8 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fee1 	bl	8004dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800401c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	; 0x28
 8004062:	af02      	add	r7, sp, #8
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	f040 808c 	bne.w	8004198 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_UART_Receive+0x2e>
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e084      	b.n	800419a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_UART_Receive+0x40>
 800409a:	2302      	movs	r3, #2
 800409c:	e07d      	b.n	800419a <HAL_UART_Receive+0x13c>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2222      	movs	r2, #34	; 0x22
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ba:	f7fe f9bf 	bl	800243c <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d108      	bne.n	80040e8 <HAL_UART_Receive+0x8a>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e003      	b.n	80040f0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040f8:	e043      	b.n	8004182 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2120      	movs	r1, #32
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fc32 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e042      	b.n	800419a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10c      	bne.n	8004134 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	b29a      	uxth	r2, r3
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	3302      	adds	r3, #2
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	e01f      	b.n	8004174 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413c:	d007      	beq.n	800414e <HAL_UART_Receive+0xf0>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_UART_Receive+0xfe>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e008      	b.n	800416e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004168:	b2da      	uxtb	r2, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1b6      	bne.n	80040fa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d165      	bne.n	800428a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_UART_Transmit_DMA+0x26>
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e05e      	b.n	800428c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_UART_Transmit_DMA+0x38>
 80041d8:	2302      	movs	r3, #2
 80041da:	e057      	b.n	800428c <HAL_UART_Transmit_DMA+0xe8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2221      	movs	r2, #33	; 0x21
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <HAL_UART_Transmit_DMA+0xf0>)
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_UART_Transmit_DMA+0xf4>)
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_UART_Transmit_DMA+0xf8>)
 800421a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	2200      	movs	r2, #0
 8004222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004224:	f107 0308 	add.w	r3, r7, #8
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3304      	adds	r3, #4
 8004238:	461a      	mov	r2, r3
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	f7fe fd60 	bl	8002d00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3314      	adds	r3, #20
 8004258:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004272:	627a      	str	r2, [r7, #36]	; 0x24
 8004274:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6a39      	ldr	r1, [r7, #32]
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e5      	bne.n	8004252 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	e000      	b.n	800428c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800428a:	2302      	movs	r3, #2
  }
}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	08004825 	.word	0x08004825
 8004298:	080048bf 	.word	0x080048bf
 800429c:	080048db 	.word	0x080048db

080042a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b0ba      	sub	sp, #232	; 0xe8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_UART_IRQHandler+0x66>
 80042f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fcaa 	bl	8004c58 <UART_Receive_IT>
      return;
 8004304:	e256      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80de 	beq.w	80044cc <HAL_UART_IRQHandler+0x22c>
 8004310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004320:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80d1 	beq.w	80044cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xae>
 8004336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f043 0201 	orr.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_UART_IRQHandler+0xd2>
 800435a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f043 0202 	orr.w	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_UART_IRQHandler+0xf6>
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0204 	orr.w	r2, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_UART_IRQHandler+0x126>
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f043 0208 	orr.w	r2, r3, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 81ed 	beq.w	80047aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_UART_IRQHandler+0x14e>
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fc35 	bl	8004c58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <HAL_UART_IRQHandler+0x17a>
 8004412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04f      	beq.n	80044ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb3d 	bl	8004a9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d141      	bne.n	80044b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800444c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3314      	adds	r3, #20
 8004456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800445a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800445e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1d9      	bne.n	800442e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	2b00      	cmp	r3, #0
 8004480:	d013      	beq.n	80044aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	4a7d      	ldr	r2, [pc, #500]	; (800467c <HAL_UART_IRQHandler+0x3dc>)
 8004488:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fcfe 	bl	8002e90 <HAL_DMA_Abort_IT>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a4:	4610      	mov	r0, r2
 80044a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	e00e      	b.n	80044c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9a4 	bl	80047f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	e00a      	b.n	80044c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9a0 	bl	80047f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	e006      	b.n	80044c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f99c 	bl	80047f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044c6:	e170      	b.n	80047aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	bf00      	nop
    return;
 80044ca:	e16e      	b.n	80047aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	f040 814a 	bne.w	800476a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8143 	beq.w	800476a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 813c 	beq.w	800476a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	f040 80b4 	bne.w	8004680 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8140 	beq.w	80047ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004536:	429a      	cmp	r2, r3
 8004538:	f080 8139 	bcs.w	80047ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004542:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454e:	f000 8088 	beq.w	8004662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800457e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800458a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1d9      	bne.n	8004552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e1      	bne.n	800459e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800460c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e3      	bne.n	80045da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004644:	65ba      	str	r2, [r7, #88]	; 0x58
 8004646:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800464a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e3      	bne.n	8004620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fba7 	bl	8002db0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466a:	b29b      	uxth	r3, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8ca 	bl	800480c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004678:	e099      	b.n	80047ae <HAL_UART_IRQHandler+0x50e>
 800467a:	bf00      	nop
 800467c:	08004b61 	.word	0x08004b61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 808b 	beq.w	80047b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800469c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ca:	647a      	str	r2, [r7, #68]	; 0x44
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e3      	bne.n	80046a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	623b      	str	r3, [r7, #32]
   return(result);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004702:	633a      	str	r2, [r7, #48]	; 0x30
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e3      	bne.n	80046de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60fb      	str	r3, [r7, #12]
   return(result);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004748:	61fa      	str	r2, [r7, #28]
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e3      	bne.n	8004724 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f852 	bl	800480c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004768:	e023      	b.n	80047b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_UART_IRQHandler+0x4ea>
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa00 	bl	8004b88 <UART_Transmit_IT>
    return;
 8004788:	e014      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00e      	beq.n	80047b4 <HAL_UART_IRQHandler+0x514>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa40 	bl	8004c28 <UART_EndTransmit_IT>
    return;
 80047a8:	e004      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
    return;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
      return;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_UART_IRQHandler+0x514>
      return;
 80047b2:	bf00      	nop
  }
}
 80047b4:	37e8      	adds	r7, #232	; 0xe8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop

080047bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b090      	sub	sp, #64	; 0x40
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d137      	bne.n	80048b0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	2200      	movs	r2, #0
 8004844:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	623b      	str	r3, [r7, #32]
   return(result);
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004866:	633a      	str	r2, [r7, #48]	; 0x30
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	60fb      	str	r3, [r7, #12]
   return(result);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489a:	61fa      	str	r2, [r7, #28]
 800489c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	617b      	str	r3, [r7, #20]
   return(result);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ae:	e002      	b.n	80048b6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80048b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80048b2:	f7ff ff83 	bl	80047bc <HAL_UART_TxCpltCallback>
}
 80048b6:	bf00      	nop
 80048b8:	3740      	adds	r7, #64	; 0x40
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7ff ff7f 	bl	80047d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b21      	cmp	r3, #33	; 0x21
 800490c:	d108      	bne.n	8004920 <UART_DMAError+0x46>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800491a:	68b8      	ldr	r0, [r7, #8]
 800491c:	f000 f895 	bl	8004a4a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b22      	cmp	r3, #34	; 0x22
 8004940:	d108      	bne.n	8004954 <UART_DMAError+0x7a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800494e:	68b8      	ldr	r0, [r7, #8]
 8004950:	f000 f8a3 	bl	8004a9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f043 0210 	orr.w	r2, r3, #16
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004960:	68b8      	ldr	r0, [r7, #8]
 8004962:	f7ff ff49 	bl	80047f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b090      	sub	sp, #64	; 0x40
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	e050      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d04c      	beq.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0x30>
 800498e:	f7fd fd55 	bl	800243c <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499a:	429a      	cmp	r2, r3
 800499c:	d241      	bcs.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049be:	637a      	str	r2, [r7, #52]	; 0x34
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e5      	bne.n	800499e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	613b      	str	r3, [r7, #16]
   return(result);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3314      	adds	r3, #20
 80049f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f2:	623a      	str	r2, [r7, #32]
 80049f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	69f9      	ldr	r1, [r7, #28]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e5      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e00f      	b.n	8004a42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d09f      	beq.n	8004980 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3740      	adds	r7, #64	; 0x40
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b089      	sub	sp, #36	; 0x24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	e853 3f00 	ldrex	r3, [r3]
 8004a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	61ba      	str	r2, [r7, #24]
 8004a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6979      	ldr	r1, [r7, #20]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e5      	bne.n	8004a52 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004a8e:	bf00      	nop
 8004a90:	3724      	adds	r7, #36	; 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b095      	sub	sp, #84	; 0x54
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac2:	643a      	str	r2, [r7, #64]	; 0x40
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d119      	bne.n	8004b46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0310 	bic.w	r3, r3, #16
 8004b28:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b32:	61ba      	str	r2, [r7, #24]
 8004b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6979      	ldr	r1, [r7, #20]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b54:	bf00      	nop
 8004b56:	3754      	adds	r7, #84	; 0x54
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fe3c 	bl	80047f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b21      	cmp	r3, #33	; 0x21
 8004b9a:	d13e      	bne.n	8004c1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba4:	d114      	bne.n	8004bd0 <UART_Transmit_IT+0x48>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d110      	bne.n	8004bd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]
 8004bce:	e008      	b.n	8004be2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6211      	str	r1, [r2, #32]
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10f      	bne.n	8004c16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fdb7 	bl	80047bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	; 0x30
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b22      	cmp	r3, #34	; 0x22
 8004c6a:	f040 80ab 	bne.w	8004dc4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d117      	bne.n	8004ca8 <UART_Receive_IT+0x50>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d113      	bne.n	8004ca8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca6:	e026      	b.n	8004cf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d007      	beq.n	8004ccc <UART_Receive_IT+0x74>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <UART_Receive_IT+0x82>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e008      	b.n	8004cec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d15a      	bne.n	8004dc0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d135      	bne.n	8004db6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d70:	623a      	str	r2, [r7, #32]
 8004d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d10a      	bne.n	8004da8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fd2c 	bl	800480c <HAL_UARTEx_RxEventCallback>
 8004db4:	e002      	b.n	8004dbc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fd14 	bl	80047e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e002      	b.n	8004dc6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e000      	b.n	8004dc6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3730      	adds	r7, #48	; 0x30
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	b09f      	sub	sp, #124	; 0x7c
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	68d9      	ldr	r1, [r3, #12]
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	ea40 0301 	orr.w	r3, r0, r1
 8004df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e14:	f021 010c 	bic.w	r1, r1, #12
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	6999      	ldr	r1, [r3, #24]
 8004e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	ea40 0301 	orr.w	r3, r0, r1
 8004e38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4bc5      	ldr	r3, [pc, #788]	; (8005154 <UART_SetConfig+0x384>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d004      	beq.n	8004e4e <UART_SetConfig+0x7e>
 8004e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4bc3      	ldr	r3, [pc, #780]	; (8005158 <UART_SetConfig+0x388>)
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d103      	bne.n	8004e56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e4e:	f7ff f8a5 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8004e52:	6778      	str	r0, [r7, #116]	; 0x74
 8004e54:	e002      	b.n	8004e5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7ff f88d 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	f040 80b6 	bne.w	8004fd4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e6a:	461c      	mov	r4, r3
 8004e6c:	f04f 0500 	mov.w	r5, #0
 8004e70:	4622      	mov	r2, r4
 8004e72:	462b      	mov	r3, r5
 8004e74:	1891      	adds	r1, r2, r2
 8004e76:	6439      	str	r1, [r7, #64]	; 0x40
 8004e78:	415b      	adcs	r3, r3
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e80:	1912      	adds	r2, r2, r4
 8004e82:	eb45 0303 	adc.w	r3, r5, r3
 8004e86:	f04f 0000 	mov.w	r0, #0
 8004e8a:	f04f 0100 	mov.w	r1, #0
 8004e8e:	00d9      	lsls	r1, r3, #3
 8004e90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e94:	00d0      	lsls	r0, r2, #3
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	1911      	adds	r1, r2, r4
 8004e9c:	6639      	str	r1, [r7, #96]	; 0x60
 8004e9e:	416b      	adcs	r3, r5
 8004ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ebc:	f7fb fe2c 	bl	8000b18 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4ba5      	ldr	r3, [pc, #660]	; (800515c <UART_SetConfig+0x38c>)
 8004ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	011e      	lsls	r6, r3, #4
 8004ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed0:	461c      	mov	r4, r3
 8004ed2:	f04f 0500 	mov.w	r5, #0
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	1891      	adds	r1, r2, r2
 8004edc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ede:	415b      	adcs	r3, r3
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ee6:	1912      	adds	r2, r2, r4
 8004ee8:	eb45 0303 	adc.w	r3, r5, r3
 8004eec:	f04f 0000 	mov.w	r0, #0
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	00d9      	lsls	r1, r3, #3
 8004ef6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004efa:	00d0      	lsls	r0, r2, #3
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	1911      	adds	r1, r2, r4
 8004f02:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f04:	416b      	adcs	r3, r5
 8004f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f16:	415b      	adcs	r3, r3
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f22:	f7fb fdf9 	bl	8000b18 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4b8c      	ldr	r3, [pc, #560]	; (800515c <UART_SetConfig+0x38c>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	; 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a87      	ldr	r2, [pc, #540]	; (800515c <UART_SetConfig+0x38c>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f4c:	441e      	add	r6, r3
 8004f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f50:	4618      	mov	r0, r3
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	1894      	adds	r4, r2, r2
 8004f5c:	623c      	str	r4, [r7, #32]
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f66:	1812      	adds	r2, r2, r0
 8004f68:	eb41 0303 	adc.w	r3, r1, r3
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	f04f 0500 	mov.w	r5, #0
 8004f74:	00dd      	lsls	r5, r3, #3
 8004f76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f7a:	00d4      	lsls	r4, r2, #3
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	462b      	mov	r3, r5
 8004f80:	1814      	adds	r4, r2, r0
 8004f82:	653c      	str	r4, [r7, #80]	; 0x50
 8004f84:	414b      	adcs	r3, r1
 8004f86:	657b      	str	r3, [r7, #84]	; 0x54
 8004f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	1891      	adds	r1, r2, r2
 8004f94:	61b9      	str	r1, [r7, #24]
 8004f96:	415b      	adcs	r3, r3
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004fa2:	f7fb fdb9 	bl	8000b18 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4b6c      	ldr	r3, [pc, #432]	; (800515c <UART_SetConfig+0x38c>)
 8004fac:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	2164      	movs	r1, #100	; 0x64
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	3332      	adds	r3, #50	; 0x32
 8004fbe:	4a67      	ldr	r2, [pc, #412]	; (800515c <UART_SetConfig+0x38c>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	f003 0207 	and.w	r2, r3, #7
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4432      	add	r2, r6
 8004fd0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fd2:	e0b9      	b.n	8005148 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd6:	461c      	mov	r4, r3
 8004fd8:	f04f 0500 	mov.w	r5, #0
 8004fdc:	4622      	mov	r2, r4
 8004fde:	462b      	mov	r3, r5
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	6139      	str	r1, [r7, #16]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fec:	1912      	adds	r2, r2, r4
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f04f 0100 	mov.w	r1, #0
 8004ffa:	00d9      	lsls	r1, r3, #3
 8004ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005000:	00d0      	lsls	r0, r2, #3
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	eb12 0804 	adds.w	r8, r2, r4
 800500a:	eb43 0905 	adc.w	r9, r3, r5
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	008b      	lsls	r3, r1, #2
 8005022:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005026:	0082      	lsls	r2, r0, #2
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb fd74 	bl	8000b18 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4b49      	ldr	r3, [pc, #292]	; (800515c <UART_SetConfig+0x38c>)
 8005036:	fba3 2302 	umull	r2, r3, r3, r2
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	011e      	lsls	r6, r3, #4
 800503e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005040:	4618      	mov	r0, r3
 8005042:	f04f 0100 	mov.w	r1, #0
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	1894      	adds	r4, r2, r2
 800504c:	60bc      	str	r4, [r7, #8]
 800504e:	415b      	adcs	r3, r3
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005056:	1812      	adds	r2, r2, r0
 8005058:	eb41 0303 	adc.w	r3, r1, r3
 800505c:	f04f 0400 	mov.w	r4, #0
 8005060:	f04f 0500 	mov.w	r5, #0
 8005064:	00dd      	lsls	r5, r3, #3
 8005066:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800506a:	00d4      	lsls	r4, r2, #3
 800506c:	4622      	mov	r2, r4
 800506e:	462b      	mov	r3, r5
 8005070:	1814      	adds	r4, r2, r0
 8005072:	64bc      	str	r4, [r7, #72]	; 0x48
 8005074:	414b      	adcs	r3, r1
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	f04f 0100 	mov.w	r1, #0
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	008b      	lsls	r3, r1, #2
 800508c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005090:	0082      	lsls	r2, r0, #2
 8005092:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005096:	f7fb fd3f 	bl	8000b18 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4b2f      	ldr	r3, [pc, #188]	; (800515c <UART_SetConfig+0x38c>)
 80050a0:	fba3 1302 	umull	r1, r3, r3, r2
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	2164      	movs	r1, #100	; 0x64
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	3332      	adds	r3, #50	; 0x32
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <UART_SetConfig+0x38c>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050be:	441e      	add	r6, r3
 80050c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c2:	4618      	mov	r0, r3
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	1894      	adds	r4, r2, r2
 80050ce:	603c      	str	r4, [r7, #0]
 80050d0:	415b      	adcs	r3, r3
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d8:	1812      	adds	r2, r2, r0
 80050da:	eb41 0303 	adc.w	r3, r1, r3
 80050de:	f04f 0400 	mov.w	r4, #0
 80050e2:	f04f 0500 	mov.w	r5, #0
 80050e6:	00dd      	lsls	r5, r3, #3
 80050e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050ec:	00d4      	lsls	r4, r2, #3
 80050ee:	4622      	mov	r2, r4
 80050f0:	462b      	mov	r3, r5
 80050f2:	eb12 0a00 	adds.w	sl, r2, r0
 80050f6:	eb43 0b01 	adc.w	fp, r3, r1
 80050fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	008b      	lsls	r3, r1, #2
 800510e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005112:	0082      	lsls	r2, r0, #2
 8005114:	4650      	mov	r0, sl
 8005116:	4659      	mov	r1, fp
 8005118:	f7fb fcfe 	bl	8000b18 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4b0e      	ldr	r3, [pc, #56]	; (800515c <UART_SetConfig+0x38c>)
 8005122:	fba3 1302 	umull	r1, r3, r3, r2
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2164      	movs	r1, #100	; 0x64
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	3332      	adds	r3, #50	; 0x32
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <UART_SetConfig+0x38c>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4432      	add	r2, r6
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	377c      	adds	r7, #124	; 0x7c
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	40011000 	.word	0x40011000
 8005158:	40011400 	.word	0x40011400
 800515c:	51eb851f 	.word	0x51eb851f

08005160 <__errno>:
 8005160:	4b01      	ldr	r3, [pc, #4]	; (8005168 <__errno+0x8>)
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	200000a4 	.word	0x200000a4

0800516c <__libc_init_array>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	4d0d      	ldr	r5, [pc, #52]	; (80051a4 <__libc_init_array+0x38>)
 8005170:	4c0d      	ldr	r4, [pc, #52]	; (80051a8 <__libc_init_array+0x3c>)
 8005172:	1b64      	subs	r4, r4, r5
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	2600      	movs	r6, #0
 8005178:	42a6      	cmp	r6, r4
 800517a:	d109      	bne.n	8005190 <__libc_init_array+0x24>
 800517c:	4d0b      	ldr	r5, [pc, #44]	; (80051ac <__libc_init_array+0x40>)
 800517e:	4c0c      	ldr	r4, [pc, #48]	; (80051b0 <__libc_init_array+0x44>)
 8005180:	f002 fa70 	bl	8007664 <_init>
 8005184:	1b64      	subs	r4, r4, r5
 8005186:	10a4      	asrs	r4, r4, #2
 8005188:	2600      	movs	r6, #0
 800518a:	42a6      	cmp	r6, r4
 800518c:	d105      	bne.n	800519a <__libc_init_array+0x2e>
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	f855 3b04 	ldr.w	r3, [r5], #4
 8005194:	4798      	blx	r3
 8005196:	3601      	adds	r6, #1
 8005198:	e7ee      	b.n	8005178 <__libc_init_array+0xc>
 800519a:	f855 3b04 	ldr.w	r3, [r5], #4
 800519e:	4798      	blx	r3
 80051a0:	3601      	adds	r6, #1
 80051a2:	e7f2      	b.n	800518a <__libc_init_array+0x1e>
 80051a4:	08007938 	.word	0x08007938
 80051a8:	08007938 	.word	0x08007938
 80051ac:	08007938 	.word	0x08007938
 80051b0:	0800793c 	.word	0x0800793c

080051b4 <memset>:
 80051b4:	4402      	add	r2, r0
 80051b6:	4603      	mov	r3, r0
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d100      	bne.n	80051be <memset+0xa>
 80051bc:	4770      	bx	lr
 80051be:	f803 1b01 	strb.w	r1, [r3], #1
 80051c2:	e7f9      	b.n	80051b8 <memset+0x4>
 80051c4:	0000      	movs	r0, r0
	...

080051c8 <cos>:
 80051c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ca:	ec53 2b10 	vmov	r2, r3, d0
 80051ce:	4824      	ldr	r0, [pc, #144]	; (8005260 <cos+0x98>)
 80051d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051d4:	4281      	cmp	r1, r0
 80051d6:	dc06      	bgt.n	80051e6 <cos+0x1e>
 80051d8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8005258 <cos+0x90>
 80051dc:	f001 fa2c 	bl	8006638 <__kernel_cos>
 80051e0:	ec51 0b10 	vmov	r0, r1, d0
 80051e4:	e007      	b.n	80051f6 <cos+0x2e>
 80051e6:	481f      	ldr	r0, [pc, #124]	; (8005264 <cos+0x9c>)
 80051e8:	4281      	cmp	r1, r0
 80051ea:	dd09      	ble.n	8005200 <cos+0x38>
 80051ec:	ee10 0a10 	vmov	r0, s0
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7fb f801 	bl	80001f8 <__aeabi_dsub>
 80051f6:	ec41 0b10 	vmov	d0, r0, r1
 80051fa:	b005      	add	sp, #20
 80051fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005200:	4668      	mov	r0, sp
 8005202:	f000 ff59 	bl	80060b8 <__ieee754_rem_pio2>
 8005206:	f000 0003 	and.w	r0, r0, #3
 800520a:	2801      	cmp	r0, #1
 800520c:	d007      	beq.n	800521e <cos+0x56>
 800520e:	2802      	cmp	r0, #2
 8005210:	d012      	beq.n	8005238 <cos+0x70>
 8005212:	b9c0      	cbnz	r0, 8005246 <cos+0x7e>
 8005214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005218:	ed9d 0b00 	vldr	d0, [sp]
 800521c:	e7de      	b.n	80051dc <cos+0x14>
 800521e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005222:	ed9d 0b00 	vldr	d0, [sp]
 8005226:	f001 fe0f 	bl	8006e48 <__kernel_sin>
 800522a:	ec53 2b10 	vmov	r2, r3, d0
 800522e:	ee10 0a10 	vmov	r0, s0
 8005232:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005236:	e7de      	b.n	80051f6 <cos+0x2e>
 8005238:	ed9d 1b02 	vldr	d1, [sp, #8]
 800523c:	ed9d 0b00 	vldr	d0, [sp]
 8005240:	f001 f9fa 	bl	8006638 <__kernel_cos>
 8005244:	e7f1      	b.n	800522a <cos+0x62>
 8005246:	ed9d 1b02 	vldr	d1, [sp, #8]
 800524a:	ed9d 0b00 	vldr	d0, [sp]
 800524e:	2001      	movs	r0, #1
 8005250:	f001 fdfa 	bl	8006e48 <__kernel_sin>
 8005254:	e7c4      	b.n	80051e0 <cos+0x18>
 8005256:	bf00      	nop
	...
 8005260:	3fe921fb 	.word	0x3fe921fb
 8005264:	7fefffff 	.word	0x7fefffff

08005268 <sin>:
 8005268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800526a:	ec53 2b10 	vmov	r2, r3, d0
 800526e:	4826      	ldr	r0, [pc, #152]	; (8005308 <sin+0xa0>)
 8005270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005274:	4281      	cmp	r1, r0
 8005276:	dc07      	bgt.n	8005288 <sin+0x20>
 8005278:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005300 <sin+0x98>
 800527c:	2000      	movs	r0, #0
 800527e:	f001 fde3 	bl	8006e48 <__kernel_sin>
 8005282:	ec51 0b10 	vmov	r0, r1, d0
 8005286:	e007      	b.n	8005298 <sin+0x30>
 8005288:	4820      	ldr	r0, [pc, #128]	; (800530c <sin+0xa4>)
 800528a:	4281      	cmp	r1, r0
 800528c:	dd09      	ble.n	80052a2 <sin+0x3a>
 800528e:	ee10 0a10 	vmov	r0, s0
 8005292:	4619      	mov	r1, r3
 8005294:	f7fa ffb0 	bl	80001f8 <__aeabi_dsub>
 8005298:	ec41 0b10 	vmov	d0, r0, r1
 800529c:	b005      	add	sp, #20
 800529e:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a2:	4668      	mov	r0, sp
 80052a4:	f000 ff08 	bl	80060b8 <__ieee754_rem_pio2>
 80052a8:	f000 0003 	and.w	r0, r0, #3
 80052ac:	2801      	cmp	r0, #1
 80052ae:	d008      	beq.n	80052c2 <sin+0x5a>
 80052b0:	2802      	cmp	r0, #2
 80052b2:	d00d      	beq.n	80052d0 <sin+0x68>
 80052b4:	b9d0      	cbnz	r0, 80052ec <sin+0x84>
 80052b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052ba:	ed9d 0b00 	vldr	d0, [sp]
 80052be:	2001      	movs	r0, #1
 80052c0:	e7dd      	b.n	800527e <sin+0x16>
 80052c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052c6:	ed9d 0b00 	vldr	d0, [sp]
 80052ca:	f001 f9b5 	bl	8006638 <__kernel_cos>
 80052ce:	e7d8      	b.n	8005282 <sin+0x1a>
 80052d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052d4:	ed9d 0b00 	vldr	d0, [sp]
 80052d8:	2001      	movs	r0, #1
 80052da:	f001 fdb5 	bl	8006e48 <__kernel_sin>
 80052de:	ec53 2b10 	vmov	r2, r3, d0
 80052e2:	ee10 0a10 	vmov	r0, s0
 80052e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80052ea:	e7d5      	b.n	8005298 <sin+0x30>
 80052ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052f0:	ed9d 0b00 	vldr	d0, [sp]
 80052f4:	f001 f9a0 	bl	8006638 <__kernel_cos>
 80052f8:	e7f1      	b.n	80052de <sin+0x76>
 80052fa:	bf00      	nop
 80052fc:	f3af 8000 	nop.w
	...
 8005308:	3fe921fb 	.word	0x3fe921fb
 800530c:	7fefffff 	.word	0x7fefffff

08005310 <atan2>:
 8005310:	f000 b8e2 	b.w	80054d8 <__ieee754_atan2>

08005314 <pow>:
 8005314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005318:	ec59 8b10 	vmov	r8, r9, d0
 800531c:	ec57 6b11 	vmov	r6, r7, d1
 8005320:	f000 f9a6 	bl	8005670 <__ieee754_pow>
 8005324:	4b4e      	ldr	r3, [pc, #312]	; (8005460 <pow+0x14c>)
 8005326:	f993 3000 	ldrsb.w	r3, [r3]
 800532a:	3301      	adds	r3, #1
 800532c:	ec55 4b10 	vmov	r4, r5, d0
 8005330:	d015      	beq.n	800535e <pow+0x4a>
 8005332:	4632      	mov	r2, r6
 8005334:	463b      	mov	r3, r7
 8005336:	4630      	mov	r0, r6
 8005338:	4639      	mov	r1, r7
 800533a:	f7fb fbaf 	bl	8000a9c <__aeabi_dcmpun>
 800533e:	b970      	cbnz	r0, 800535e <pow+0x4a>
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	4640      	mov	r0, r8
 8005346:	4649      	mov	r1, r9
 8005348:	f7fb fba8 	bl	8000a9c <__aeabi_dcmpun>
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	b148      	cbz	r0, 8005366 <pow+0x52>
 8005352:	4630      	mov	r0, r6
 8005354:	4639      	mov	r1, r7
 8005356:	f7fb fb6f 	bl	8000a38 <__aeabi_dcmpeq>
 800535a:	2800      	cmp	r0, #0
 800535c:	d17d      	bne.n	800545a <pow+0x146>
 800535e:	ec45 4b10 	vmov	d0, r4, r5
 8005362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005366:	4640      	mov	r0, r8
 8005368:	4649      	mov	r1, r9
 800536a:	f7fb fb65 	bl	8000a38 <__aeabi_dcmpeq>
 800536e:	b1e0      	cbz	r0, 80053aa <pow+0x96>
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fb fb5e 	bl	8000a38 <__aeabi_dcmpeq>
 800537c:	2800      	cmp	r0, #0
 800537e:	d16c      	bne.n	800545a <pow+0x146>
 8005380:	ec47 6b10 	vmov	d0, r6, r7
 8005384:	f001 ffc9 	bl	800731a <finite>
 8005388:	2800      	cmp	r0, #0
 800538a:	d0e8      	beq.n	800535e <pow+0x4a>
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb fb5a 	bl	8000a4c <__aeabi_dcmplt>
 8005398:	2800      	cmp	r0, #0
 800539a:	d0e0      	beq.n	800535e <pow+0x4a>
 800539c:	f7ff fee0 	bl	8005160 <__errno>
 80053a0:	2321      	movs	r3, #33	; 0x21
 80053a2:	6003      	str	r3, [r0, #0]
 80053a4:	2400      	movs	r4, #0
 80053a6:	4d2f      	ldr	r5, [pc, #188]	; (8005464 <pow+0x150>)
 80053a8:	e7d9      	b.n	800535e <pow+0x4a>
 80053aa:	ec45 4b10 	vmov	d0, r4, r5
 80053ae:	f001 ffb4 	bl	800731a <finite>
 80053b2:	bbb8      	cbnz	r0, 8005424 <pow+0x110>
 80053b4:	ec49 8b10 	vmov	d0, r8, r9
 80053b8:	f001 ffaf 	bl	800731a <finite>
 80053bc:	b390      	cbz	r0, 8005424 <pow+0x110>
 80053be:	ec47 6b10 	vmov	d0, r6, r7
 80053c2:	f001 ffaa 	bl	800731a <finite>
 80053c6:	b368      	cbz	r0, 8005424 <pow+0x110>
 80053c8:	4622      	mov	r2, r4
 80053ca:	462b      	mov	r3, r5
 80053cc:	4620      	mov	r0, r4
 80053ce:	4629      	mov	r1, r5
 80053d0:	f7fb fb64 	bl	8000a9c <__aeabi_dcmpun>
 80053d4:	b160      	cbz	r0, 80053f0 <pow+0xdc>
 80053d6:	f7ff fec3 	bl	8005160 <__errno>
 80053da:	2321      	movs	r3, #33	; 0x21
 80053dc:	6003      	str	r3, [r0, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	2300      	movs	r3, #0
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	f7fb f9e9 	bl	80007bc <__aeabi_ddiv>
 80053ea:	4604      	mov	r4, r0
 80053ec:	460d      	mov	r5, r1
 80053ee:	e7b6      	b.n	800535e <pow+0x4a>
 80053f0:	f7ff feb6 	bl	8005160 <__errno>
 80053f4:	2322      	movs	r3, #34	; 0x22
 80053f6:	6003      	str	r3, [r0, #0]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	4640      	mov	r0, r8
 80053fe:	4649      	mov	r1, r9
 8005400:	f7fb fb24 	bl	8000a4c <__aeabi_dcmplt>
 8005404:	2400      	movs	r4, #0
 8005406:	b158      	cbz	r0, 8005420 <pow+0x10c>
 8005408:	ec47 6b10 	vmov	d0, r6, r7
 800540c:	f002 f818 	bl	8007440 <rint>
 8005410:	4632      	mov	r2, r6
 8005412:	ec51 0b10 	vmov	r0, r1, d0
 8005416:	463b      	mov	r3, r7
 8005418:	f7fb fb0e 	bl	8000a38 <__aeabi_dcmpeq>
 800541c:	2800      	cmp	r0, #0
 800541e:	d0c2      	beq.n	80053a6 <pow+0x92>
 8005420:	4d11      	ldr	r5, [pc, #68]	; (8005468 <pow+0x154>)
 8005422:	e79c      	b.n	800535e <pow+0x4a>
 8005424:	2200      	movs	r2, #0
 8005426:	2300      	movs	r3, #0
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fb fb04 	bl	8000a38 <__aeabi_dcmpeq>
 8005430:	2800      	cmp	r0, #0
 8005432:	d094      	beq.n	800535e <pow+0x4a>
 8005434:	ec49 8b10 	vmov	d0, r8, r9
 8005438:	f001 ff6f 	bl	800731a <finite>
 800543c:	2800      	cmp	r0, #0
 800543e:	d08e      	beq.n	800535e <pow+0x4a>
 8005440:	ec47 6b10 	vmov	d0, r6, r7
 8005444:	f001 ff69 	bl	800731a <finite>
 8005448:	2800      	cmp	r0, #0
 800544a:	d088      	beq.n	800535e <pow+0x4a>
 800544c:	f7ff fe88 	bl	8005160 <__errno>
 8005450:	2322      	movs	r3, #34	; 0x22
 8005452:	6003      	str	r3, [r0, #0]
 8005454:	2400      	movs	r4, #0
 8005456:	2500      	movs	r5, #0
 8005458:	e781      	b.n	800535e <pow+0x4a>
 800545a:	4d04      	ldr	r5, [pc, #16]	; (800546c <pow+0x158>)
 800545c:	2400      	movs	r4, #0
 800545e:	e77e      	b.n	800535e <pow+0x4a>
 8005460:	20000108 	.word	0x20000108
 8005464:	fff00000 	.word	0xfff00000
 8005468:	7ff00000 	.word	0x7ff00000
 800546c:	3ff00000 	.word	0x3ff00000

08005470 <sqrt>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	ed2d 8b02 	vpush	{d8}
 8005476:	ec55 4b10 	vmov	r4, r5, d0
 800547a:	f001 f827 	bl	80064cc <__ieee754_sqrt>
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <sqrt+0x64>)
 8005480:	eeb0 8a40 	vmov.f32	s16, s0
 8005484:	eef0 8a60 	vmov.f32	s17, s1
 8005488:	f993 3000 	ldrsb.w	r3, [r3]
 800548c:	3301      	adds	r3, #1
 800548e:	d019      	beq.n	80054c4 <sqrt+0x54>
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	4620      	mov	r0, r4
 8005496:	4629      	mov	r1, r5
 8005498:	f7fb fb00 	bl	8000a9c <__aeabi_dcmpun>
 800549c:	b990      	cbnz	r0, 80054c4 <sqrt+0x54>
 800549e:	2200      	movs	r2, #0
 80054a0:	2300      	movs	r3, #0
 80054a2:	4620      	mov	r0, r4
 80054a4:	4629      	mov	r1, r5
 80054a6:	f7fb fad1 	bl	8000a4c <__aeabi_dcmplt>
 80054aa:	b158      	cbz	r0, 80054c4 <sqrt+0x54>
 80054ac:	f7ff fe58 	bl	8005160 <__errno>
 80054b0:	2321      	movs	r3, #33	; 0x21
 80054b2:	6003      	str	r3, [r0, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	f7fb f97e 	bl	80007bc <__aeabi_ddiv>
 80054c0:	ec41 0b18 	vmov	d8, r0, r1
 80054c4:	eeb0 0a48 	vmov.f32	s0, s16
 80054c8:	eef0 0a68 	vmov.f32	s1, s17
 80054cc:	ecbd 8b02 	vpop	{d8}
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	20000108 	.word	0x20000108

080054d8 <__ieee754_atan2>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	ec57 6b11 	vmov	r6, r7, d1
 80054e0:	4273      	negs	r3, r6
 80054e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005668 <__ieee754_atan2+0x190>
 80054e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80054ea:	4333      	orrs	r3, r6
 80054ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80054f0:	4573      	cmp	r3, lr
 80054f2:	ec51 0b10 	vmov	r0, r1, d0
 80054f6:	ee11 8a10 	vmov	r8, s2
 80054fa:	d80a      	bhi.n	8005512 <__ieee754_atan2+0x3a>
 80054fc:	4244      	negs	r4, r0
 80054fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005502:	4304      	orrs	r4, r0
 8005504:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005508:	4574      	cmp	r4, lr
 800550a:	ee10 9a10 	vmov	r9, s0
 800550e:	468c      	mov	ip, r1
 8005510:	d907      	bls.n	8005522 <__ieee754_atan2+0x4a>
 8005512:	4632      	mov	r2, r6
 8005514:	463b      	mov	r3, r7
 8005516:	f7fa fe71 	bl	80001fc <__adddf3>
 800551a:	ec41 0b10 	vmov	d0, r0, r1
 800551e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005522:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005526:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800552a:	4334      	orrs	r4, r6
 800552c:	d103      	bne.n	8005536 <__ieee754_atan2+0x5e>
 800552e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005532:	f001 bd49 	b.w	8006fc8 <atan>
 8005536:	17bc      	asrs	r4, r7, #30
 8005538:	f004 0402 	and.w	r4, r4, #2
 800553c:	ea53 0909 	orrs.w	r9, r3, r9
 8005540:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005544:	d107      	bne.n	8005556 <__ieee754_atan2+0x7e>
 8005546:	2c02      	cmp	r4, #2
 8005548:	d060      	beq.n	800560c <__ieee754_atan2+0x134>
 800554a:	2c03      	cmp	r4, #3
 800554c:	d1e5      	bne.n	800551a <__ieee754_atan2+0x42>
 800554e:	a142      	add	r1, pc, #264	; (adr r1, 8005658 <__ieee754_atan2+0x180>)
 8005550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005554:	e7e1      	b.n	800551a <__ieee754_atan2+0x42>
 8005556:	ea52 0808 	orrs.w	r8, r2, r8
 800555a:	d106      	bne.n	800556a <__ieee754_atan2+0x92>
 800555c:	f1bc 0f00 	cmp.w	ip, #0
 8005560:	da5f      	bge.n	8005622 <__ieee754_atan2+0x14a>
 8005562:	a13f      	add	r1, pc, #252	; (adr r1, 8005660 <__ieee754_atan2+0x188>)
 8005564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005568:	e7d7      	b.n	800551a <__ieee754_atan2+0x42>
 800556a:	4572      	cmp	r2, lr
 800556c:	d10f      	bne.n	800558e <__ieee754_atan2+0xb6>
 800556e:	4293      	cmp	r3, r2
 8005570:	f104 34ff 	add.w	r4, r4, #4294967295
 8005574:	d107      	bne.n	8005586 <__ieee754_atan2+0xae>
 8005576:	2c02      	cmp	r4, #2
 8005578:	d84c      	bhi.n	8005614 <__ieee754_atan2+0x13c>
 800557a:	4b35      	ldr	r3, [pc, #212]	; (8005650 <__ieee754_atan2+0x178>)
 800557c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005580:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005584:	e7c9      	b.n	800551a <__ieee754_atan2+0x42>
 8005586:	2c02      	cmp	r4, #2
 8005588:	d848      	bhi.n	800561c <__ieee754_atan2+0x144>
 800558a:	4b32      	ldr	r3, [pc, #200]	; (8005654 <__ieee754_atan2+0x17c>)
 800558c:	e7f6      	b.n	800557c <__ieee754_atan2+0xa4>
 800558e:	4573      	cmp	r3, lr
 8005590:	d0e4      	beq.n	800555c <__ieee754_atan2+0x84>
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005598:	ea4f 5223 	mov.w	r2, r3, asr #20
 800559c:	da1e      	bge.n	80055dc <__ieee754_atan2+0x104>
 800559e:	2f00      	cmp	r7, #0
 80055a0:	da01      	bge.n	80055a6 <__ieee754_atan2+0xce>
 80055a2:	323c      	adds	r2, #60	; 0x3c
 80055a4:	db1e      	blt.n	80055e4 <__ieee754_atan2+0x10c>
 80055a6:	4632      	mov	r2, r6
 80055a8:	463b      	mov	r3, r7
 80055aa:	f7fb f907 	bl	80007bc <__aeabi_ddiv>
 80055ae:	ec41 0b10 	vmov	d0, r0, r1
 80055b2:	f001 fea9 	bl	8007308 <fabs>
 80055b6:	f001 fd07 	bl	8006fc8 <atan>
 80055ba:	ec51 0b10 	vmov	r0, r1, d0
 80055be:	2c01      	cmp	r4, #1
 80055c0:	d013      	beq.n	80055ea <__ieee754_atan2+0x112>
 80055c2:	2c02      	cmp	r4, #2
 80055c4:	d015      	beq.n	80055f2 <__ieee754_atan2+0x11a>
 80055c6:	2c00      	cmp	r4, #0
 80055c8:	d0a7      	beq.n	800551a <__ieee754_atan2+0x42>
 80055ca:	a319      	add	r3, pc, #100	; (adr r3, 8005630 <__ieee754_atan2+0x158>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe12 	bl	80001f8 <__aeabi_dsub>
 80055d4:	a318      	add	r3, pc, #96	; (adr r3, 8005638 <__ieee754_atan2+0x160>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	e014      	b.n	8005606 <__ieee754_atan2+0x12e>
 80055dc:	a118      	add	r1, pc, #96	; (adr r1, 8005640 <__ieee754_atan2+0x168>)
 80055de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e2:	e7ec      	b.n	80055be <__ieee754_atan2+0xe6>
 80055e4:	2000      	movs	r0, #0
 80055e6:	2100      	movs	r1, #0
 80055e8:	e7e9      	b.n	80055be <__ieee754_atan2+0xe6>
 80055ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ee:	4619      	mov	r1, r3
 80055f0:	e793      	b.n	800551a <__ieee754_atan2+0x42>
 80055f2:	a30f      	add	r3, pc, #60	; (adr r3, 8005630 <__ieee754_atan2+0x158>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fdfe 	bl	80001f8 <__aeabi_dsub>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	a10d      	add	r1, pc, #52	; (adr r1, 8005638 <__ieee754_atan2+0x160>)
 8005602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005606:	f7fa fdf7 	bl	80001f8 <__aeabi_dsub>
 800560a:	e786      	b.n	800551a <__ieee754_atan2+0x42>
 800560c:	a10a      	add	r1, pc, #40	; (adr r1, 8005638 <__ieee754_atan2+0x160>)
 800560e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005612:	e782      	b.n	800551a <__ieee754_atan2+0x42>
 8005614:	a10c      	add	r1, pc, #48	; (adr r1, 8005648 <__ieee754_atan2+0x170>)
 8005616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800561a:	e77e      	b.n	800551a <__ieee754_atan2+0x42>
 800561c:	2000      	movs	r0, #0
 800561e:	2100      	movs	r1, #0
 8005620:	e77b      	b.n	800551a <__ieee754_atan2+0x42>
 8005622:	a107      	add	r1, pc, #28	; (adr r1, 8005640 <__ieee754_atan2+0x168>)
 8005624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005628:	e777      	b.n	800551a <__ieee754_atan2+0x42>
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w
 8005630:	33145c07 	.word	0x33145c07
 8005634:	3ca1a626 	.word	0x3ca1a626
 8005638:	54442d18 	.word	0x54442d18
 800563c:	400921fb 	.word	0x400921fb
 8005640:	54442d18 	.word	0x54442d18
 8005644:	3ff921fb 	.word	0x3ff921fb
 8005648:	54442d18 	.word	0x54442d18
 800564c:	3fe921fb 	.word	0x3fe921fb
 8005650:	080076a0 	.word	0x080076a0
 8005654:	080076b8 	.word	0x080076b8
 8005658:	54442d18 	.word	0x54442d18
 800565c:	c00921fb 	.word	0xc00921fb
 8005660:	54442d18 	.word	0x54442d18
 8005664:	bff921fb 	.word	0xbff921fb
 8005668:	7ff00000 	.word	0x7ff00000
 800566c:	00000000 	.word	0x00000000

08005670 <__ieee754_pow>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	ed2d 8b06 	vpush	{d8-d10}
 8005678:	b08d      	sub	sp, #52	; 0x34
 800567a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800567e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005682:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005686:	ea56 0100 	orrs.w	r1, r6, r0
 800568a:	ec53 2b10 	vmov	r2, r3, d0
 800568e:	f000 84d1 	beq.w	8006034 <__ieee754_pow+0x9c4>
 8005692:	497f      	ldr	r1, [pc, #508]	; (8005890 <__ieee754_pow+0x220>)
 8005694:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005698:	428c      	cmp	r4, r1
 800569a:	ee10 8a10 	vmov	r8, s0
 800569e:	4699      	mov	r9, r3
 80056a0:	dc09      	bgt.n	80056b6 <__ieee754_pow+0x46>
 80056a2:	d103      	bne.n	80056ac <__ieee754_pow+0x3c>
 80056a4:	b97a      	cbnz	r2, 80056c6 <__ieee754_pow+0x56>
 80056a6:	42a6      	cmp	r6, r4
 80056a8:	dd02      	ble.n	80056b0 <__ieee754_pow+0x40>
 80056aa:	e00c      	b.n	80056c6 <__ieee754_pow+0x56>
 80056ac:	428e      	cmp	r6, r1
 80056ae:	dc02      	bgt.n	80056b6 <__ieee754_pow+0x46>
 80056b0:	428e      	cmp	r6, r1
 80056b2:	d110      	bne.n	80056d6 <__ieee754_pow+0x66>
 80056b4:	b178      	cbz	r0, 80056d6 <__ieee754_pow+0x66>
 80056b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80056ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80056be:	ea54 0308 	orrs.w	r3, r4, r8
 80056c2:	f000 84b7 	beq.w	8006034 <__ieee754_pow+0x9c4>
 80056c6:	4873      	ldr	r0, [pc, #460]	; (8005894 <__ieee754_pow+0x224>)
 80056c8:	b00d      	add	sp, #52	; 0x34
 80056ca:	ecbd 8b06 	vpop	{d8-d10}
 80056ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d2:	f001 bead 	b.w	8007430 <nan>
 80056d6:	f1b9 0f00 	cmp.w	r9, #0
 80056da:	da36      	bge.n	800574a <__ieee754_pow+0xda>
 80056dc:	496e      	ldr	r1, [pc, #440]	; (8005898 <__ieee754_pow+0x228>)
 80056de:	428e      	cmp	r6, r1
 80056e0:	dc51      	bgt.n	8005786 <__ieee754_pow+0x116>
 80056e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80056e6:	428e      	cmp	r6, r1
 80056e8:	f340 84af 	ble.w	800604a <__ieee754_pow+0x9da>
 80056ec:	1531      	asrs	r1, r6, #20
 80056ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80056f2:	2914      	cmp	r1, #20
 80056f4:	dd0f      	ble.n	8005716 <__ieee754_pow+0xa6>
 80056f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80056fa:	fa20 fc01 	lsr.w	ip, r0, r1
 80056fe:	fa0c f101 	lsl.w	r1, ip, r1
 8005702:	4281      	cmp	r1, r0
 8005704:	f040 84a1 	bne.w	800604a <__ieee754_pow+0x9da>
 8005708:	f00c 0c01 	and.w	ip, ip, #1
 800570c:	f1cc 0102 	rsb	r1, ip, #2
 8005710:	9100      	str	r1, [sp, #0]
 8005712:	b180      	cbz	r0, 8005736 <__ieee754_pow+0xc6>
 8005714:	e059      	b.n	80057ca <__ieee754_pow+0x15a>
 8005716:	2800      	cmp	r0, #0
 8005718:	d155      	bne.n	80057c6 <__ieee754_pow+0x156>
 800571a:	f1c1 0114 	rsb	r1, r1, #20
 800571e:	fa46 fc01 	asr.w	ip, r6, r1
 8005722:	fa0c f101 	lsl.w	r1, ip, r1
 8005726:	42b1      	cmp	r1, r6
 8005728:	f040 848c 	bne.w	8006044 <__ieee754_pow+0x9d4>
 800572c:	f00c 0c01 	and.w	ip, ip, #1
 8005730:	f1cc 0102 	rsb	r1, ip, #2
 8005734:	9100      	str	r1, [sp, #0]
 8005736:	4959      	ldr	r1, [pc, #356]	; (800589c <__ieee754_pow+0x22c>)
 8005738:	428e      	cmp	r6, r1
 800573a:	d12d      	bne.n	8005798 <__ieee754_pow+0x128>
 800573c:	2f00      	cmp	r7, #0
 800573e:	da79      	bge.n	8005834 <__ieee754_pow+0x1c4>
 8005740:	4956      	ldr	r1, [pc, #344]	; (800589c <__ieee754_pow+0x22c>)
 8005742:	2000      	movs	r0, #0
 8005744:	f7fb f83a 	bl	80007bc <__aeabi_ddiv>
 8005748:	e016      	b.n	8005778 <__ieee754_pow+0x108>
 800574a:	2100      	movs	r1, #0
 800574c:	9100      	str	r1, [sp, #0]
 800574e:	2800      	cmp	r0, #0
 8005750:	d13b      	bne.n	80057ca <__ieee754_pow+0x15a>
 8005752:	494f      	ldr	r1, [pc, #316]	; (8005890 <__ieee754_pow+0x220>)
 8005754:	428e      	cmp	r6, r1
 8005756:	d1ee      	bne.n	8005736 <__ieee754_pow+0xc6>
 8005758:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800575c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005760:	ea53 0308 	orrs.w	r3, r3, r8
 8005764:	f000 8466 	beq.w	8006034 <__ieee754_pow+0x9c4>
 8005768:	4b4d      	ldr	r3, [pc, #308]	; (80058a0 <__ieee754_pow+0x230>)
 800576a:	429c      	cmp	r4, r3
 800576c:	dd0d      	ble.n	800578a <__ieee754_pow+0x11a>
 800576e:	2f00      	cmp	r7, #0
 8005770:	f280 8464 	bge.w	800603c <__ieee754_pow+0x9cc>
 8005774:	2000      	movs	r0, #0
 8005776:	2100      	movs	r1, #0
 8005778:	ec41 0b10 	vmov	d0, r0, r1
 800577c:	b00d      	add	sp, #52	; 0x34
 800577e:	ecbd 8b06 	vpop	{d8-d10}
 8005782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005786:	2102      	movs	r1, #2
 8005788:	e7e0      	b.n	800574c <__ieee754_pow+0xdc>
 800578a:	2f00      	cmp	r7, #0
 800578c:	daf2      	bge.n	8005774 <__ieee754_pow+0x104>
 800578e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005792:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005796:	e7ef      	b.n	8005778 <__ieee754_pow+0x108>
 8005798:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800579c:	d104      	bne.n	80057a8 <__ieee754_pow+0x138>
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f7fa fee1 	bl	8000568 <__aeabi_dmul>
 80057a6:	e7e7      	b.n	8005778 <__ieee754_pow+0x108>
 80057a8:	493e      	ldr	r1, [pc, #248]	; (80058a4 <__ieee754_pow+0x234>)
 80057aa:	428f      	cmp	r7, r1
 80057ac:	d10d      	bne.n	80057ca <__ieee754_pow+0x15a>
 80057ae:	f1b9 0f00 	cmp.w	r9, #0
 80057b2:	db0a      	blt.n	80057ca <__ieee754_pow+0x15a>
 80057b4:	ec43 2b10 	vmov	d0, r2, r3
 80057b8:	b00d      	add	sp, #52	; 0x34
 80057ba:	ecbd 8b06 	vpop	{d8-d10}
 80057be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c2:	f000 be83 	b.w	80064cc <__ieee754_sqrt>
 80057c6:	2100      	movs	r1, #0
 80057c8:	9100      	str	r1, [sp, #0]
 80057ca:	ec43 2b10 	vmov	d0, r2, r3
 80057ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057d2:	f001 fd99 	bl	8007308 <fabs>
 80057d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057da:	ec51 0b10 	vmov	r0, r1, d0
 80057de:	f1b8 0f00 	cmp.w	r8, #0
 80057e2:	d12a      	bne.n	800583a <__ieee754_pow+0x1ca>
 80057e4:	b12c      	cbz	r4, 80057f2 <__ieee754_pow+0x182>
 80057e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800589c <__ieee754_pow+0x22c>
 80057ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80057ee:	45e6      	cmp	lr, ip
 80057f0:	d123      	bne.n	800583a <__ieee754_pow+0x1ca>
 80057f2:	2f00      	cmp	r7, #0
 80057f4:	da05      	bge.n	8005802 <__ieee754_pow+0x192>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	2000      	movs	r0, #0
 80057fc:	4927      	ldr	r1, [pc, #156]	; (800589c <__ieee754_pow+0x22c>)
 80057fe:	f7fa ffdd 	bl	80007bc <__aeabi_ddiv>
 8005802:	f1b9 0f00 	cmp.w	r9, #0
 8005806:	dab7      	bge.n	8005778 <__ieee754_pow+0x108>
 8005808:	9b00      	ldr	r3, [sp, #0]
 800580a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800580e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005812:	4323      	orrs	r3, r4
 8005814:	d108      	bne.n	8005828 <__ieee754_pow+0x1b8>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4610      	mov	r0, r2
 800581c:	4619      	mov	r1, r3
 800581e:	f7fa fceb 	bl	80001f8 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	e78d      	b.n	8005744 <__ieee754_pow+0xd4>
 8005828:	9b00      	ldr	r3, [sp, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d1a4      	bne.n	8005778 <__ieee754_pow+0x108>
 800582e:	4602      	mov	r2, r0
 8005830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	e79e      	b.n	8005778 <__ieee754_pow+0x108>
 800583a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800583e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005842:	950a      	str	r5, [sp, #40]	; 0x28
 8005844:	9d00      	ldr	r5, [sp, #0]
 8005846:	46ac      	mov	ip, r5
 8005848:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800584a:	ea5c 0505 	orrs.w	r5, ip, r5
 800584e:	d0e4      	beq.n	800581a <__ieee754_pow+0x1aa>
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <__ieee754_pow+0x238>)
 8005852:	429e      	cmp	r6, r3
 8005854:	f340 80fc 	ble.w	8005a50 <__ieee754_pow+0x3e0>
 8005858:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800585c:	429e      	cmp	r6, r3
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <__ieee754_pow+0x230>)
 8005860:	dd07      	ble.n	8005872 <__ieee754_pow+0x202>
 8005862:	429c      	cmp	r4, r3
 8005864:	dc0a      	bgt.n	800587c <__ieee754_pow+0x20c>
 8005866:	2f00      	cmp	r7, #0
 8005868:	da84      	bge.n	8005774 <__ieee754_pow+0x104>
 800586a:	a307      	add	r3, pc, #28	; (adr r3, 8005888 <__ieee754_pow+0x218>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	e795      	b.n	800579e <__ieee754_pow+0x12e>
 8005872:	429c      	cmp	r4, r3
 8005874:	dbf7      	blt.n	8005866 <__ieee754_pow+0x1f6>
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <__ieee754_pow+0x22c>)
 8005878:	429c      	cmp	r4, r3
 800587a:	dd17      	ble.n	80058ac <__ieee754_pow+0x23c>
 800587c:	2f00      	cmp	r7, #0
 800587e:	dcf4      	bgt.n	800586a <__ieee754_pow+0x1fa>
 8005880:	e778      	b.n	8005774 <__ieee754_pow+0x104>
 8005882:	bf00      	nop
 8005884:	f3af 8000 	nop.w
 8005888:	8800759c 	.word	0x8800759c
 800588c:	7e37e43c 	.word	0x7e37e43c
 8005890:	7ff00000 	.word	0x7ff00000
 8005894:	080076d0 	.word	0x080076d0
 8005898:	433fffff 	.word	0x433fffff
 800589c:	3ff00000 	.word	0x3ff00000
 80058a0:	3fefffff 	.word	0x3fefffff
 80058a4:	3fe00000 	.word	0x3fe00000
 80058a8:	41e00000 	.word	0x41e00000
 80058ac:	4b64      	ldr	r3, [pc, #400]	; (8005a40 <__ieee754_pow+0x3d0>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	f7fa fca2 	bl	80001f8 <__aeabi_dsub>
 80058b4:	a356      	add	r3, pc, #344	; (adr r3, 8005a10 <__ieee754_pow+0x3a0>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	4604      	mov	r4, r0
 80058bc:	460d      	mov	r5, r1
 80058be:	f7fa fe53 	bl	8000568 <__aeabi_dmul>
 80058c2:	a355      	add	r3, pc, #340	; (adr r3, 8005a18 <__ieee754_pow+0x3a8>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	4606      	mov	r6, r0
 80058ca:	460f      	mov	r7, r1
 80058cc:	4620      	mov	r0, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	f7fa fe4a 	bl	8000568 <__aeabi_dmul>
 80058d4:	4b5b      	ldr	r3, [pc, #364]	; (8005a44 <__ieee754_pow+0x3d4>)
 80058d6:	4682      	mov	sl, r0
 80058d8:	468b      	mov	fp, r1
 80058da:	2200      	movs	r2, #0
 80058dc:	4620      	mov	r0, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	f7fa fe42 	bl	8000568 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	a14d      	add	r1, pc, #308	; (adr r1, 8005a20 <__ieee754_pow+0x3b0>)
 80058ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ee:	f7fa fc83 	bl	80001f8 <__aeabi_dsub>
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	f7fa fe37 	bl	8000568 <__aeabi_dmul>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	2000      	movs	r0, #0
 8005900:	4951      	ldr	r1, [pc, #324]	; (8005a48 <__ieee754_pow+0x3d8>)
 8005902:	f7fa fc79 	bl	80001f8 <__aeabi_dsub>
 8005906:	4622      	mov	r2, r4
 8005908:	4680      	mov	r8, r0
 800590a:	4689      	mov	r9, r1
 800590c:	462b      	mov	r3, r5
 800590e:	4620      	mov	r0, r4
 8005910:	4629      	mov	r1, r5
 8005912:	f7fa fe29 	bl	8000568 <__aeabi_dmul>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa fe23 	bl	8000568 <__aeabi_dmul>
 8005922:	a341      	add	r3, pc, #260	; (adr r3, 8005a28 <__ieee754_pow+0x3b8>)
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f7fa fe1e 	bl	8000568 <__aeabi_dmul>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	f7fa fc60 	bl	80001f8 <__aeabi_dsub>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4680      	mov	r8, r0
 800593e:	4689      	mov	r9, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fc5a 	bl	80001fc <__adddf3>
 8005948:	2400      	movs	r4, #0
 800594a:	4632      	mov	r2, r6
 800594c:	463b      	mov	r3, r7
 800594e:	4620      	mov	r0, r4
 8005950:	460d      	mov	r5, r1
 8005952:	f7fa fc51 	bl	80001f8 <__aeabi_dsub>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4640      	mov	r0, r8
 800595c:	4649      	mov	r1, r9
 800595e:	f7fa fc4b 	bl	80001f8 <__aeabi_dsub>
 8005962:	9b00      	ldr	r3, [sp, #0]
 8005964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005966:	3b01      	subs	r3, #1
 8005968:	4313      	orrs	r3, r2
 800596a:	4682      	mov	sl, r0
 800596c:	468b      	mov	fp, r1
 800596e:	f040 81f1 	bne.w	8005d54 <__ieee754_pow+0x6e4>
 8005972:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005a30 <__ieee754_pow+0x3c0>
 8005976:	eeb0 8a47 	vmov.f32	s16, s14
 800597a:	eef0 8a67 	vmov.f32	s17, s15
 800597e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005982:	2600      	movs	r6, #0
 8005984:	4632      	mov	r2, r6
 8005986:	463b      	mov	r3, r7
 8005988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800598c:	f7fa fc34 	bl	80001f8 <__aeabi_dsub>
 8005990:	4622      	mov	r2, r4
 8005992:	462b      	mov	r3, r5
 8005994:	f7fa fde8 	bl	8000568 <__aeabi_dmul>
 8005998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800599c:	4680      	mov	r8, r0
 800599e:	4689      	mov	r9, r1
 80059a0:	4650      	mov	r0, sl
 80059a2:	4659      	mov	r1, fp
 80059a4:	f7fa fde0 	bl	8000568 <__aeabi_dmul>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fa fc24 	bl	80001fc <__adddf3>
 80059b4:	4632      	mov	r2, r6
 80059b6:	463b      	mov	r3, r7
 80059b8:	4680      	mov	r8, r0
 80059ba:	4689      	mov	r9, r1
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa fdd2 	bl	8000568 <__aeabi_dmul>
 80059c4:	460b      	mov	r3, r1
 80059c6:	4604      	mov	r4, r0
 80059c8:	460d      	mov	r5, r1
 80059ca:	4602      	mov	r2, r0
 80059cc:	4649      	mov	r1, r9
 80059ce:	4640      	mov	r0, r8
 80059d0:	f7fa fc14 	bl	80001fc <__adddf3>
 80059d4:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <__ieee754_pow+0x3dc>)
 80059d6:	4299      	cmp	r1, r3
 80059d8:	ec45 4b19 	vmov	d9, r4, r5
 80059dc:	4606      	mov	r6, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	468b      	mov	fp, r1
 80059e2:	f340 82fe 	ble.w	8005fe2 <__ieee754_pow+0x972>
 80059e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80059ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80059ee:	4303      	orrs	r3, r0
 80059f0:	f000 81f0 	beq.w	8005dd4 <__ieee754_pow+0x764>
 80059f4:	a310      	add	r3, pc, #64	; (adr r3, 8005a38 <__ieee754_pow+0x3c8>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	ec51 0b18 	vmov	r0, r1, d8
 80059fe:	f7fa fdb3 	bl	8000568 <__aeabi_dmul>
 8005a02:	a30d      	add	r3, pc, #52	; (adr r3, 8005a38 <__ieee754_pow+0x3c8>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	e6cb      	b.n	80057a2 <__ieee754_pow+0x132>
 8005a0a:	bf00      	nop
 8005a0c:	f3af 8000 	nop.w
 8005a10:	60000000 	.word	0x60000000
 8005a14:	3ff71547 	.word	0x3ff71547
 8005a18:	f85ddf44 	.word	0xf85ddf44
 8005a1c:	3e54ae0b 	.word	0x3e54ae0b
 8005a20:	55555555 	.word	0x55555555
 8005a24:	3fd55555 	.word	0x3fd55555
 8005a28:	652b82fe 	.word	0x652b82fe
 8005a2c:	3ff71547 	.word	0x3ff71547
 8005a30:	00000000 	.word	0x00000000
 8005a34:	bff00000 	.word	0xbff00000
 8005a38:	8800759c 	.word	0x8800759c
 8005a3c:	7e37e43c 	.word	0x7e37e43c
 8005a40:	3ff00000 	.word	0x3ff00000
 8005a44:	3fd00000 	.word	0x3fd00000
 8005a48:	3fe00000 	.word	0x3fe00000
 8005a4c:	408fffff 	.word	0x408fffff
 8005a50:	4bd7      	ldr	r3, [pc, #860]	; (8005db0 <__ieee754_pow+0x740>)
 8005a52:	ea03 0309 	and.w	r3, r3, r9
 8005a56:	2200      	movs	r2, #0
 8005a58:	b92b      	cbnz	r3, 8005a66 <__ieee754_pow+0x3f6>
 8005a5a:	4bd6      	ldr	r3, [pc, #856]	; (8005db4 <__ieee754_pow+0x744>)
 8005a5c:	f7fa fd84 	bl	8000568 <__aeabi_dmul>
 8005a60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005a64:	460c      	mov	r4, r1
 8005a66:	1523      	asrs	r3, r4, #20
 8005a68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a6c:	4413      	add	r3, r2
 8005a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a70:	4bd1      	ldr	r3, [pc, #836]	; (8005db8 <__ieee754_pow+0x748>)
 8005a72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005a80:	dd08      	ble.n	8005a94 <__ieee754_pow+0x424>
 8005a82:	4bce      	ldr	r3, [pc, #824]	; (8005dbc <__ieee754_pow+0x74c>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	f340 8163 	ble.w	8005d50 <__ieee754_pow+0x6e0>
 8005a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005a94:	2400      	movs	r4, #0
 8005a96:	00e3      	lsls	r3, r4, #3
 8005a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a9a:	4bc9      	ldr	r3, [pc, #804]	; (8005dc0 <__ieee754_pow+0x750>)
 8005a9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005aa0:	ed93 7b00 	vldr	d7, [r3]
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	ec53 2b17 	vmov	r2, r3, d7
 8005aaa:	eeb0 8a47 	vmov.f32	s16, s14
 8005aae:	eef0 8a67 	vmov.f32	s17, s15
 8005ab2:	4682      	mov	sl, r0
 8005ab4:	f7fa fba0 	bl	80001f8 <__aeabi_dsub>
 8005ab8:	4652      	mov	r2, sl
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	462b      	mov	r3, r5
 8005ac0:	ec51 0b18 	vmov	r0, r1, d8
 8005ac4:	f7fa fb9a 	bl	80001fc <__adddf3>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	2000      	movs	r0, #0
 8005ace:	49bd      	ldr	r1, [pc, #756]	; (8005dc4 <__ieee754_pow+0x754>)
 8005ad0:	f7fa fe74 	bl	80007bc <__aeabi_ddiv>
 8005ad4:	ec41 0b19 	vmov	d9, r0, r1
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4630      	mov	r0, r6
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fa fd42 	bl	8000568 <__aeabi_dmul>
 8005ae4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005af8:	46ab      	mov	fp, r5
 8005afa:	106d      	asrs	r5, r5, #1
 8005afc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005b00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005b04:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4614      	mov	r4, r2
 8005b10:	461d      	mov	r5, r3
 8005b12:	f7fa fd29 	bl	8000568 <__aeabi_dmul>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	f7fa fb6b 	bl	80001f8 <__aeabi_dsub>
 8005b22:	ec53 2b18 	vmov	r2, r3, d8
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	f7fa fb63 	bl	80001f8 <__aeabi_dsub>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4650      	mov	r0, sl
 8005b38:	4659      	mov	r1, fp
 8005b3a:	f7fa fb5d 	bl	80001f8 <__aeabi_dsub>
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	f7fa fd11 	bl	8000568 <__aeabi_dmul>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fa fb53 	bl	80001f8 <__aeabi_dsub>
 8005b52:	ec53 2b19 	vmov	r2, r3, d9
 8005b56:	f7fa fd07 	bl	8000568 <__aeabi_dmul>
 8005b5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b5e:	ec41 0b18 	vmov	d8, r0, r1
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	f7fa fcff 	bl	8000568 <__aeabi_dmul>
 8005b6a:	a37d      	add	r3, pc, #500	; (adr r3, 8005d60 <__ieee754_pow+0x6f0>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	4604      	mov	r4, r0
 8005b72:	460d      	mov	r5, r1
 8005b74:	f7fa fcf8 	bl	8000568 <__aeabi_dmul>
 8005b78:	a37b      	add	r3, pc, #492	; (adr r3, 8005d68 <__ieee754_pow+0x6f8>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fb3d 	bl	80001fc <__adddf3>
 8005b82:	4622      	mov	r2, r4
 8005b84:	462b      	mov	r3, r5
 8005b86:	f7fa fcef 	bl	8000568 <__aeabi_dmul>
 8005b8a:	a379      	add	r3, pc, #484	; (adr r3, 8005d70 <__ieee754_pow+0x700>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fb34 	bl	80001fc <__adddf3>
 8005b94:	4622      	mov	r2, r4
 8005b96:	462b      	mov	r3, r5
 8005b98:	f7fa fce6 	bl	8000568 <__aeabi_dmul>
 8005b9c:	a376      	add	r3, pc, #472	; (adr r3, 8005d78 <__ieee754_pow+0x708>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fb2b 	bl	80001fc <__adddf3>
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	462b      	mov	r3, r5
 8005baa:	f7fa fcdd 	bl	8000568 <__aeabi_dmul>
 8005bae:	a374      	add	r3, pc, #464	; (adr r3, 8005d80 <__ieee754_pow+0x710>)
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f7fa fb22 	bl	80001fc <__adddf3>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	462b      	mov	r3, r5
 8005bbc:	f7fa fcd4 	bl	8000568 <__aeabi_dmul>
 8005bc0:	a371      	add	r3, pc, #452	; (adr r3, 8005d88 <__ieee754_pow+0x718>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f7fa fb19 	bl	80001fc <__adddf3>
 8005bca:	4622      	mov	r2, r4
 8005bcc:	4606      	mov	r6, r0
 8005bce:	460f      	mov	r7, r1
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7fa fcc7 	bl	8000568 <__aeabi_dmul>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4630      	mov	r0, r6
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa fcc1 	bl	8000568 <__aeabi_dmul>
 8005be6:	4642      	mov	r2, r8
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	464b      	mov	r3, r9
 8005bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf2:	f7fa fb03 	bl	80001fc <__adddf3>
 8005bf6:	ec53 2b18 	vmov	r2, r3, d8
 8005bfa:	f7fa fcb5 	bl	8000568 <__aeabi_dmul>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f7fa fafb 	bl	80001fc <__adddf3>
 8005c06:	4642      	mov	r2, r8
 8005c08:	4682      	mov	sl, r0
 8005c0a:	468b      	mov	fp, r1
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa fca9 	bl	8000568 <__aeabi_dmul>
 8005c16:	4b6c      	ldr	r3, [pc, #432]	; (8005dc8 <__ieee754_pow+0x758>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460f      	mov	r7, r1
 8005c1e:	f7fa faed 	bl	80001fc <__adddf3>
 8005c22:	4652      	mov	r2, sl
 8005c24:	465b      	mov	r3, fp
 8005c26:	f7fa fae9 	bl	80001fc <__adddf3>
 8005c2a:	9c04      	ldr	r4, [sp, #16]
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	4622      	mov	r2, r4
 8005c30:	460b      	mov	r3, r1
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f7fa fc97 	bl	8000568 <__aeabi_dmul>
 8005c3a:	4b63      	ldr	r3, [pc, #396]	; (8005dc8 <__ieee754_pow+0x758>)
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4689      	mov	r9, r1
 8005c40:	2200      	movs	r2, #0
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fa fad7 	bl	80001f8 <__aeabi_dsub>
 8005c4a:	4632      	mov	r2, r6
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	f7fa fad3 	bl	80001f8 <__aeabi_dsub>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4650      	mov	r0, sl
 8005c58:	4659      	mov	r1, fp
 8005c5a:	f7fa facd 	bl	80001f8 <__aeabi_dsub>
 8005c5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c62:	f7fa fc81 	bl	8000568 <__aeabi_dmul>
 8005c66:	4622      	mov	r2, r4
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	ec51 0b18 	vmov	r0, r1, d8
 8005c72:	f7fa fc79 	bl	8000568 <__aeabi_dmul>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7fa fabd 	bl	80001fc <__adddf3>
 8005c82:	4606      	mov	r6, r0
 8005c84:	460f      	mov	r7, r1
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	f7fa fab5 	bl	80001fc <__adddf3>
 8005c92:	9c04      	ldr	r4, [sp, #16]
 8005c94:	a33e      	add	r3, pc, #248	; (adr r3, 8005d90 <__ieee754_pow+0x720>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	460d      	mov	r5, r1
 8005c9e:	f7fa fc63 	bl	8000568 <__aeabi_dmul>
 8005ca2:	4642      	mov	r2, r8
 8005ca4:	ec41 0b18 	vmov	d8, r0, r1
 8005ca8:	464b      	mov	r3, r9
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f7fa faa3 	bl	80001f8 <__aeabi_dsub>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	4639      	mov	r1, r7
 8005cba:	f7fa fa9d 	bl	80001f8 <__aeabi_dsub>
 8005cbe:	a336      	add	r3, pc, #216	; (adr r3, 8005d98 <__ieee754_pow+0x728>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f7fa fc50 	bl	8000568 <__aeabi_dmul>
 8005cc8:	a335      	add	r3, pc, #212	; (adr r3, 8005da0 <__ieee754_pow+0x730>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7fa fc47 	bl	8000568 <__aeabi_dmul>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4630      	mov	r0, r6
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	f7fa fa8b 	bl	80001fc <__adddf3>
 8005ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ce8:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <__ieee754_pow+0x75c>)
 8005cea:	4413      	add	r3, r2
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fa84 	bl	80001fc <__adddf3>
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cf8:	468b      	mov	fp, r1
 8005cfa:	f7fa fbcb 	bl	8000494 <__aeabi_i2d>
 8005cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d00:	4b33      	ldr	r3, [pc, #204]	; (8005dd0 <__ieee754_pow+0x760>)
 8005d02:	4413      	add	r3, r2
 8005d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d08:	4606      	mov	r6, r0
 8005d0a:	460f      	mov	r7, r1
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	465b      	mov	r3, fp
 8005d10:	ec51 0b18 	vmov	r0, r1, d8
 8005d14:	f7fa fa72 	bl	80001fc <__adddf3>
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	f7fa fa6e 	bl	80001fc <__adddf3>
 8005d20:	4632      	mov	r2, r6
 8005d22:	463b      	mov	r3, r7
 8005d24:	f7fa fa6a 	bl	80001fc <__adddf3>
 8005d28:	9c04      	ldr	r4, [sp, #16]
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	4620      	mov	r0, r4
 8005d30:	460d      	mov	r5, r1
 8005d32:	f7fa fa61 	bl	80001f8 <__aeabi_dsub>
 8005d36:	4642      	mov	r2, r8
 8005d38:	464b      	mov	r3, r9
 8005d3a:	f7fa fa5d 	bl	80001f8 <__aeabi_dsub>
 8005d3e:	ec53 2b18 	vmov	r2, r3, d8
 8005d42:	f7fa fa59 	bl	80001f8 <__aeabi_dsub>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	e606      	b.n	800595e <__ieee754_pow+0x2ee>
 8005d50:	2401      	movs	r4, #1
 8005d52:	e6a0      	b.n	8005a96 <__ieee754_pow+0x426>
 8005d54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005da8 <__ieee754_pow+0x738>
 8005d58:	e60d      	b.n	8005976 <__ieee754_pow+0x306>
 8005d5a:	bf00      	nop
 8005d5c:	f3af 8000 	nop.w
 8005d60:	4a454eef 	.word	0x4a454eef
 8005d64:	3fca7e28 	.word	0x3fca7e28
 8005d68:	93c9db65 	.word	0x93c9db65
 8005d6c:	3fcd864a 	.word	0x3fcd864a
 8005d70:	a91d4101 	.word	0xa91d4101
 8005d74:	3fd17460 	.word	0x3fd17460
 8005d78:	518f264d 	.word	0x518f264d
 8005d7c:	3fd55555 	.word	0x3fd55555
 8005d80:	db6fabff 	.word	0xdb6fabff
 8005d84:	3fdb6db6 	.word	0x3fdb6db6
 8005d88:	33333303 	.word	0x33333303
 8005d8c:	3fe33333 	.word	0x3fe33333
 8005d90:	e0000000 	.word	0xe0000000
 8005d94:	3feec709 	.word	0x3feec709
 8005d98:	dc3a03fd 	.word	0xdc3a03fd
 8005d9c:	3feec709 	.word	0x3feec709
 8005da0:	145b01f5 	.word	0x145b01f5
 8005da4:	be3e2fe0 	.word	0xbe3e2fe0
 8005da8:	00000000 	.word	0x00000000
 8005dac:	3ff00000 	.word	0x3ff00000
 8005db0:	7ff00000 	.word	0x7ff00000
 8005db4:	43400000 	.word	0x43400000
 8005db8:	0003988e 	.word	0x0003988e
 8005dbc:	000bb679 	.word	0x000bb679
 8005dc0:	080076d8 	.word	0x080076d8
 8005dc4:	3ff00000 	.word	0x3ff00000
 8005dc8:	40080000 	.word	0x40080000
 8005dcc:	080076f8 	.word	0x080076f8
 8005dd0:	080076e8 	.word	0x080076e8
 8005dd4:	a3b5      	add	r3, pc, #724	; (adr r3, 80060ac <__ieee754_pow+0xa3c>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	4640      	mov	r0, r8
 8005ddc:	4649      	mov	r1, r9
 8005dde:	f7fa fa0d 	bl	80001fc <__adddf3>
 8005de2:	4622      	mov	r2, r4
 8005de4:	ec41 0b1a 	vmov	d10, r0, r1
 8005de8:	462b      	mov	r3, r5
 8005dea:	4630      	mov	r0, r6
 8005dec:	4639      	mov	r1, r7
 8005dee:	f7fa fa03 	bl	80001f8 <__aeabi_dsub>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	ec51 0b1a 	vmov	r0, r1, d10
 8005dfa:	f7fa fe45 	bl	8000a88 <__aeabi_dcmpgt>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f47f adf8 	bne.w	80059f4 <__ieee754_pow+0x384>
 8005e04:	4aa4      	ldr	r2, [pc, #656]	; (8006098 <__ieee754_pow+0xa28>)
 8005e06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	f340 810b 	ble.w	8006026 <__ieee754_pow+0x9b6>
 8005e10:	151b      	asrs	r3, r3, #20
 8005e12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005e16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005e1a:	fa4a f303 	asr.w	r3, sl, r3
 8005e1e:	445b      	add	r3, fp
 8005e20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005e24:	4e9d      	ldr	r6, [pc, #628]	; (800609c <__ieee754_pow+0xa2c>)
 8005e26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005e2a:	4116      	asrs	r6, r2
 8005e2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005e30:	2000      	movs	r0, #0
 8005e32:	ea23 0106 	bic.w	r1, r3, r6
 8005e36:	f1c2 0214 	rsb	r2, r2, #20
 8005e3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005e3e:	fa4a fa02 	asr.w	sl, sl, r2
 8005e42:	f1bb 0f00 	cmp.w	fp, #0
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	bfb8      	it	lt
 8005e50:	f1ca 0a00 	rsblt	sl, sl, #0
 8005e54:	f7fa f9d0 	bl	80001f8 <__aeabi_dsub>
 8005e58:	ec41 0b19 	vmov	d9, r0, r1
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	ec51 0b19 	vmov	r0, r1, d9
 8005e64:	f7fa f9ca 	bl	80001fc <__adddf3>
 8005e68:	2400      	movs	r4, #0
 8005e6a:	a379      	add	r3, pc, #484	; (adr r3, 8006050 <__ieee754_pow+0x9e0>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	4620      	mov	r0, r4
 8005e72:	460d      	mov	r5, r1
 8005e74:	f7fa fb78 	bl	8000568 <__aeabi_dmul>
 8005e78:	ec53 2b19 	vmov	r2, r3, d9
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	460f      	mov	r7, r1
 8005e80:	4620      	mov	r0, r4
 8005e82:	4629      	mov	r1, r5
 8005e84:	f7fa f9b8 	bl	80001f8 <__aeabi_dsub>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	f7fa f9b2 	bl	80001f8 <__aeabi_dsub>
 8005e94:	a370      	add	r3, pc, #448	; (adr r3, 8006058 <__ieee754_pow+0x9e8>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa fb65 	bl	8000568 <__aeabi_dmul>
 8005e9e:	a370      	add	r3, pc, #448	; (adr r3, 8006060 <__ieee754_pow+0x9f0>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4689      	mov	r9, r1
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	f7fa fb5c 	bl	8000568 <__aeabi_dmul>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	f7fa f9a0 	bl	80001fc <__adddf3>
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	f7fa f998 	bl	80001fc <__adddf3>
 8005ecc:	4632      	mov	r2, r6
 8005ece:	463b      	mov	r3, r7
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4689      	mov	r9, r1
 8005ed4:	f7fa f990 	bl	80001f8 <__aeabi_dsub>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4620      	mov	r0, r4
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fa f98a 	bl	80001f8 <__aeabi_dsub>
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	460f      	mov	r7, r1
 8005eea:	464b      	mov	r3, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa fb3a 	bl	8000568 <__aeabi_dmul>
 8005ef4:	a35c      	add	r3, pc, #368	; (adr r3, 8006068 <__ieee754_pow+0x9f8>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	4604      	mov	r4, r0
 8005efc:	460d      	mov	r5, r1
 8005efe:	f7fa fb33 	bl	8000568 <__aeabi_dmul>
 8005f02:	a35b      	add	r3, pc, #364	; (adr r3, 8006070 <__ieee754_pow+0xa00>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa f976 	bl	80001f8 <__aeabi_dsub>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	f7fa fb2a 	bl	8000568 <__aeabi_dmul>
 8005f14:	a358      	add	r3, pc, #352	; (adr r3, 8006078 <__ieee754_pow+0xa08>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa f96f 	bl	80001fc <__adddf3>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	f7fa fb21 	bl	8000568 <__aeabi_dmul>
 8005f26:	a356      	add	r3, pc, #344	; (adr r3, 8006080 <__ieee754_pow+0xa10>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	f7fa f964 	bl	80001f8 <__aeabi_dsub>
 8005f30:	4622      	mov	r2, r4
 8005f32:	462b      	mov	r3, r5
 8005f34:	f7fa fb18 	bl	8000568 <__aeabi_dmul>
 8005f38:	a353      	add	r3, pc, #332	; (adr r3, 8006088 <__ieee754_pow+0xa18>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa f95d 	bl	80001fc <__adddf3>
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	f7fa fb0f 	bl	8000568 <__aeabi_dmul>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa f951 	bl	80001f8 <__aeabi_dsub>
 8005f56:	4604      	mov	r4, r0
 8005f58:	460d      	mov	r5, r1
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa fb01 	bl	8000568 <__aeabi_dmul>
 8005f66:	2200      	movs	r2, #0
 8005f68:	ec41 0b19 	vmov	d9, r0, r1
 8005f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa f940 	bl	80001f8 <__aeabi_dsub>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	ec51 0b19 	vmov	r0, r1, d9
 8005f80:	f7fa fc1c 	bl	80007bc <__aeabi_ddiv>
 8005f84:	4632      	mov	r2, r6
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa faea 	bl	8000568 <__aeabi_dmul>
 8005f94:	4632      	mov	r2, r6
 8005f96:	463b      	mov	r3, r7
 8005f98:	f7fa f930 	bl	80001fc <__adddf3>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	f7fa f928 	bl	80001f8 <__aeabi_dsub>
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	f7fa f924 	bl	80001f8 <__aeabi_dsub>
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	493a      	ldr	r1, [pc, #232]	; (80060a0 <__ieee754_pow+0xa30>)
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fa f91e 	bl	80001f8 <__aeabi_dsub>
 8005fbc:	e9cd 0100 	strd	r0, r1, [sp]
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fca:	da2f      	bge.n	800602c <__ieee754_pow+0x9bc>
 8005fcc:	4650      	mov	r0, sl
 8005fce:	ed9d 0b00 	vldr	d0, [sp]
 8005fd2:	f001 fac1 	bl	8007558 <scalbn>
 8005fd6:	ec51 0b10 	vmov	r0, r1, d0
 8005fda:	ec53 2b18 	vmov	r2, r3, d8
 8005fde:	f7ff bbe0 	b.w	80057a2 <__ieee754_pow+0x132>
 8005fe2:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <__ieee754_pow+0xa34>)
 8005fe4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005fe8:	429e      	cmp	r6, r3
 8005fea:	f77f af0b 	ble.w	8005e04 <__ieee754_pow+0x794>
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <__ieee754_pow+0xa38>)
 8005ff0:	440b      	add	r3, r1
 8005ff2:	4303      	orrs	r3, r0
 8005ff4:	d00b      	beq.n	800600e <__ieee754_pow+0x99e>
 8005ff6:	a326      	add	r3, pc, #152	; (adr r3, 8006090 <__ieee754_pow+0xa20>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	ec51 0b18 	vmov	r0, r1, d8
 8006000:	f7fa fab2 	bl	8000568 <__aeabi_dmul>
 8006004:	a322      	add	r3, pc, #136	; (adr r3, 8006090 <__ieee754_pow+0xa20>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f7ff bbca 	b.w	80057a2 <__ieee754_pow+0x132>
 800600e:	4622      	mov	r2, r4
 8006010:	462b      	mov	r3, r5
 8006012:	f7fa f8f1 	bl	80001f8 <__aeabi_dsub>
 8006016:	4642      	mov	r2, r8
 8006018:	464b      	mov	r3, r9
 800601a:	f7fa fd2b 	bl	8000a74 <__aeabi_dcmpge>
 800601e:	2800      	cmp	r0, #0
 8006020:	f43f aef0 	beq.w	8005e04 <__ieee754_pow+0x794>
 8006024:	e7e7      	b.n	8005ff6 <__ieee754_pow+0x986>
 8006026:	f04f 0a00 	mov.w	sl, #0
 800602a:	e717      	b.n	8005e5c <__ieee754_pow+0x7ec>
 800602c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006030:	4619      	mov	r1, r3
 8006032:	e7d2      	b.n	8005fda <__ieee754_pow+0x96a>
 8006034:	491a      	ldr	r1, [pc, #104]	; (80060a0 <__ieee754_pow+0xa30>)
 8006036:	2000      	movs	r0, #0
 8006038:	f7ff bb9e 	b.w	8005778 <__ieee754_pow+0x108>
 800603c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006040:	f7ff bb9a 	b.w	8005778 <__ieee754_pow+0x108>
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	f7ff bb76 	b.w	8005736 <__ieee754_pow+0xc6>
 800604a:	2100      	movs	r1, #0
 800604c:	f7ff bb60 	b.w	8005710 <__ieee754_pow+0xa0>
 8006050:	00000000 	.word	0x00000000
 8006054:	3fe62e43 	.word	0x3fe62e43
 8006058:	fefa39ef 	.word	0xfefa39ef
 800605c:	3fe62e42 	.word	0x3fe62e42
 8006060:	0ca86c39 	.word	0x0ca86c39
 8006064:	be205c61 	.word	0xbe205c61
 8006068:	72bea4d0 	.word	0x72bea4d0
 800606c:	3e663769 	.word	0x3e663769
 8006070:	c5d26bf1 	.word	0xc5d26bf1
 8006074:	3ebbbd41 	.word	0x3ebbbd41
 8006078:	af25de2c 	.word	0xaf25de2c
 800607c:	3f11566a 	.word	0x3f11566a
 8006080:	16bebd93 	.word	0x16bebd93
 8006084:	3f66c16c 	.word	0x3f66c16c
 8006088:	5555553e 	.word	0x5555553e
 800608c:	3fc55555 	.word	0x3fc55555
 8006090:	c2f8f359 	.word	0xc2f8f359
 8006094:	01a56e1f 	.word	0x01a56e1f
 8006098:	3fe00000 	.word	0x3fe00000
 800609c:	000fffff 	.word	0x000fffff
 80060a0:	3ff00000 	.word	0x3ff00000
 80060a4:	4090cbff 	.word	0x4090cbff
 80060a8:	3f6f3400 	.word	0x3f6f3400
 80060ac:	652b82fe 	.word	0x652b82fe
 80060b0:	3c971547 	.word	0x3c971547
 80060b4:	00000000 	.word	0x00000000

080060b8 <__ieee754_rem_pio2>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	ed2d 8b02 	vpush	{d8}
 80060c0:	ec55 4b10 	vmov	r4, r5, d0
 80060c4:	4bca      	ldr	r3, [pc, #808]	; (80063f0 <__ieee754_rem_pio2+0x338>)
 80060c6:	b08b      	sub	sp, #44	; 0x2c
 80060c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80060cc:	4598      	cmp	r8, r3
 80060ce:	4682      	mov	sl, r0
 80060d0:	9502      	str	r5, [sp, #8]
 80060d2:	dc08      	bgt.n	80060e6 <__ieee754_rem_pio2+0x2e>
 80060d4:	2200      	movs	r2, #0
 80060d6:	2300      	movs	r3, #0
 80060d8:	ed80 0b00 	vstr	d0, [r0]
 80060dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80060e0:	f04f 0b00 	mov.w	fp, #0
 80060e4:	e028      	b.n	8006138 <__ieee754_rem_pio2+0x80>
 80060e6:	4bc3      	ldr	r3, [pc, #780]	; (80063f4 <__ieee754_rem_pio2+0x33c>)
 80060e8:	4598      	cmp	r8, r3
 80060ea:	dc78      	bgt.n	80061de <__ieee754_rem_pio2+0x126>
 80060ec:	9b02      	ldr	r3, [sp, #8]
 80060ee:	4ec2      	ldr	r6, [pc, #776]	; (80063f8 <__ieee754_rem_pio2+0x340>)
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	ee10 0a10 	vmov	r0, s0
 80060f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x300>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	4629      	mov	r1, r5
 80060fe:	dd39      	ble.n	8006174 <__ieee754_rem_pio2+0xbc>
 8006100:	f7fa f87a 	bl	80001f8 <__aeabi_dsub>
 8006104:	45b0      	cmp	r8, r6
 8006106:	4604      	mov	r4, r0
 8006108:	460d      	mov	r5, r1
 800610a:	d01b      	beq.n	8006144 <__ieee754_rem_pio2+0x8c>
 800610c:	a3ac      	add	r3, pc, #688	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x308>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa f871 	bl	80001f8 <__aeabi_dsub>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	e9ca 2300 	strd	r2, r3, [sl]
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa f869 	bl	80001f8 <__aeabi_dsub>
 8006126:	a3a6      	add	r3, pc, #664	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x308>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa f864 	bl	80001f8 <__aeabi_dsub>
 8006130:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006134:	f04f 0b01 	mov.w	fp, #1
 8006138:	4658      	mov	r0, fp
 800613a:	b00b      	add	sp, #44	; 0x2c
 800613c:	ecbd 8b02 	vpop	{d8}
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	a3a0      	add	r3, pc, #640	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x310>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f7fa f855 	bl	80001f8 <__aeabi_dsub>
 800614e:	a3a0      	add	r3, pc, #640	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x318>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
 8006158:	f7fa f84e 	bl	80001f8 <__aeabi_dsub>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	e9ca 2300 	strd	r2, r3, [sl]
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa f846 	bl	80001f8 <__aeabi_dsub>
 800616c:	a398      	add	r3, pc, #608	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x318>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	e7db      	b.n	800612c <__ieee754_rem_pio2+0x74>
 8006174:	f7fa f842 	bl	80001fc <__adddf3>
 8006178:	45b0      	cmp	r8, r6
 800617a:	4604      	mov	r4, r0
 800617c:	460d      	mov	r5, r1
 800617e:	d016      	beq.n	80061ae <__ieee754_rem_pio2+0xf6>
 8006180:	a38f      	add	r3, pc, #572	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x308>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa f839 	bl	80001fc <__adddf3>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9ca 2300 	strd	r2, r3, [sl]
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f7fa f82f 	bl	80001f8 <__aeabi_dsub>
 800619a:	a389      	add	r3, pc, #548	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x308>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7fa f82c 	bl	80001fc <__adddf3>
 80061a4:	f04f 3bff 	mov.w	fp, #4294967295
 80061a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80061ac:	e7c4      	b.n	8006138 <__ieee754_rem_pio2+0x80>
 80061ae:	a386      	add	r3, pc, #536	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x310>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f7fa f822 	bl	80001fc <__adddf3>
 80061b8:	a385      	add	r3, pc, #532	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x318>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	4604      	mov	r4, r0
 80061c0:	460d      	mov	r5, r1
 80061c2:	f7fa f81b 	bl	80001fc <__adddf3>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	e9ca 2300 	strd	r2, r3, [sl]
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa f811 	bl	80001f8 <__aeabi_dsub>
 80061d6:	a37e      	add	r3, pc, #504	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x318>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	e7e0      	b.n	80061a0 <__ieee754_rem_pio2+0xe8>
 80061de:	4b87      	ldr	r3, [pc, #540]	; (80063fc <__ieee754_rem_pio2+0x344>)
 80061e0:	4598      	cmp	r8, r3
 80061e2:	f300 80d9 	bgt.w	8006398 <__ieee754_rem_pio2+0x2e0>
 80061e6:	f001 f88f 	bl	8007308 <fabs>
 80061ea:	ec55 4b10 	vmov	r4, r5, d0
 80061ee:	ee10 0a10 	vmov	r0, s0
 80061f2:	a379      	add	r3, pc, #484	; (adr r3, 80063d8 <__ieee754_rem_pio2+0x320>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f9b5 	bl	8000568 <__aeabi_dmul>
 80061fe:	4b80      	ldr	r3, [pc, #512]	; (8006400 <__ieee754_rem_pio2+0x348>)
 8006200:	2200      	movs	r2, #0
 8006202:	f7f9 fffb 	bl	80001fc <__adddf3>
 8006206:	f7fa fc5f 	bl	8000ac8 <__aeabi_d2iz>
 800620a:	4683      	mov	fp, r0
 800620c:	f7fa f942 	bl	8000494 <__aeabi_i2d>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	ec43 2b18 	vmov	d8, r2, r3
 8006218:	a367      	add	r3, pc, #412	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x300>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7fa f9a3 	bl	8000568 <__aeabi_dmul>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7f9 ffe5 	bl	80001f8 <__aeabi_dsub>
 800622e:	a364      	add	r3, pc, #400	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x308>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	4606      	mov	r6, r0
 8006236:	460f      	mov	r7, r1
 8006238:	ec51 0b18 	vmov	r0, r1, d8
 800623c:	f7fa f994 	bl	8000568 <__aeabi_dmul>
 8006240:	f1bb 0f1f 	cmp.w	fp, #31
 8006244:	4604      	mov	r4, r0
 8006246:	460d      	mov	r5, r1
 8006248:	dc0d      	bgt.n	8006266 <__ieee754_rem_pio2+0x1ae>
 800624a:	4b6e      	ldr	r3, [pc, #440]	; (8006404 <__ieee754_rem_pio2+0x34c>)
 800624c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	4543      	cmp	r3, r8
 8006256:	d006      	beq.n	8006266 <__ieee754_rem_pio2+0x1ae>
 8006258:	4622      	mov	r2, r4
 800625a:	462b      	mov	r3, r5
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7f9 ffca 	bl	80001f8 <__aeabi_dsub>
 8006264:	e00f      	b.n	8006286 <__ieee754_rem_pio2+0x1ce>
 8006266:	462b      	mov	r3, r5
 8006268:	4622      	mov	r2, r4
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	f7f9 ffc3 	bl	80001f8 <__aeabi_dsub>
 8006272:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006276:	9303      	str	r3, [sp, #12]
 8006278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800627c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006280:	f1b8 0f10 	cmp.w	r8, #16
 8006284:	dc02      	bgt.n	800628c <__ieee754_rem_pio2+0x1d4>
 8006286:	e9ca 0100 	strd	r0, r1, [sl]
 800628a:	e039      	b.n	8006300 <__ieee754_rem_pio2+0x248>
 800628c:	a34e      	add	r3, pc, #312	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x310>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	ec51 0b18 	vmov	r0, r1, d8
 8006296:	f7fa f967 	bl	8000568 <__aeabi_dmul>
 800629a:	4604      	mov	r4, r0
 800629c:	460d      	mov	r5, r1
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4630      	mov	r0, r6
 80062a4:	4639      	mov	r1, r7
 80062a6:	f7f9 ffa7 	bl	80001f8 <__aeabi_dsub>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4680      	mov	r8, r0
 80062b0:	4689      	mov	r9, r1
 80062b2:	4630      	mov	r0, r6
 80062b4:	4639      	mov	r1, r7
 80062b6:	f7f9 ff9f 	bl	80001f8 <__aeabi_dsub>
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f7f9 ff9b 	bl	80001f8 <__aeabi_dsub>
 80062c2:	a343      	add	r3, pc, #268	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x318>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	4604      	mov	r4, r0
 80062ca:	460d      	mov	r5, r1
 80062cc:	ec51 0b18 	vmov	r0, r1, d8
 80062d0:	f7fa f94a 	bl	8000568 <__aeabi_dmul>
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	f7f9 ff8e 	bl	80001f8 <__aeabi_dsub>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7f9 ff86 	bl	80001f8 <__aeabi_dsub>
 80062ec:	9a03      	ldr	r2, [sp, #12]
 80062ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b31      	cmp	r3, #49	; 0x31
 80062f6:	dc24      	bgt.n	8006342 <__ieee754_rem_pio2+0x28a>
 80062f8:	e9ca 0100 	strd	r0, r1, [sl]
 80062fc:	4646      	mov	r6, r8
 80062fe:	464f      	mov	r7, r9
 8006300:	e9da 8900 	ldrd	r8, r9, [sl]
 8006304:	4630      	mov	r0, r6
 8006306:	4642      	mov	r2, r8
 8006308:	464b      	mov	r3, r9
 800630a:	4639      	mov	r1, r7
 800630c:	f7f9 ff74 	bl	80001f8 <__aeabi_dsub>
 8006310:	462b      	mov	r3, r5
 8006312:	4622      	mov	r2, r4
 8006314:	f7f9 ff70 	bl	80001f8 <__aeabi_dsub>
 8006318:	9b02      	ldr	r3, [sp, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006320:	f6bf af0a 	bge.w	8006138 <__ieee754_rem_pio2+0x80>
 8006324:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006328:	f8ca 3004 	str.w	r3, [sl, #4]
 800632c:	f8ca 8000 	str.w	r8, [sl]
 8006330:	f8ca 0008 	str.w	r0, [sl, #8]
 8006334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006338:	f8ca 300c 	str.w	r3, [sl, #12]
 800633c:	f1cb 0b00 	rsb	fp, fp, #0
 8006340:	e6fa      	b.n	8006138 <__ieee754_rem_pio2+0x80>
 8006342:	a327      	add	r3, pc, #156	; (adr r3, 80063e0 <__ieee754_rem_pio2+0x328>)
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	ec51 0b18 	vmov	r0, r1, d8
 800634c:	f7fa f90c 	bl	8000568 <__aeabi_dmul>
 8006350:	4604      	mov	r4, r0
 8006352:	460d      	mov	r5, r1
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7f9 ff4c 	bl	80001f8 <__aeabi_dsub>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4606      	mov	r6, r0
 8006366:	460f      	mov	r7, r1
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7f9 ff44 	bl	80001f8 <__aeabi_dsub>
 8006370:	4622      	mov	r2, r4
 8006372:	462b      	mov	r3, r5
 8006374:	f7f9 ff40 	bl	80001f8 <__aeabi_dsub>
 8006378:	a31b      	add	r3, pc, #108	; (adr r3, 80063e8 <__ieee754_rem_pio2+0x330>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	4604      	mov	r4, r0
 8006380:	460d      	mov	r5, r1
 8006382:	ec51 0b18 	vmov	r0, r1, d8
 8006386:	f7fa f8ef 	bl	8000568 <__aeabi_dmul>
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	f7f9 ff33 	bl	80001f8 <__aeabi_dsub>
 8006392:	4604      	mov	r4, r0
 8006394:	460d      	mov	r5, r1
 8006396:	e75f      	b.n	8006258 <__ieee754_rem_pio2+0x1a0>
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <__ieee754_rem_pio2+0x350>)
 800639a:	4598      	cmp	r8, r3
 800639c:	dd36      	ble.n	800640c <__ieee754_rem_pio2+0x354>
 800639e:	ee10 2a10 	vmov	r2, s0
 80063a2:	462b      	mov	r3, r5
 80063a4:	4620      	mov	r0, r4
 80063a6:	4629      	mov	r1, r5
 80063a8:	f7f9 ff26 	bl	80001f8 <__aeabi_dsub>
 80063ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80063b0:	e9ca 0100 	strd	r0, r1, [sl]
 80063b4:	e694      	b.n	80060e0 <__ieee754_rem_pio2+0x28>
 80063b6:	bf00      	nop
 80063b8:	54400000 	.word	0x54400000
 80063bc:	3ff921fb 	.word	0x3ff921fb
 80063c0:	1a626331 	.word	0x1a626331
 80063c4:	3dd0b461 	.word	0x3dd0b461
 80063c8:	1a600000 	.word	0x1a600000
 80063cc:	3dd0b461 	.word	0x3dd0b461
 80063d0:	2e037073 	.word	0x2e037073
 80063d4:	3ba3198a 	.word	0x3ba3198a
 80063d8:	6dc9c883 	.word	0x6dc9c883
 80063dc:	3fe45f30 	.word	0x3fe45f30
 80063e0:	2e000000 	.word	0x2e000000
 80063e4:	3ba3198a 	.word	0x3ba3198a
 80063e8:	252049c1 	.word	0x252049c1
 80063ec:	397b839a 	.word	0x397b839a
 80063f0:	3fe921fb 	.word	0x3fe921fb
 80063f4:	4002d97b 	.word	0x4002d97b
 80063f8:	3ff921fb 	.word	0x3ff921fb
 80063fc:	413921fb 	.word	0x413921fb
 8006400:	3fe00000 	.word	0x3fe00000
 8006404:	08007708 	.word	0x08007708
 8006408:	7fefffff 	.word	0x7fefffff
 800640c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006410:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006414:	ee10 0a10 	vmov	r0, s0
 8006418:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800641c:	ee10 6a10 	vmov	r6, s0
 8006420:	460f      	mov	r7, r1
 8006422:	f7fa fb51 	bl	8000ac8 <__aeabi_d2iz>
 8006426:	f7fa f835 	bl	8000494 <__aeabi_i2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4630      	mov	r0, r6
 8006430:	4639      	mov	r1, r7
 8006432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006436:	f7f9 fedf 	bl	80001f8 <__aeabi_dsub>
 800643a:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <__ieee754_rem_pio2+0x40c>)
 800643c:	2200      	movs	r2, #0
 800643e:	f7fa f893 	bl	8000568 <__aeabi_dmul>
 8006442:	460f      	mov	r7, r1
 8006444:	4606      	mov	r6, r0
 8006446:	f7fa fb3f 	bl	8000ac8 <__aeabi_d2iz>
 800644a:	f7fa f823 	bl	8000494 <__aeabi_i2d>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4630      	mov	r0, r6
 8006454:	4639      	mov	r1, r7
 8006456:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800645a:	f7f9 fecd 	bl	80001f8 <__aeabi_dsub>
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <__ieee754_rem_pio2+0x40c>)
 8006460:	2200      	movs	r2, #0
 8006462:	f7fa f881 	bl	8000568 <__aeabi_dmul>
 8006466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800646a:	ad04      	add	r5, sp, #16
 800646c:	f04f 0803 	mov.w	r8, #3
 8006470:	46a9      	mov	r9, r5
 8006472:	2600      	movs	r6, #0
 8006474:	2700      	movs	r7, #0
 8006476:	4632      	mov	r2, r6
 8006478:	463b      	mov	r3, r7
 800647a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800647e:	46c3      	mov	fp, r8
 8006480:	3d08      	subs	r5, #8
 8006482:	f108 38ff 	add.w	r8, r8, #4294967295
 8006486:	f7fa fad7 	bl	8000a38 <__aeabi_dcmpeq>
 800648a:	2800      	cmp	r0, #0
 800648c:	d1f3      	bne.n	8006476 <__ieee754_rem_pio2+0x3be>
 800648e:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <__ieee754_rem_pio2+0x410>)
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	2302      	movs	r3, #2
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4622      	mov	r2, r4
 8006498:	465b      	mov	r3, fp
 800649a:	4651      	mov	r1, sl
 800649c:	4648      	mov	r0, r9
 800649e:	f000 f993 	bl	80067c8 <__kernel_rem_pio2>
 80064a2:	9b02      	ldr	r3, [sp, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	4683      	mov	fp, r0
 80064a8:	f6bf ae46 	bge.w	8006138 <__ieee754_rem_pio2+0x80>
 80064ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80064b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064b4:	f8ca 3004 	str.w	r3, [sl, #4]
 80064b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80064bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80064c0:	e73a      	b.n	8006338 <__ieee754_rem_pio2+0x280>
 80064c2:	bf00      	nop
 80064c4:	41700000 	.word	0x41700000
 80064c8:	08007788 	.word	0x08007788

080064cc <__ieee754_sqrt>:
 80064cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	ec55 4b10 	vmov	r4, r5, d0
 80064d4:	4e56      	ldr	r6, [pc, #344]	; (8006630 <__ieee754_sqrt+0x164>)
 80064d6:	43ae      	bics	r6, r5
 80064d8:	ee10 0a10 	vmov	r0, s0
 80064dc:	ee10 3a10 	vmov	r3, s0
 80064e0:	4629      	mov	r1, r5
 80064e2:	462a      	mov	r2, r5
 80064e4:	d110      	bne.n	8006508 <__ieee754_sqrt+0x3c>
 80064e6:	ee10 2a10 	vmov	r2, s0
 80064ea:	462b      	mov	r3, r5
 80064ec:	f7fa f83c 	bl	8000568 <__aeabi_dmul>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7f9 fe80 	bl	80001fc <__adddf3>
 80064fc:	4604      	mov	r4, r0
 80064fe:	460d      	mov	r5, r1
 8006500:	ec45 4b10 	vmov	d0, r4, r5
 8006504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006508:	2d00      	cmp	r5, #0
 800650a:	dc10      	bgt.n	800652e <__ieee754_sqrt+0x62>
 800650c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006510:	4330      	orrs	r0, r6
 8006512:	d0f5      	beq.n	8006500 <__ieee754_sqrt+0x34>
 8006514:	b15d      	cbz	r5, 800652e <__ieee754_sqrt+0x62>
 8006516:	ee10 2a10 	vmov	r2, s0
 800651a:	462b      	mov	r3, r5
 800651c:	ee10 0a10 	vmov	r0, s0
 8006520:	f7f9 fe6a 	bl	80001f8 <__aeabi_dsub>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	f7fa f948 	bl	80007bc <__aeabi_ddiv>
 800652c:	e7e6      	b.n	80064fc <__ieee754_sqrt+0x30>
 800652e:	1509      	asrs	r1, r1, #20
 8006530:	d076      	beq.n	8006620 <__ieee754_sqrt+0x154>
 8006532:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006536:	07ce      	lsls	r6, r1, #31
 8006538:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800653c:	bf5e      	ittt	pl
 800653e:	0fda      	lsrpl	r2, r3, #31
 8006540:	005b      	lslpl	r3, r3, #1
 8006542:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006546:	0fda      	lsrs	r2, r3, #31
 8006548:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800654c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006550:	2000      	movs	r0, #0
 8006552:	106d      	asrs	r5, r5, #1
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	f04f 0e16 	mov.w	lr, #22
 800655a:	4684      	mov	ip, r0
 800655c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006560:	eb0c 0401 	add.w	r4, ip, r1
 8006564:	4294      	cmp	r4, r2
 8006566:	bfde      	ittt	le
 8006568:	1b12      	suble	r2, r2, r4
 800656a:	eb04 0c01 	addle.w	ip, r4, r1
 800656e:	1840      	addle	r0, r0, r1
 8006570:	0052      	lsls	r2, r2, #1
 8006572:	f1be 0e01 	subs.w	lr, lr, #1
 8006576:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800657a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800657e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006582:	d1ed      	bne.n	8006560 <__ieee754_sqrt+0x94>
 8006584:	4671      	mov	r1, lr
 8006586:	2720      	movs	r7, #32
 8006588:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800658c:	4562      	cmp	r2, ip
 800658e:	eb04 060e 	add.w	r6, r4, lr
 8006592:	dc02      	bgt.n	800659a <__ieee754_sqrt+0xce>
 8006594:	d113      	bne.n	80065be <__ieee754_sqrt+0xf2>
 8006596:	429e      	cmp	r6, r3
 8006598:	d811      	bhi.n	80065be <__ieee754_sqrt+0xf2>
 800659a:	2e00      	cmp	r6, #0
 800659c:	eb06 0e04 	add.w	lr, r6, r4
 80065a0:	da43      	bge.n	800662a <__ieee754_sqrt+0x15e>
 80065a2:	f1be 0f00 	cmp.w	lr, #0
 80065a6:	db40      	blt.n	800662a <__ieee754_sqrt+0x15e>
 80065a8:	f10c 0801 	add.w	r8, ip, #1
 80065ac:	eba2 020c 	sub.w	r2, r2, ip
 80065b0:	429e      	cmp	r6, r3
 80065b2:	bf88      	it	hi
 80065b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80065b8:	1b9b      	subs	r3, r3, r6
 80065ba:	4421      	add	r1, r4
 80065bc:	46c4      	mov	ip, r8
 80065be:	0052      	lsls	r2, r2, #1
 80065c0:	3f01      	subs	r7, #1
 80065c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80065c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80065ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065ce:	d1dd      	bne.n	800658c <__ieee754_sqrt+0xc0>
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d006      	beq.n	80065e2 <__ieee754_sqrt+0x116>
 80065d4:	1c4c      	adds	r4, r1, #1
 80065d6:	bf13      	iteet	ne
 80065d8:	3101      	addne	r1, #1
 80065da:	3001      	addeq	r0, #1
 80065dc:	4639      	moveq	r1, r7
 80065de:	f021 0101 	bicne.w	r1, r1, #1
 80065e2:	1043      	asrs	r3, r0, #1
 80065e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80065e8:	0849      	lsrs	r1, r1, #1
 80065ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80065ee:	07c2      	lsls	r2, r0, #31
 80065f0:	bf48      	it	mi
 80065f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80065f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80065fa:	460c      	mov	r4, r1
 80065fc:	463d      	mov	r5, r7
 80065fe:	e77f      	b.n	8006500 <__ieee754_sqrt+0x34>
 8006600:	0ada      	lsrs	r2, r3, #11
 8006602:	3815      	subs	r0, #21
 8006604:	055b      	lsls	r3, r3, #21
 8006606:	2a00      	cmp	r2, #0
 8006608:	d0fa      	beq.n	8006600 <__ieee754_sqrt+0x134>
 800660a:	02d7      	lsls	r7, r2, #11
 800660c:	d50a      	bpl.n	8006624 <__ieee754_sqrt+0x158>
 800660e:	f1c1 0420 	rsb	r4, r1, #32
 8006612:	fa23 f404 	lsr.w	r4, r3, r4
 8006616:	1e4d      	subs	r5, r1, #1
 8006618:	408b      	lsls	r3, r1
 800661a:	4322      	orrs	r2, r4
 800661c:	1b41      	subs	r1, r0, r5
 800661e:	e788      	b.n	8006532 <__ieee754_sqrt+0x66>
 8006620:	4608      	mov	r0, r1
 8006622:	e7f0      	b.n	8006606 <__ieee754_sqrt+0x13a>
 8006624:	0052      	lsls	r2, r2, #1
 8006626:	3101      	adds	r1, #1
 8006628:	e7ef      	b.n	800660a <__ieee754_sqrt+0x13e>
 800662a:	46e0      	mov	r8, ip
 800662c:	e7be      	b.n	80065ac <__ieee754_sqrt+0xe0>
 800662e:	bf00      	nop
 8006630:	7ff00000 	.word	0x7ff00000
 8006634:	00000000 	.word	0x00000000

08006638 <__kernel_cos>:
 8006638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	ec57 6b10 	vmov	r6, r7, d0
 8006640:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006644:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006648:	ed8d 1b00 	vstr	d1, [sp]
 800664c:	da07      	bge.n	800665e <__kernel_cos+0x26>
 800664e:	ee10 0a10 	vmov	r0, s0
 8006652:	4639      	mov	r1, r7
 8006654:	f7fa fa38 	bl	8000ac8 <__aeabi_d2iz>
 8006658:	2800      	cmp	r0, #0
 800665a:	f000 8088 	beq.w	800676e <__kernel_cos+0x136>
 800665e:	4632      	mov	r2, r6
 8006660:	463b      	mov	r3, r7
 8006662:	4630      	mov	r0, r6
 8006664:	4639      	mov	r1, r7
 8006666:	f7f9 ff7f 	bl	8000568 <__aeabi_dmul>
 800666a:	4b51      	ldr	r3, [pc, #324]	; (80067b0 <__kernel_cos+0x178>)
 800666c:	2200      	movs	r2, #0
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	f7f9 ff79 	bl	8000568 <__aeabi_dmul>
 8006676:	a340      	add	r3, pc, #256	; (adr r3, 8006778 <__kernel_cos+0x140>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	4682      	mov	sl, r0
 800667e:	468b      	mov	fp, r1
 8006680:	4620      	mov	r0, r4
 8006682:	4629      	mov	r1, r5
 8006684:	f7f9 ff70 	bl	8000568 <__aeabi_dmul>
 8006688:	a33d      	add	r3, pc, #244	; (adr r3, 8006780 <__kernel_cos+0x148>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 fdb5 	bl	80001fc <__adddf3>
 8006692:	4622      	mov	r2, r4
 8006694:	462b      	mov	r3, r5
 8006696:	f7f9 ff67 	bl	8000568 <__aeabi_dmul>
 800669a:	a33b      	add	r3, pc, #236	; (adr r3, 8006788 <__kernel_cos+0x150>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f7f9 fdaa 	bl	80001f8 <__aeabi_dsub>
 80066a4:	4622      	mov	r2, r4
 80066a6:	462b      	mov	r3, r5
 80066a8:	f7f9 ff5e 	bl	8000568 <__aeabi_dmul>
 80066ac:	a338      	add	r3, pc, #224	; (adr r3, 8006790 <__kernel_cos+0x158>)
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f7f9 fda3 	bl	80001fc <__adddf3>
 80066b6:	4622      	mov	r2, r4
 80066b8:	462b      	mov	r3, r5
 80066ba:	f7f9 ff55 	bl	8000568 <__aeabi_dmul>
 80066be:	a336      	add	r3, pc, #216	; (adr r3, 8006798 <__kernel_cos+0x160>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7f9 fd98 	bl	80001f8 <__aeabi_dsub>
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	f7f9 ff4c 	bl	8000568 <__aeabi_dmul>
 80066d0:	a333      	add	r3, pc, #204	; (adr r3, 80067a0 <__kernel_cos+0x168>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 fd91 	bl	80001fc <__adddf3>
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	f7f9 ff43 	bl	8000568 <__aeabi_dmul>
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f7f9 ff3f 	bl	8000568 <__aeabi_dmul>
 80066ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	4630      	mov	r0, r6
 80066f4:	4639      	mov	r1, r7
 80066f6:	f7f9 ff37 	bl	8000568 <__aeabi_dmul>
 80066fa:	460b      	mov	r3, r1
 80066fc:	4602      	mov	r2, r0
 80066fe:	4629      	mov	r1, r5
 8006700:	4620      	mov	r0, r4
 8006702:	f7f9 fd79 	bl	80001f8 <__aeabi_dsub>
 8006706:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <__kernel_cos+0x17c>)
 8006708:	4598      	cmp	r8, r3
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	dc10      	bgt.n	8006732 <__kernel_cos+0xfa>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4650      	mov	r0, sl
 8006716:	4659      	mov	r1, fp
 8006718:	f7f9 fd6e 	bl	80001f8 <__aeabi_dsub>
 800671c:	460b      	mov	r3, r1
 800671e:	4926      	ldr	r1, [pc, #152]	; (80067b8 <__kernel_cos+0x180>)
 8006720:	4602      	mov	r2, r0
 8006722:	2000      	movs	r0, #0
 8006724:	f7f9 fd68 	bl	80001f8 <__aeabi_dsub>
 8006728:	ec41 0b10 	vmov	d0, r0, r1
 800672c:	b003      	add	sp, #12
 800672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006732:	4b22      	ldr	r3, [pc, #136]	; (80067bc <__kernel_cos+0x184>)
 8006734:	4920      	ldr	r1, [pc, #128]	; (80067b8 <__kernel_cos+0x180>)
 8006736:	4598      	cmp	r8, r3
 8006738:	bfcc      	ite	gt
 800673a:	4d21      	ldrgt	r5, [pc, #132]	; (80067c0 <__kernel_cos+0x188>)
 800673c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006740:	2400      	movs	r4, #0
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	2000      	movs	r0, #0
 8006748:	f7f9 fd56 	bl	80001f8 <__aeabi_dsub>
 800674c:	4622      	mov	r2, r4
 800674e:	4680      	mov	r8, r0
 8006750:	4689      	mov	r9, r1
 8006752:	462b      	mov	r3, r5
 8006754:	4650      	mov	r0, sl
 8006756:	4659      	mov	r1, fp
 8006758:	f7f9 fd4e 	bl	80001f8 <__aeabi_dsub>
 800675c:	4632      	mov	r2, r6
 800675e:	463b      	mov	r3, r7
 8006760:	f7f9 fd4a 	bl	80001f8 <__aeabi_dsub>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4640      	mov	r0, r8
 800676a:	4649      	mov	r1, r9
 800676c:	e7da      	b.n	8006724 <__kernel_cos+0xec>
 800676e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80067a8 <__kernel_cos+0x170>
 8006772:	e7db      	b.n	800672c <__kernel_cos+0xf4>
 8006774:	f3af 8000 	nop.w
 8006778:	be8838d4 	.word	0xbe8838d4
 800677c:	bda8fae9 	.word	0xbda8fae9
 8006780:	bdb4b1c4 	.word	0xbdb4b1c4
 8006784:	3e21ee9e 	.word	0x3e21ee9e
 8006788:	809c52ad 	.word	0x809c52ad
 800678c:	3e927e4f 	.word	0x3e927e4f
 8006790:	19cb1590 	.word	0x19cb1590
 8006794:	3efa01a0 	.word	0x3efa01a0
 8006798:	16c15177 	.word	0x16c15177
 800679c:	3f56c16c 	.word	0x3f56c16c
 80067a0:	5555554c 	.word	0x5555554c
 80067a4:	3fa55555 	.word	0x3fa55555
 80067a8:	00000000 	.word	0x00000000
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	3fe00000 	.word	0x3fe00000
 80067b4:	3fd33332 	.word	0x3fd33332
 80067b8:	3ff00000 	.word	0x3ff00000
 80067bc:	3fe90000 	.word	0x3fe90000
 80067c0:	3fd20000 	.word	0x3fd20000
 80067c4:	00000000 	.word	0x00000000

080067c8 <__kernel_rem_pio2>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	ed2d 8b02 	vpush	{d8}
 80067d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80067d4:	f112 0f14 	cmn.w	r2, #20
 80067d8:	9308      	str	r3, [sp, #32]
 80067da:	9101      	str	r1, [sp, #4]
 80067dc:	4bc6      	ldr	r3, [pc, #792]	; (8006af8 <__kernel_rem_pio2+0x330>)
 80067de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80067e0:	9009      	str	r0, [sp, #36]	; 0x24
 80067e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	9b08      	ldr	r3, [sp, #32]
 80067ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ee:	bfa8      	it	ge
 80067f0:	1ed4      	subge	r4, r2, #3
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	bfb2      	itee	lt
 80067f6:	2400      	movlt	r4, #0
 80067f8:	2318      	movge	r3, #24
 80067fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80067fe:	f06f 0317 	mvn.w	r3, #23
 8006802:	fb04 3303 	mla	r3, r4, r3, r3
 8006806:	eb03 0a02 	add.w	sl, r3, r2
 800680a:	9b04      	ldr	r3, [sp, #16]
 800680c:	9a06      	ldr	r2, [sp, #24]
 800680e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006ae8 <__kernel_rem_pio2+0x320>
 8006812:	eb03 0802 	add.w	r8, r3, r2
 8006816:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006818:	1aa7      	subs	r7, r4, r2
 800681a:	ae20      	add	r6, sp, #128	; 0x80
 800681c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006820:	2500      	movs	r5, #0
 8006822:	4545      	cmp	r5, r8
 8006824:	dd18      	ble.n	8006858 <__kernel_rem_pio2+0x90>
 8006826:	9b08      	ldr	r3, [sp, #32]
 8006828:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800682c:	aa20      	add	r2, sp, #128	; 0x80
 800682e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006ae8 <__kernel_rem_pio2+0x320>
 8006832:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006836:	f1c3 0301 	rsb	r3, r3, #1
 800683a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	9a04      	ldr	r2, [sp, #16]
 8006844:	4443      	add	r3, r8
 8006846:	429a      	cmp	r2, r3
 8006848:	db2f      	blt.n	80068aa <__kernel_rem_pio2+0xe2>
 800684a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800684e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006852:	462f      	mov	r7, r5
 8006854:	2600      	movs	r6, #0
 8006856:	e01b      	b.n	8006890 <__kernel_rem_pio2+0xc8>
 8006858:	42ef      	cmn	r7, r5
 800685a:	d407      	bmi.n	800686c <__kernel_rem_pio2+0xa4>
 800685c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006860:	f7f9 fe18 	bl	8000494 <__aeabi_i2d>
 8006864:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006868:	3501      	adds	r5, #1
 800686a:	e7da      	b.n	8006822 <__kernel_rem_pio2+0x5a>
 800686c:	ec51 0b18 	vmov	r0, r1, d8
 8006870:	e7f8      	b.n	8006864 <__kernel_rem_pio2+0x9c>
 8006872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006876:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800687a:	f7f9 fe75 	bl	8000568 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006886:	f7f9 fcb9 	bl	80001fc <__adddf3>
 800688a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800688e:	3601      	adds	r6, #1
 8006890:	9b06      	ldr	r3, [sp, #24]
 8006892:	429e      	cmp	r6, r3
 8006894:	f1a7 0708 	sub.w	r7, r7, #8
 8006898:	ddeb      	ble.n	8006872 <__kernel_rem_pio2+0xaa>
 800689a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800689e:	3508      	adds	r5, #8
 80068a0:	ecab 7b02 	vstmia	fp!, {d7}
 80068a4:	f108 0801 	add.w	r8, r8, #1
 80068a8:	e7ca      	b.n	8006840 <__kernel_rem_pio2+0x78>
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	aa0c      	add	r2, sp, #48	; 0x30
 80068ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80068b4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80068b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80068ba:	9c04      	ldr	r4, [sp, #16]
 80068bc:	930a      	str	r3, [sp, #40]	; 0x28
 80068be:	ab98      	add	r3, sp, #608	; 0x260
 80068c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068c4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80068c8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80068cc:	f8cd b008 	str.w	fp, [sp, #8]
 80068d0:	4625      	mov	r5, r4
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	dc78      	bgt.n	80069c8 <__kernel_rem_pio2+0x200>
 80068d6:	ec47 6b10 	vmov	d0, r6, r7
 80068da:	4650      	mov	r0, sl
 80068dc:	f000 fe3c 	bl	8007558 <scalbn>
 80068e0:	ec57 6b10 	vmov	r6, r7, d0
 80068e4:	2200      	movs	r2, #0
 80068e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80068ea:	ee10 0a10 	vmov	r0, s0
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7f9 fe3a 	bl	8000568 <__aeabi_dmul>
 80068f4:	ec41 0b10 	vmov	d0, r0, r1
 80068f8:	f000 fd1a 	bl	8007330 <floor>
 80068fc:	4b7f      	ldr	r3, [pc, #508]	; (8006afc <__kernel_rem_pio2+0x334>)
 80068fe:	ec51 0b10 	vmov	r0, r1, d0
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fe30 	bl	8000568 <__aeabi_dmul>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	f7f9 fc72 	bl	80001f8 <__aeabi_dsub>
 8006914:	460f      	mov	r7, r1
 8006916:	4606      	mov	r6, r0
 8006918:	f7fa f8d6 	bl	8000ac8 <__aeabi_d2iz>
 800691c:	9007      	str	r0, [sp, #28]
 800691e:	f7f9 fdb9 	bl	8000494 <__aeabi_i2d>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fc65 	bl	80001f8 <__aeabi_dsub>
 800692e:	f1ba 0f00 	cmp.w	sl, #0
 8006932:	4606      	mov	r6, r0
 8006934:	460f      	mov	r7, r1
 8006936:	dd70      	ble.n	8006a1a <__kernel_rem_pio2+0x252>
 8006938:	1e62      	subs	r2, r4, #1
 800693a:	ab0c      	add	r3, sp, #48	; 0x30
 800693c:	9d07      	ldr	r5, [sp, #28]
 800693e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006942:	f1ca 0118 	rsb	r1, sl, #24
 8006946:	fa40 f301 	asr.w	r3, r0, r1
 800694a:	441d      	add	r5, r3
 800694c:	408b      	lsls	r3, r1
 800694e:	1ac0      	subs	r0, r0, r3
 8006950:	ab0c      	add	r3, sp, #48	; 0x30
 8006952:	9507      	str	r5, [sp, #28]
 8006954:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006958:	f1ca 0317 	rsb	r3, sl, #23
 800695c:	fa40 f303 	asr.w	r3, r0, r3
 8006960:	9302      	str	r3, [sp, #8]
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd66      	ble.n	8006a36 <__kernel_rem_pio2+0x26e>
 8006968:	9b07      	ldr	r3, [sp, #28]
 800696a:	2200      	movs	r2, #0
 800696c:	3301      	adds	r3, #1
 800696e:	9307      	str	r3, [sp, #28]
 8006970:	4615      	mov	r5, r2
 8006972:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006976:	4294      	cmp	r4, r2
 8006978:	f300 8099 	bgt.w	8006aae <__kernel_rem_pio2+0x2e6>
 800697c:	f1ba 0f00 	cmp.w	sl, #0
 8006980:	dd07      	ble.n	8006992 <__kernel_rem_pio2+0x1ca>
 8006982:	f1ba 0f01 	cmp.w	sl, #1
 8006986:	f000 80a5 	beq.w	8006ad4 <__kernel_rem_pio2+0x30c>
 800698a:	f1ba 0f02 	cmp.w	sl, #2
 800698e:	f000 80c1 	beq.w	8006b14 <__kernel_rem_pio2+0x34c>
 8006992:	9b02      	ldr	r3, [sp, #8]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d14e      	bne.n	8006a36 <__kernel_rem_pio2+0x26e>
 8006998:	4632      	mov	r2, r6
 800699a:	463b      	mov	r3, r7
 800699c:	4958      	ldr	r1, [pc, #352]	; (8006b00 <__kernel_rem_pio2+0x338>)
 800699e:	2000      	movs	r0, #0
 80069a0:	f7f9 fc2a 	bl	80001f8 <__aeabi_dsub>
 80069a4:	4606      	mov	r6, r0
 80069a6:	460f      	mov	r7, r1
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	d044      	beq.n	8006a36 <__kernel_rem_pio2+0x26e>
 80069ac:	4650      	mov	r0, sl
 80069ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006af0 <__kernel_rem_pio2+0x328>
 80069b2:	f000 fdd1 	bl	8007558 <scalbn>
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	ec53 2b10 	vmov	r2, r3, d0
 80069be:	f7f9 fc1b 	bl	80001f8 <__aeabi_dsub>
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	e036      	b.n	8006a36 <__kernel_rem_pio2+0x26e>
 80069c8:	4b4e      	ldr	r3, [pc, #312]	; (8006b04 <__kernel_rem_pio2+0x33c>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7f9 fdca 	bl	8000568 <__aeabi_dmul>
 80069d4:	f7fa f878 	bl	8000ac8 <__aeabi_d2iz>
 80069d8:	f7f9 fd5c 	bl	8000494 <__aeabi_i2d>
 80069dc:	4b4a      	ldr	r3, [pc, #296]	; (8006b08 <__kernel_rem_pio2+0x340>)
 80069de:	2200      	movs	r2, #0
 80069e0:	4680      	mov	r8, r0
 80069e2:	4689      	mov	r9, r1
 80069e4:	f7f9 fdc0 	bl	8000568 <__aeabi_dmul>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f7f9 fc02 	bl	80001f8 <__aeabi_dsub>
 80069f4:	f7fa f868 	bl	8000ac8 <__aeabi_d2iz>
 80069f8:	9b02      	ldr	r3, [sp, #8]
 80069fa:	f843 0b04 	str.w	r0, [r3], #4
 80069fe:	3d01      	subs	r5, #1
 8006a00:	9302      	str	r3, [sp, #8]
 8006a02:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7f9 fbf4 	bl	80001fc <__adddf3>
 8006a14:	4606      	mov	r6, r0
 8006a16:	460f      	mov	r7, r1
 8006a18:	e75b      	b.n	80068d2 <__kernel_rem_pio2+0x10a>
 8006a1a:	d105      	bne.n	8006a28 <__kernel_rem_pio2+0x260>
 8006a1c:	1e63      	subs	r3, r4, #1
 8006a1e:	aa0c      	add	r2, sp, #48	; 0x30
 8006a20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006a24:	15c3      	asrs	r3, r0, #23
 8006a26:	e79b      	b.n	8006960 <__kernel_rem_pio2+0x198>
 8006a28:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <__kernel_rem_pio2+0x344>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f7fa f822 	bl	8000a74 <__aeabi_dcmpge>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d139      	bne.n	8006aa8 <__kernel_rem_pio2+0x2e0>
 8006a34:	9002      	str	r0, [sp, #8]
 8006a36:	2200      	movs	r2, #0
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7f9 fffb 	bl	8000a38 <__aeabi_dcmpeq>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f000 80b4 	beq.w	8006bb0 <__kernel_rem_pio2+0x3e8>
 8006a48:	f104 3bff 	add.w	fp, r4, #4294967295
 8006a4c:	465b      	mov	r3, fp
 8006a4e:	2200      	movs	r2, #0
 8006a50:	9904      	ldr	r1, [sp, #16]
 8006a52:	428b      	cmp	r3, r1
 8006a54:	da65      	bge.n	8006b22 <__kernel_rem_pio2+0x35a>
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	d07b      	beq.n	8006b52 <__kernel_rem_pio2+0x38a>
 8006a5a:	ab0c      	add	r3, sp, #48	; 0x30
 8006a5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006a60:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80a0 	beq.w	8006baa <__kernel_rem_pio2+0x3e2>
 8006a6a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006af0 <__kernel_rem_pio2+0x328>
 8006a6e:	4650      	mov	r0, sl
 8006a70:	f000 fd72 	bl	8007558 <scalbn>
 8006a74:	4f23      	ldr	r7, [pc, #140]	; (8006b04 <__kernel_rem_pio2+0x33c>)
 8006a76:	ec55 4b10 	vmov	r4, r5, d0
 8006a7a:	46d8      	mov	r8, fp
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	f280 80cf 	bge.w	8006c24 <__kernel_rem_pio2+0x45c>
 8006a86:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006ae8 <__kernel_rem_pio2+0x320>
 8006a8a:	465f      	mov	r7, fp
 8006a8c:	f04f 0800 	mov.w	r8, #0
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	f2c0 80fd 	blt.w	8006c90 <__kernel_rem_pio2+0x4c8>
 8006a96:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a98:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006b10 <__kernel_rem_pio2+0x348>
 8006a9c:	ec55 4b18 	vmov	r4, r5, d8
 8006aa0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	e0e5      	b.n	8006c74 <__kernel_rem_pio2+0x4ac>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	e75c      	b.n	8006968 <__kernel_rem_pio2+0x1a0>
 8006aae:	f8db 3000 	ldr.w	r3, [fp]
 8006ab2:	b955      	cbnz	r5, 8006aca <__kernel_rem_pio2+0x302>
 8006ab4:	b123      	cbz	r3, 8006ac0 <__kernel_rem_pio2+0x2f8>
 8006ab6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006aba:	f8cb 3000 	str.w	r3, [fp]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	3201      	adds	r2, #1
 8006ac2:	f10b 0b04 	add.w	fp, fp, #4
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	e755      	b.n	8006976 <__kernel_rem_pio2+0x1ae>
 8006aca:	1acb      	subs	r3, r1, r3
 8006acc:	f8cb 3000 	str.w	r3, [fp]
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	e7f5      	b.n	8006ac0 <__kernel_rem_pio2+0x2f8>
 8006ad4:	1e62      	subs	r2, r4, #1
 8006ad6:	ab0c      	add	r3, sp, #48	; 0x30
 8006ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006adc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006ae0:	a90c      	add	r1, sp, #48	; 0x30
 8006ae2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006ae6:	e754      	b.n	8006992 <__kernel_rem_pio2+0x1ca>
	...
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	080078d0 	.word	0x080078d0
 8006afc:	40200000 	.word	0x40200000
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	3e700000 	.word	0x3e700000
 8006b08:	41700000 	.word	0x41700000
 8006b0c:	3fe00000 	.word	0x3fe00000
 8006b10:	08007890 	.word	0x08007890
 8006b14:	1e62      	subs	r2, r4, #1
 8006b16:	ab0c      	add	r3, sp, #48	; 0x30
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006b20:	e7de      	b.n	8006ae0 <__kernel_rem_pio2+0x318>
 8006b22:	a90c      	add	r1, sp, #48	; 0x30
 8006b24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	e790      	b.n	8006a50 <__kernel_rem_pio2+0x288>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d0fa      	beq.n	8006b2e <__kernel_rem_pio2+0x366>
 8006b38:	9a08      	ldr	r2, [sp, #32]
 8006b3a:	18e3      	adds	r3, r4, r3
 8006b3c:	18a6      	adds	r6, r4, r2
 8006b3e:	aa20      	add	r2, sp, #128	; 0x80
 8006b40:	1c65      	adds	r5, r4, #1
 8006b42:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006b46:	9302      	str	r3, [sp, #8]
 8006b48:	9b02      	ldr	r3, [sp, #8]
 8006b4a:	42ab      	cmp	r3, r5
 8006b4c:	da04      	bge.n	8006b58 <__kernel_rem_pio2+0x390>
 8006b4e:	461c      	mov	r4, r3
 8006b50:	e6b5      	b.n	80068be <__kernel_rem_pio2+0xf6>
 8006b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7eb      	b.n	8006b30 <__kernel_rem_pio2+0x368>
 8006b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b5e:	f7f9 fc99 	bl	8000494 <__aeabi_i2d>
 8006b62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b68:	46b3      	mov	fp, r6
 8006b6a:	461c      	mov	r4, r3
 8006b6c:	2700      	movs	r7, #0
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	f04f 0900 	mov.w	r9, #0
 8006b76:	9b06      	ldr	r3, [sp, #24]
 8006b78:	429f      	cmp	r7, r3
 8006b7a:	dd06      	ble.n	8006b8a <__kernel_rem_pio2+0x3c2>
 8006b7c:	ab70      	add	r3, sp, #448	; 0x1c0
 8006b7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b82:	e9c3 8900 	strd	r8, r9, [r3]
 8006b86:	3501      	adds	r5, #1
 8006b88:	e7de      	b.n	8006b48 <__kernel_rem_pio2+0x380>
 8006b8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006b8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006b92:	f7f9 fce9 	bl	8000568 <__aeabi_dmul>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fb2d 	bl	80001fc <__adddf3>
 8006ba2:	3701      	adds	r7, #1
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	e7e5      	b.n	8006b76 <__kernel_rem_pio2+0x3ae>
 8006baa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bae:	e754      	b.n	8006a5a <__kernel_rem_pio2+0x292>
 8006bb0:	ec47 6b10 	vmov	d0, r6, r7
 8006bb4:	f1ca 0000 	rsb	r0, sl, #0
 8006bb8:	f000 fcce 	bl	8007558 <scalbn>
 8006bbc:	ec57 6b10 	vmov	r6, r7, d0
 8006bc0:	4b9f      	ldr	r3, [pc, #636]	; (8006e40 <__kernel_rem_pio2+0x678>)
 8006bc2:	ee10 0a10 	vmov	r0, s0
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 ff53 	bl	8000a74 <__aeabi_dcmpge>
 8006bce:	b300      	cbz	r0, 8006c12 <__kernel_rem_pio2+0x44a>
 8006bd0:	4b9c      	ldr	r3, [pc, #624]	; (8006e44 <__kernel_rem_pio2+0x67c>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fcc6 	bl	8000568 <__aeabi_dmul>
 8006bdc:	f7f9 ff74 	bl	8000ac8 <__aeabi_d2iz>
 8006be0:	4605      	mov	r5, r0
 8006be2:	f7f9 fc57 	bl	8000494 <__aeabi_i2d>
 8006be6:	4b96      	ldr	r3, [pc, #600]	; (8006e40 <__kernel_rem_pio2+0x678>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	f7f9 fcbd 	bl	8000568 <__aeabi_dmul>
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7f9 faff 	bl	80001f8 <__aeabi_dsub>
 8006bfa:	f7f9 ff65 	bl	8000ac8 <__aeabi_d2iz>
 8006bfe:	f104 0b01 	add.w	fp, r4, #1
 8006c02:	ab0c      	add	r3, sp, #48	; 0x30
 8006c04:	f10a 0a18 	add.w	sl, sl, #24
 8006c08:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c0c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006c10:	e72b      	b.n	8006a6a <__kernel_rem_pio2+0x2a2>
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7f9 ff57 	bl	8000ac8 <__aeabi_d2iz>
 8006c1a:	ab0c      	add	r3, sp, #48	; 0x30
 8006c1c:	46a3      	mov	fp, r4
 8006c1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c22:	e722      	b.n	8006a6a <__kernel_rem_pio2+0x2a2>
 8006c24:	ab70      	add	r3, sp, #448	; 0x1c0
 8006c26:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006c2a:	ab0c      	add	r3, sp, #48	; 0x30
 8006c2c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006c30:	f7f9 fc30 	bl	8000494 <__aeabi_i2d>
 8006c34:	4622      	mov	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	f7f9 fc96 	bl	8000568 <__aeabi_dmul>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	e9c9 0100 	strd	r0, r1, [r9]
 8006c42:	463b      	mov	r3, r7
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 fc8e 	bl	8000568 <__aeabi_dmul>
 8006c4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	e713      	b.n	8006a7e <__kernel_rem_pio2+0x2b6>
 8006c56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006c5a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006c5e:	f7f9 fc83 	bl	8000568 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 fac7 	bl	80001fc <__adddf3>
 8006c6e:	3601      	adds	r6, #1
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	429e      	cmp	r6, r3
 8006c78:	dc01      	bgt.n	8006c7e <__kernel_rem_pio2+0x4b6>
 8006c7a:	45b0      	cmp	r8, r6
 8006c7c:	daeb      	bge.n	8006c56 <__kernel_rem_pio2+0x48e>
 8006c7e:	ab48      	add	r3, sp, #288	; 0x120
 8006c80:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c84:	e9c3 4500 	strd	r4, r5, [r3]
 8006c88:	3f01      	subs	r7, #1
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	e6ff      	b.n	8006a90 <__kernel_rem_pio2+0x2c8>
 8006c90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	dc0b      	bgt.n	8006cae <__kernel_rem_pio2+0x4e6>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dc6e      	bgt.n	8006d78 <__kernel_rem_pio2+0x5b0>
 8006c9a:	d045      	beq.n	8006d28 <__kernel_rem_pio2+0x560>
 8006c9c:	9b07      	ldr	r3, [sp, #28]
 8006c9e:	f003 0007 	and.w	r0, r3, #7
 8006ca2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006ca6:	ecbd 8b02 	vpop	{d8}
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d1f3      	bne.n	8006c9c <__kernel_rem_pio2+0x4d4>
 8006cb4:	ab48      	add	r3, sp, #288	; 0x120
 8006cb6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8006cba:	46d0      	mov	r8, sl
 8006cbc:	46d9      	mov	r9, fp
 8006cbe:	f1b9 0f00 	cmp.w	r9, #0
 8006cc2:	f1a8 0808 	sub.w	r8, r8, #8
 8006cc6:	dc64      	bgt.n	8006d92 <__kernel_rem_pio2+0x5ca>
 8006cc8:	465c      	mov	r4, fp
 8006cca:	2c01      	cmp	r4, #1
 8006ccc:	f1aa 0a08 	sub.w	sl, sl, #8
 8006cd0:	dc7e      	bgt.n	8006dd0 <__kernel_rem_pio2+0x608>
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	f1bb 0f01 	cmp.w	fp, #1
 8006cda:	f300 8097 	bgt.w	8006e0c <__kernel_rem_pio2+0x644>
 8006cde:	9b02      	ldr	r3, [sp, #8]
 8006ce0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006ce4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 8099 	bne.w	8006e20 <__kernel_rem_pio2+0x658>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	e9c3 5600 	strd	r5, r6, [r3]
 8006cf4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006cf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006cfc:	e7ce      	b.n	8006c9c <__kernel_rem_pio2+0x4d4>
 8006cfe:	ab48      	add	r3, sp, #288	; 0x120
 8006d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fa78 	bl	80001fc <__adddf3>
 8006d0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d10:	f1bb 0f00 	cmp.w	fp, #0
 8006d14:	daf3      	bge.n	8006cfe <__kernel_rem_pio2+0x536>
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	b113      	cbz	r3, 8006d20 <__kernel_rem_pio2+0x558>
 8006d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d1e:	4619      	mov	r1, r3
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	e9c3 0100 	strd	r0, r1, [r3]
 8006d26:	e7b9      	b.n	8006c9c <__kernel_rem_pio2+0x4d4>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	e7f0      	b.n	8006d10 <__kernel_rem_pio2+0x548>
 8006d2e:	ab48      	add	r3, sp, #288	; 0x120
 8006d30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fa60 	bl	80001fc <__adddf3>
 8006d3c:	3c01      	subs	r4, #1
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	daf5      	bge.n	8006d2e <__kernel_rem_pio2+0x566>
 8006d42:	9b02      	ldr	r3, [sp, #8]
 8006d44:	b1e3      	cbz	r3, 8006d80 <__kernel_rem_pio2+0x5b8>
 8006d46:	4602      	mov	r2, r0
 8006d48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d4c:	9c01      	ldr	r4, [sp, #4]
 8006d4e:	e9c4 2300 	strd	r2, r3, [r4]
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006d5a:	f7f9 fa4d 	bl	80001f8 <__aeabi_dsub>
 8006d5e:	ad4a      	add	r5, sp, #296	; 0x128
 8006d60:	2401      	movs	r4, #1
 8006d62:	45a3      	cmp	fp, r4
 8006d64:	da0f      	bge.n	8006d86 <__kernel_rem_pio2+0x5be>
 8006d66:	9b02      	ldr	r3, [sp, #8]
 8006d68:	b113      	cbz	r3, 8006d70 <__kernel_rem_pio2+0x5a8>
 8006d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d6e:	4619      	mov	r1, r3
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006d76:	e791      	b.n	8006c9c <__kernel_rem_pio2+0x4d4>
 8006d78:	465c      	mov	r4, fp
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	e7de      	b.n	8006d3e <__kernel_rem_pio2+0x576>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	e7e2      	b.n	8006d4c <__kernel_rem_pio2+0x584>
 8006d86:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006d8a:	f7f9 fa37 	bl	80001fc <__adddf3>
 8006d8e:	3401      	adds	r4, #1
 8006d90:	e7e7      	b.n	8006d62 <__kernel_rem_pio2+0x59a>
 8006d92:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006d96:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	463b      	mov	r3, r7
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fa2b 	bl	80001fc <__adddf3>
 8006da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fa21 	bl	80001f8 <__aeabi_dsub>
 8006db6:	4632      	mov	r2, r6
 8006db8:	463b      	mov	r3, r7
 8006dba:	f7f9 fa1f 	bl	80001fc <__adddf3>
 8006dbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006dc2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006dc6:	ed88 7b00 	vstr	d7, [r8]
 8006dca:	f109 39ff 	add.w	r9, r9, #4294967295
 8006dce:	e776      	b.n	8006cbe <__kernel_rem_pio2+0x4f6>
 8006dd0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006dd4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4632      	mov	r2, r6
 8006ddc:	463b      	mov	r3, r7
 8006dde:	4649      	mov	r1, r9
 8006de0:	f7f9 fa0c 	bl	80001fc <__adddf3>
 8006de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 fa02 	bl	80001f8 <__aeabi_dsub>
 8006df4:	4632      	mov	r2, r6
 8006df6:	463b      	mov	r3, r7
 8006df8:	f7f9 fa00 	bl	80001fc <__adddf3>
 8006dfc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006e00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e04:	ed8a 7b00 	vstr	d7, [sl]
 8006e08:	3c01      	subs	r4, #1
 8006e0a:	e75e      	b.n	8006cca <__kernel_rem_pio2+0x502>
 8006e0c:	ab48      	add	r3, sp, #288	; 0x120
 8006e0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 f9f1 	bl	80001fc <__adddf3>
 8006e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e1e:	e75a      	b.n	8006cd6 <__kernel_rem_pio2+0x50e>
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	9a01      	ldr	r2, [sp, #4]
 8006e24:	601d      	str	r5, [r3, #0]
 8006e26:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006e2a:	605c      	str	r4, [r3, #4]
 8006e2c:	609f      	str	r7, [r3, #8]
 8006e2e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006e32:	60d3      	str	r3, [r2, #12]
 8006e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e38:	6110      	str	r0, [r2, #16]
 8006e3a:	6153      	str	r3, [r2, #20]
 8006e3c:	e72e      	b.n	8006c9c <__kernel_rem_pio2+0x4d4>
 8006e3e:	bf00      	nop
 8006e40:	41700000 	.word	0x41700000
 8006e44:	3e700000 	.word	0x3e700000

08006e48 <__kernel_sin>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	ed2d 8b04 	vpush	{d8-d9}
 8006e50:	eeb0 8a41 	vmov.f32	s16, s2
 8006e54:	eef0 8a61 	vmov.f32	s17, s3
 8006e58:	ec55 4b10 	vmov	r4, r5, d0
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006e66:	9001      	str	r0, [sp, #4]
 8006e68:	da06      	bge.n	8006e78 <__kernel_sin+0x30>
 8006e6a:	ee10 0a10 	vmov	r0, s0
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fe2a 	bl	8000ac8 <__aeabi_d2iz>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d051      	beq.n	8006f1c <__kernel_sin+0xd4>
 8006e78:	4622      	mov	r2, r4
 8006e7a:	462b      	mov	r3, r5
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	f7f9 fb72 	bl	8000568 <__aeabi_dmul>
 8006e84:	4682      	mov	sl, r0
 8006e86:	468b      	mov	fp, r1
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fb6a 	bl	8000568 <__aeabi_dmul>
 8006e94:	a341      	add	r3, pc, #260	; (adr r3, 8006f9c <__kernel_sin+0x154>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	4689      	mov	r9, r1
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	f7f9 fb61 	bl	8000568 <__aeabi_dmul>
 8006ea6:	a33f      	add	r3, pc, #252	; (adr r3, 8006fa4 <__kernel_sin+0x15c>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 f9a4 	bl	80001f8 <__aeabi_dsub>
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	465b      	mov	r3, fp
 8006eb4:	f7f9 fb58 	bl	8000568 <__aeabi_dmul>
 8006eb8:	a33c      	add	r3, pc, #240	; (adr r3, 8006fac <__kernel_sin+0x164>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 f99d 	bl	80001fc <__adddf3>
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	465b      	mov	r3, fp
 8006ec6:	f7f9 fb4f 	bl	8000568 <__aeabi_dmul>
 8006eca:	a33a      	add	r3, pc, #232	; (adr r3, 8006fb4 <__kernel_sin+0x16c>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 f992 	bl	80001f8 <__aeabi_dsub>
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	465b      	mov	r3, fp
 8006ed8:	f7f9 fb46 	bl	8000568 <__aeabi_dmul>
 8006edc:	a337      	add	r3, pc, #220	; (adr r3, 8006fbc <__kernel_sin+0x174>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f7f9 f98b 	bl	80001fc <__adddf3>
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	4606      	mov	r6, r0
 8006eea:	460f      	mov	r7, r1
 8006eec:	b9eb      	cbnz	r3, 8006f2a <__kernel_sin+0xe2>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 fb37 	bl	8000568 <__aeabi_dmul>
 8006efa:	a325      	add	r3, pc, #148	; (adr r3, 8006f90 <__kernel_sin+0x148>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 f97a 	bl	80001f8 <__aeabi_dsub>
 8006f04:	4642      	mov	r2, r8
 8006f06:	464b      	mov	r3, r9
 8006f08:	f7f9 fb2e 	bl	8000568 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 f972 	bl	80001fc <__adddf3>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	ec45 4b10 	vmov	d0, r4, r5
 8006f20:	b003      	add	sp, #12
 8006f22:	ecbd 8b04 	vpop	{d8-d9}
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <__kernel_sin+0x150>)
 8006f2c:	ec51 0b18 	vmov	r0, r1, d8
 8006f30:	2200      	movs	r2, #0
 8006f32:	f7f9 fb19 	bl	8000568 <__aeabi_dmul>
 8006f36:	4632      	mov	r2, r6
 8006f38:	ec41 0b19 	vmov	d9, r0, r1
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 fb11 	bl	8000568 <__aeabi_dmul>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	ec51 0b19 	vmov	r0, r1, d9
 8006f4e:	f7f9 f953 	bl	80001f8 <__aeabi_dsub>
 8006f52:	4652      	mov	r2, sl
 8006f54:	465b      	mov	r3, fp
 8006f56:	f7f9 fb07 	bl	8000568 <__aeabi_dmul>
 8006f5a:	ec53 2b18 	vmov	r2, r3, d8
 8006f5e:	f7f9 f94b 	bl	80001f8 <__aeabi_dsub>
 8006f62:	a30b      	add	r3, pc, #44	; (adr r3, 8006f90 <__kernel_sin+0x148>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	4606      	mov	r6, r0
 8006f6a:	460f      	mov	r7, r1
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f7f9 fafa 	bl	8000568 <__aeabi_dmul>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 f93e 	bl	80001fc <__adddf3>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7f9 f936 	bl	80001f8 <__aeabi_dsub>
 8006f8c:	e7c4      	b.n	8006f18 <__kernel_sin+0xd0>
 8006f8e:	bf00      	nop
 8006f90:	55555549 	.word	0x55555549
 8006f94:	3fc55555 	.word	0x3fc55555
 8006f98:	3fe00000 	.word	0x3fe00000
 8006f9c:	5acfd57c 	.word	0x5acfd57c
 8006fa0:	3de5d93a 	.word	0x3de5d93a
 8006fa4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006fa8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006fac:	57b1fe7d 	.word	0x57b1fe7d
 8006fb0:	3ec71de3 	.word	0x3ec71de3
 8006fb4:	19c161d5 	.word	0x19c161d5
 8006fb8:	3f2a01a0 	.word	0x3f2a01a0
 8006fbc:	1110f8a6 	.word	0x1110f8a6
 8006fc0:	3f811111 	.word	0x3f811111
 8006fc4:	00000000 	.word	0x00000000

08006fc8 <atan>:
 8006fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	ec55 4b10 	vmov	r4, r5, d0
 8006fd0:	4bc3      	ldr	r3, [pc, #780]	; (80072e0 <atan+0x318>)
 8006fd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fd6:	429e      	cmp	r6, r3
 8006fd8:	46ab      	mov	fp, r5
 8006fda:	dd18      	ble.n	800700e <atan+0x46>
 8006fdc:	4bc1      	ldr	r3, [pc, #772]	; (80072e4 <atan+0x31c>)
 8006fde:	429e      	cmp	r6, r3
 8006fe0:	dc01      	bgt.n	8006fe6 <atan+0x1e>
 8006fe2:	d109      	bne.n	8006ff8 <atan+0x30>
 8006fe4:	b144      	cbz	r4, 8006ff8 <atan+0x30>
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	462b      	mov	r3, r5
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 f905 	bl	80001fc <__adddf3>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	460d      	mov	r5, r1
 8006ff6:	e006      	b.n	8007006 <atan+0x3e>
 8006ff8:	f1bb 0f00 	cmp.w	fp, #0
 8006ffc:	f300 8131 	bgt.w	8007262 <atan+0x29a>
 8007000:	a59b      	add	r5, pc, #620	; (adr r5, 8007270 <atan+0x2a8>)
 8007002:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007006:	ec45 4b10 	vmov	d0, r4, r5
 800700a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	4bb6      	ldr	r3, [pc, #728]	; (80072e8 <atan+0x320>)
 8007010:	429e      	cmp	r6, r3
 8007012:	dc14      	bgt.n	800703e <atan+0x76>
 8007014:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007018:	429e      	cmp	r6, r3
 800701a:	dc0d      	bgt.n	8007038 <atan+0x70>
 800701c:	a396      	add	r3, pc, #600	; (adr r3, 8007278 <atan+0x2b0>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	ee10 0a10 	vmov	r0, s0
 8007026:	4629      	mov	r1, r5
 8007028:	f7f9 f8e8 	bl	80001fc <__adddf3>
 800702c:	4baf      	ldr	r3, [pc, #700]	; (80072ec <atan+0x324>)
 800702e:	2200      	movs	r2, #0
 8007030:	f7f9 fd2a 	bl	8000a88 <__aeabi_dcmpgt>
 8007034:	2800      	cmp	r0, #0
 8007036:	d1e6      	bne.n	8007006 <atan+0x3e>
 8007038:	f04f 3aff 	mov.w	sl, #4294967295
 800703c:	e02b      	b.n	8007096 <atan+0xce>
 800703e:	f000 f963 	bl	8007308 <fabs>
 8007042:	4bab      	ldr	r3, [pc, #684]	; (80072f0 <atan+0x328>)
 8007044:	429e      	cmp	r6, r3
 8007046:	ec55 4b10 	vmov	r4, r5, d0
 800704a:	f300 80bf 	bgt.w	80071cc <atan+0x204>
 800704e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007052:	429e      	cmp	r6, r3
 8007054:	f300 80a0 	bgt.w	8007198 <atan+0x1d0>
 8007058:	ee10 2a10 	vmov	r2, s0
 800705c:	ee10 0a10 	vmov	r0, s0
 8007060:	462b      	mov	r3, r5
 8007062:	4629      	mov	r1, r5
 8007064:	f7f9 f8ca 	bl	80001fc <__adddf3>
 8007068:	4ba0      	ldr	r3, [pc, #640]	; (80072ec <atan+0x324>)
 800706a:	2200      	movs	r2, #0
 800706c:	f7f9 f8c4 	bl	80001f8 <__aeabi_dsub>
 8007070:	2200      	movs	r2, #0
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800707a:	4620      	mov	r0, r4
 800707c:	4629      	mov	r1, r5
 800707e:	f7f9 f8bd 	bl	80001fc <__adddf3>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4630      	mov	r0, r6
 8007088:	4639      	mov	r1, r7
 800708a:	f7f9 fb97 	bl	80007bc <__aeabi_ddiv>
 800708e:	f04f 0a00 	mov.w	sl, #0
 8007092:	4604      	mov	r4, r0
 8007094:	460d      	mov	r5, r1
 8007096:	4622      	mov	r2, r4
 8007098:	462b      	mov	r3, r5
 800709a:	4620      	mov	r0, r4
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 fa63 	bl	8000568 <__aeabi_dmul>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4680      	mov	r8, r0
 80070a8:	4689      	mov	r9, r1
 80070aa:	f7f9 fa5d 	bl	8000568 <__aeabi_dmul>
 80070ae:	a374      	add	r3, pc, #464	; (adr r3, 8007280 <atan+0x2b8>)
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	f7f9 fa56 	bl	8000568 <__aeabi_dmul>
 80070bc:	a372      	add	r3, pc, #456	; (adr r3, 8007288 <atan+0x2c0>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f7f9 f89b 	bl	80001fc <__adddf3>
 80070c6:	4632      	mov	r2, r6
 80070c8:	463b      	mov	r3, r7
 80070ca:	f7f9 fa4d 	bl	8000568 <__aeabi_dmul>
 80070ce:	a370      	add	r3, pc, #448	; (adr r3, 8007290 <atan+0x2c8>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 f892 	bl	80001fc <__adddf3>
 80070d8:	4632      	mov	r2, r6
 80070da:	463b      	mov	r3, r7
 80070dc:	f7f9 fa44 	bl	8000568 <__aeabi_dmul>
 80070e0:	a36d      	add	r3, pc, #436	; (adr r3, 8007298 <atan+0x2d0>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 f889 	bl	80001fc <__adddf3>
 80070ea:	4632      	mov	r2, r6
 80070ec:	463b      	mov	r3, r7
 80070ee:	f7f9 fa3b 	bl	8000568 <__aeabi_dmul>
 80070f2:	a36b      	add	r3, pc, #428	; (adr r3, 80072a0 <atan+0x2d8>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 f880 	bl	80001fc <__adddf3>
 80070fc:	4632      	mov	r2, r6
 80070fe:	463b      	mov	r3, r7
 8007100:	f7f9 fa32 	bl	8000568 <__aeabi_dmul>
 8007104:	a368      	add	r3, pc, #416	; (adr r3, 80072a8 <atan+0x2e0>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 f877 	bl	80001fc <__adddf3>
 800710e:	4642      	mov	r2, r8
 8007110:	464b      	mov	r3, r9
 8007112:	f7f9 fa29 	bl	8000568 <__aeabi_dmul>
 8007116:	a366      	add	r3, pc, #408	; (adr r3, 80072b0 <atan+0x2e8>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	4680      	mov	r8, r0
 800711e:	4689      	mov	r9, r1
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 fa20 	bl	8000568 <__aeabi_dmul>
 8007128:	a363      	add	r3, pc, #396	; (adr r3, 80072b8 <atan+0x2f0>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 f863 	bl	80001f8 <__aeabi_dsub>
 8007132:	4632      	mov	r2, r6
 8007134:	463b      	mov	r3, r7
 8007136:	f7f9 fa17 	bl	8000568 <__aeabi_dmul>
 800713a:	a361      	add	r3, pc, #388	; (adr r3, 80072c0 <atan+0x2f8>)
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f7f9 f85a 	bl	80001f8 <__aeabi_dsub>
 8007144:	4632      	mov	r2, r6
 8007146:	463b      	mov	r3, r7
 8007148:	f7f9 fa0e 	bl	8000568 <__aeabi_dmul>
 800714c:	a35e      	add	r3, pc, #376	; (adr r3, 80072c8 <atan+0x300>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 f851 	bl	80001f8 <__aeabi_dsub>
 8007156:	4632      	mov	r2, r6
 8007158:	463b      	mov	r3, r7
 800715a:	f7f9 fa05 	bl	8000568 <__aeabi_dmul>
 800715e:	a35c      	add	r3, pc, #368	; (adr r3, 80072d0 <atan+0x308>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 f848 	bl	80001f8 <__aeabi_dsub>
 8007168:	4632      	mov	r2, r6
 800716a:	463b      	mov	r3, r7
 800716c:	f7f9 f9fc 	bl	8000568 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4640      	mov	r0, r8
 8007176:	4649      	mov	r1, r9
 8007178:	f7f9 f840 	bl	80001fc <__adddf3>
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	f7f9 f9f2 	bl	8000568 <__aeabi_dmul>
 8007184:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	d14b      	bne.n	8007226 <atan+0x25e>
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 f831 	bl	80001f8 <__aeabi_dsub>
 8007196:	e72c      	b.n	8006ff2 <atan+0x2a>
 8007198:	ee10 0a10 	vmov	r0, s0
 800719c:	4b53      	ldr	r3, [pc, #332]	; (80072ec <atan+0x324>)
 800719e:	2200      	movs	r2, #0
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 f829 	bl	80001f8 <__aeabi_dsub>
 80071a6:	4b51      	ldr	r3, [pc, #324]	; (80072ec <atan+0x324>)
 80071a8:	4606      	mov	r6, r0
 80071aa:	460f      	mov	r7, r1
 80071ac:	2200      	movs	r2, #0
 80071ae:	4620      	mov	r0, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 f823 	bl	80001fc <__adddf3>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4630      	mov	r0, r6
 80071bc:	4639      	mov	r1, r7
 80071be:	f7f9 fafd 	bl	80007bc <__aeabi_ddiv>
 80071c2:	f04f 0a01 	mov.w	sl, #1
 80071c6:	4604      	mov	r4, r0
 80071c8:	460d      	mov	r5, r1
 80071ca:	e764      	b.n	8007096 <atan+0xce>
 80071cc:	4b49      	ldr	r3, [pc, #292]	; (80072f4 <atan+0x32c>)
 80071ce:	429e      	cmp	r6, r3
 80071d0:	da1d      	bge.n	800720e <atan+0x246>
 80071d2:	ee10 0a10 	vmov	r0, s0
 80071d6:	4b48      	ldr	r3, [pc, #288]	; (80072f8 <atan+0x330>)
 80071d8:	2200      	movs	r2, #0
 80071da:	4629      	mov	r1, r5
 80071dc:	f7f9 f80c 	bl	80001f8 <__aeabi_dsub>
 80071e0:	4b45      	ldr	r3, [pc, #276]	; (80072f8 <atan+0x330>)
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	2200      	movs	r2, #0
 80071e8:	4620      	mov	r0, r4
 80071ea:	4629      	mov	r1, r5
 80071ec:	f7f9 f9bc 	bl	8000568 <__aeabi_dmul>
 80071f0:	4b3e      	ldr	r3, [pc, #248]	; (80072ec <atan+0x324>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	f7f9 f802 	bl	80001fc <__adddf3>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4630      	mov	r0, r6
 80071fe:	4639      	mov	r1, r7
 8007200:	f7f9 fadc 	bl	80007bc <__aeabi_ddiv>
 8007204:	f04f 0a02 	mov.w	sl, #2
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
 800720c:	e743      	b.n	8007096 <atan+0xce>
 800720e:	462b      	mov	r3, r5
 8007210:	ee10 2a10 	vmov	r2, s0
 8007214:	4939      	ldr	r1, [pc, #228]	; (80072fc <atan+0x334>)
 8007216:	2000      	movs	r0, #0
 8007218:	f7f9 fad0 	bl	80007bc <__aeabi_ddiv>
 800721c:	f04f 0a03 	mov.w	sl, #3
 8007220:	4604      	mov	r4, r0
 8007222:	460d      	mov	r5, r1
 8007224:	e737      	b.n	8007096 <atan+0xce>
 8007226:	4b36      	ldr	r3, [pc, #216]	; (8007300 <atan+0x338>)
 8007228:	4e36      	ldr	r6, [pc, #216]	; (8007304 <atan+0x33c>)
 800722a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800722e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007232:	e9da 2300 	ldrd	r2, r3, [sl]
 8007236:	f7f8 ffdf 	bl	80001f8 <__aeabi_dsub>
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	f7f8 ffdb 	bl	80001f8 <__aeabi_dsub>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	e9d6 0100 	ldrd	r0, r1, [r6]
 800724a:	f7f8 ffd5 	bl	80001f8 <__aeabi_dsub>
 800724e:	f1bb 0f00 	cmp.w	fp, #0
 8007252:	4604      	mov	r4, r0
 8007254:	460d      	mov	r5, r1
 8007256:	f6bf aed6 	bge.w	8007006 <atan+0x3e>
 800725a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800725e:	461d      	mov	r5, r3
 8007260:	e6d1      	b.n	8007006 <atan+0x3e>
 8007262:	a51d      	add	r5, pc, #116	; (adr r5, 80072d8 <atan+0x310>)
 8007264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007268:	e6cd      	b.n	8007006 <atan+0x3e>
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w
 8007270:	54442d18 	.word	0x54442d18
 8007274:	bff921fb 	.word	0xbff921fb
 8007278:	8800759c 	.word	0x8800759c
 800727c:	7e37e43c 	.word	0x7e37e43c
 8007280:	e322da11 	.word	0xe322da11
 8007284:	3f90ad3a 	.word	0x3f90ad3a
 8007288:	24760deb 	.word	0x24760deb
 800728c:	3fa97b4b 	.word	0x3fa97b4b
 8007290:	a0d03d51 	.word	0xa0d03d51
 8007294:	3fb10d66 	.word	0x3fb10d66
 8007298:	c54c206e 	.word	0xc54c206e
 800729c:	3fb745cd 	.word	0x3fb745cd
 80072a0:	920083ff 	.word	0x920083ff
 80072a4:	3fc24924 	.word	0x3fc24924
 80072a8:	5555550d 	.word	0x5555550d
 80072ac:	3fd55555 	.word	0x3fd55555
 80072b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80072b4:	bfa2b444 	.word	0xbfa2b444
 80072b8:	52defd9a 	.word	0x52defd9a
 80072bc:	3fadde2d 	.word	0x3fadde2d
 80072c0:	af749a6d 	.word	0xaf749a6d
 80072c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80072c8:	fe231671 	.word	0xfe231671
 80072cc:	3fbc71c6 	.word	0x3fbc71c6
 80072d0:	9998ebc4 	.word	0x9998ebc4
 80072d4:	3fc99999 	.word	0x3fc99999
 80072d8:	54442d18 	.word	0x54442d18
 80072dc:	3ff921fb 	.word	0x3ff921fb
 80072e0:	440fffff 	.word	0x440fffff
 80072e4:	7ff00000 	.word	0x7ff00000
 80072e8:	3fdbffff 	.word	0x3fdbffff
 80072ec:	3ff00000 	.word	0x3ff00000
 80072f0:	3ff2ffff 	.word	0x3ff2ffff
 80072f4:	40038000 	.word	0x40038000
 80072f8:	3ff80000 	.word	0x3ff80000
 80072fc:	bff00000 	.word	0xbff00000
 8007300:	08007900 	.word	0x08007900
 8007304:	080078e0 	.word	0x080078e0

08007308 <fabs>:
 8007308:	ec51 0b10 	vmov	r0, r1, d0
 800730c:	ee10 2a10 	vmov	r2, s0
 8007310:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007314:	ec43 2b10 	vmov	d0, r2, r3
 8007318:	4770      	bx	lr

0800731a <finite>:
 800731a:	b082      	sub	sp, #8
 800731c:	ed8d 0b00 	vstr	d0, [sp]
 8007320:	9801      	ldr	r0, [sp, #4]
 8007322:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007326:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800732a:	0fc0      	lsrs	r0, r0, #31
 800732c:	b002      	add	sp, #8
 800732e:	4770      	bx	lr

08007330 <floor>:
 8007330:	ec51 0b10 	vmov	r0, r1, d0
 8007334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007338:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800733c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007340:	2e13      	cmp	r6, #19
 8007342:	ee10 5a10 	vmov	r5, s0
 8007346:	ee10 8a10 	vmov	r8, s0
 800734a:	460c      	mov	r4, r1
 800734c:	dc32      	bgt.n	80073b4 <floor+0x84>
 800734e:	2e00      	cmp	r6, #0
 8007350:	da14      	bge.n	800737c <floor+0x4c>
 8007352:	a333      	add	r3, pc, #204	; (adr r3, 8007420 <floor+0xf0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f7f8 ff50 	bl	80001fc <__adddf3>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	f7f9 fb92 	bl	8000a88 <__aeabi_dcmpgt>
 8007364:	b138      	cbz	r0, 8007376 <floor+0x46>
 8007366:	2c00      	cmp	r4, #0
 8007368:	da57      	bge.n	800741a <floor+0xea>
 800736a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800736e:	431d      	orrs	r5, r3
 8007370:	d001      	beq.n	8007376 <floor+0x46>
 8007372:	4c2d      	ldr	r4, [pc, #180]	; (8007428 <floor+0xf8>)
 8007374:	2500      	movs	r5, #0
 8007376:	4621      	mov	r1, r4
 8007378:	4628      	mov	r0, r5
 800737a:	e025      	b.n	80073c8 <floor+0x98>
 800737c:	4f2b      	ldr	r7, [pc, #172]	; (800742c <floor+0xfc>)
 800737e:	4137      	asrs	r7, r6
 8007380:	ea01 0307 	and.w	r3, r1, r7
 8007384:	4303      	orrs	r3, r0
 8007386:	d01f      	beq.n	80073c8 <floor+0x98>
 8007388:	a325      	add	r3, pc, #148	; (adr r3, 8007420 <floor+0xf0>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f8 ff35 	bl	80001fc <__adddf3>
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	f7f9 fb77 	bl	8000a88 <__aeabi_dcmpgt>
 800739a:	2800      	cmp	r0, #0
 800739c:	d0eb      	beq.n	8007376 <floor+0x46>
 800739e:	2c00      	cmp	r4, #0
 80073a0:	bfbe      	ittt	lt
 80073a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80073a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80073aa:	19a4      	addlt	r4, r4, r6
 80073ac:	ea24 0407 	bic.w	r4, r4, r7
 80073b0:	2500      	movs	r5, #0
 80073b2:	e7e0      	b.n	8007376 <floor+0x46>
 80073b4:	2e33      	cmp	r6, #51	; 0x33
 80073b6:	dd0b      	ble.n	80073d0 <floor+0xa0>
 80073b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80073bc:	d104      	bne.n	80073c8 <floor+0x98>
 80073be:	ee10 2a10 	vmov	r2, s0
 80073c2:	460b      	mov	r3, r1
 80073c4:	f7f8 ff1a 	bl	80001fc <__adddf3>
 80073c8:	ec41 0b10 	vmov	d0, r0, r1
 80073cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	fa23 f707 	lsr.w	r7, r3, r7
 80073dc:	4207      	tst	r7, r0
 80073de:	d0f3      	beq.n	80073c8 <floor+0x98>
 80073e0:	a30f      	add	r3, pc, #60	; (adr r3, 8007420 <floor+0xf0>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f7f8 ff09 	bl	80001fc <__adddf3>
 80073ea:	2200      	movs	r2, #0
 80073ec:	2300      	movs	r3, #0
 80073ee:	f7f9 fb4b 	bl	8000a88 <__aeabi_dcmpgt>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0bf      	beq.n	8007376 <floor+0x46>
 80073f6:	2c00      	cmp	r4, #0
 80073f8:	da02      	bge.n	8007400 <floor+0xd0>
 80073fa:	2e14      	cmp	r6, #20
 80073fc:	d103      	bne.n	8007406 <floor+0xd6>
 80073fe:	3401      	adds	r4, #1
 8007400:	ea25 0507 	bic.w	r5, r5, r7
 8007404:	e7b7      	b.n	8007376 <floor+0x46>
 8007406:	2301      	movs	r3, #1
 8007408:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800740c:	fa03 f606 	lsl.w	r6, r3, r6
 8007410:	4435      	add	r5, r6
 8007412:	4545      	cmp	r5, r8
 8007414:	bf38      	it	cc
 8007416:	18e4      	addcc	r4, r4, r3
 8007418:	e7f2      	b.n	8007400 <floor+0xd0>
 800741a:	2500      	movs	r5, #0
 800741c:	462c      	mov	r4, r5
 800741e:	e7aa      	b.n	8007376 <floor+0x46>
 8007420:	8800759c 	.word	0x8800759c
 8007424:	7e37e43c 	.word	0x7e37e43c
 8007428:	bff00000 	.word	0xbff00000
 800742c:	000fffff 	.word	0x000fffff

08007430 <nan>:
 8007430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007438 <nan+0x8>
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	00000000 	.word	0x00000000
 800743c:	7ff80000 	.word	0x7ff80000

08007440 <rint>:
 8007440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007442:	ec51 0b10 	vmov	r0, r1, d0
 8007446:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800744a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800744e:	2e13      	cmp	r6, #19
 8007450:	ee10 4a10 	vmov	r4, s0
 8007454:	460b      	mov	r3, r1
 8007456:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800745a:	dc58      	bgt.n	800750e <rint+0xce>
 800745c:	2e00      	cmp	r6, #0
 800745e:	da2b      	bge.n	80074b8 <rint+0x78>
 8007460:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007464:	4302      	orrs	r2, r0
 8007466:	d023      	beq.n	80074b0 <rint+0x70>
 8007468:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800746c:	4302      	orrs	r2, r0
 800746e:	4254      	negs	r4, r2
 8007470:	4314      	orrs	r4, r2
 8007472:	0c4b      	lsrs	r3, r1, #17
 8007474:	0b24      	lsrs	r4, r4, #12
 8007476:	045b      	lsls	r3, r3, #17
 8007478:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800747c:	ea44 0103 	orr.w	r1, r4, r3
 8007480:	4b32      	ldr	r3, [pc, #200]	; (800754c <rint+0x10c>)
 8007482:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007486:	e9d3 6700 	ldrd	r6, r7, [r3]
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4630      	mov	r0, r6
 8007490:	4639      	mov	r1, r7
 8007492:	f7f8 feb3 	bl	80001fc <__adddf3>
 8007496:	e9cd 0100 	strd	r0, r1, [sp]
 800749a:	463b      	mov	r3, r7
 800749c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a0:	4632      	mov	r2, r6
 80074a2:	f7f8 fea9 	bl	80001f8 <__aeabi_dsub>
 80074a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80074ae:	4639      	mov	r1, r7
 80074b0:	ec41 0b10 	vmov	d0, r0, r1
 80074b4:	b003      	add	sp, #12
 80074b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b8:	4a25      	ldr	r2, [pc, #148]	; (8007550 <rint+0x110>)
 80074ba:	4132      	asrs	r2, r6
 80074bc:	ea01 0702 	and.w	r7, r1, r2
 80074c0:	4307      	orrs	r7, r0
 80074c2:	d0f5      	beq.n	80074b0 <rint+0x70>
 80074c4:	0851      	lsrs	r1, r2, #1
 80074c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80074ca:	4314      	orrs	r4, r2
 80074cc:	d00c      	beq.n	80074e8 <rint+0xa8>
 80074ce:	ea23 0201 	bic.w	r2, r3, r1
 80074d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80074d6:	2e13      	cmp	r6, #19
 80074d8:	fa43 f606 	asr.w	r6, r3, r6
 80074dc:	bf0c      	ite	eq
 80074de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80074e2:	2400      	movne	r4, #0
 80074e4:	ea42 0306 	orr.w	r3, r2, r6
 80074e8:	4918      	ldr	r1, [pc, #96]	; (800754c <rint+0x10c>)
 80074ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80074ee:	4622      	mov	r2, r4
 80074f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f8 fe80 	bl	80001fc <__adddf3>
 80074fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007504:	4622      	mov	r2, r4
 8007506:	462b      	mov	r3, r5
 8007508:	f7f8 fe76 	bl	80001f8 <__aeabi_dsub>
 800750c:	e7d0      	b.n	80074b0 <rint+0x70>
 800750e:	2e33      	cmp	r6, #51	; 0x33
 8007510:	dd07      	ble.n	8007522 <rint+0xe2>
 8007512:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007516:	d1cb      	bne.n	80074b0 <rint+0x70>
 8007518:	ee10 2a10 	vmov	r2, s0
 800751c:	f7f8 fe6e 	bl	80001fc <__adddf3>
 8007520:	e7c6      	b.n	80074b0 <rint+0x70>
 8007522:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007526:	f04f 36ff 	mov.w	r6, #4294967295
 800752a:	40d6      	lsrs	r6, r2
 800752c:	4230      	tst	r0, r6
 800752e:	d0bf      	beq.n	80074b0 <rint+0x70>
 8007530:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007534:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007538:	bf1f      	itttt	ne
 800753a:	ea24 0101 	bicne.w	r1, r4, r1
 800753e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007542:	fa44 f202 	asrne.w	r2, r4, r2
 8007546:	ea41 0402 	orrne.w	r4, r1, r2
 800754a:	e7cd      	b.n	80074e8 <rint+0xa8>
 800754c:	08007920 	.word	0x08007920
 8007550:	000fffff 	.word	0x000fffff
 8007554:	00000000 	.word	0x00000000

08007558 <scalbn>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	ec55 4b10 	vmov	r4, r5, d0
 800755e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007562:	4606      	mov	r6, r0
 8007564:	462b      	mov	r3, r5
 8007566:	b99a      	cbnz	r2, 8007590 <scalbn+0x38>
 8007568:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800756c:	4323      	orrs	r3, r4
 800756e:	d036      	beq.n	80075de <scalbn+0x86>
 8007570:	4b39      	ldr	r3, [pc, #228]	; (8007658 <scalbn+0x100>)
 8007572:	4629      	mov	r1, r5
 8007574:	ee10 0a10 	vmov	r0, s0
 8007578:	2200      	movs	r2, #0
 800757a:	f7f8 fff5 	bl	8000568 <__aeabi_dmul>
 800757e:	4b37      	ldr	r3, [pc, #220]	; (800765c <scalbn+0x104>)
 8007580:	429e      	cmp	r6, r3
 8007582:	4604      	mov	r4, r0
 8007584:	460d      	mov	r5, r1
 8007586:	da10      	bge.n	80075aa <scalbn+0x52>
 8007588:	a32b      	add	r3, pc, #172	; (adr r3, 8007638 <scalbn+0xe0>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	e03a      	b.n	8007606 <scalbn+0xae>
 8007590:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007594:	428a      	cmp	r2, r1
 8007596:	d10c      	bne.n	80075b2 <scalbn+0x5a>
 8007598:	ee10 2a10 	vmov	r2, s0
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 fe2c 	bl	80001fc <__adddf3>
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	e019      	b.n	80075de <scalbn+0x86>
 80075aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075ae:	460b      	mov	r3, r1
 80075b0:	3a36      	subs	r2, #54	; 0x36
 80075b2:	4432      	add	r2, r6
 80075b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075b8:	428a      	cmp	r2, r1
 80075ba:	dd08      	ble.n	80075ce <scalbn+0x76>
 80075bc:	2d00      	cmp	r5, #0
 80075be:	a120      	add	r1, pc, #128	; (adr r1, 8007640 <scalbn+0xe8>)
 80075c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075c4:	da1c      	bge.n	8007600 <scalbn+0xa8>
 80075c6:	a120      	add	r1, pc, #128	; (adr r1, 8007648 <scalbn+0xf0>)
 80075c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075cc:	e018      	b.n	8007600 <scalbn+0xa8>
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	dd08      	ble.n	80075e4 <scalbn+0x8c>
 80075d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075de:	ec45 4b10 	vmov	d0, r4, r5
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075e8:	da19      	bge.n	800761e <scalbn+0xc6>
 80075ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80075ee:	429e      	cmp	r6, r3
 80075f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80075f4:	dd0a      	ble.n	800760c <scalbn+0xb4>
 80075f6:	a112      	add	r1, pc, #72	; (adr r1, 8007640 <scalbn+0xe8>)
 80075f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e2      	bne.n	80075c6 <scalbn+0x6e>
 8007600:	a30f      	add	r3, pc, #60	; (adr r3, 8007640 <scalbn+0xe8>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f7f8 ffaf 	bl	8000568 <__aeabi_dmul>
 800760a:	e7cb      	b.n	80075a4 <scalbn+0x4c>
 800760c:	a10a      	add	r1, pc, #40	; (adr r1, 8007638 <scalbn+0xe0>)
 800760e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0b8      	beq.n	8007588 <scalbn+0x30>
 8007616:	a10e      	add	r1, pc, #56	; (adr r1, 8007650 <scalbn+0xf8>)
 8007618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761c:	e7b4      	b.n	8007588 <scalbn+0x30>
 800761e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007622:	3236      	adds	r2, #54	; 0x36
 8007624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007628:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800762c:	4620      	mov	r0, r4
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <scalbn+0x108>)
 8007630:	2200      	movs	r2, #0
 8007632:	e7e8      	b.n	8007606 <scalbn+0xae>
 8007634:	f3af 8000 	nop.w
 8007638:	c2f8f359 	.word	0xc2f8f359
 800763c:	01a56e1f 	.word	0x01a56e1f
 8007640:	8800759c 	.word	0x8800759c
 8007644:	7e37e43c 	.word	0x7e37e43c
 8007648:	8800759c 	.word	0x8800759c
 800764c:	fe37e43c 	.word	0xfe37e43c
 8007650:	c2f8f359 	.word	0xc2f8f359
 8007654:	81a56e1f 	.word	0x81a56e1f
 8007658:	43500000 	.word	0x43500000
 800765c:	ffff3cb0 	.word	0xffff3cb0
 8007660:	3c900000 	.word	0x3c900000

08007664 <_init>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr

08007670 <_fini>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr
